<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gemini`s wiki</title>
  
  <subtitle>Gemini</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-03-07T09:40:12.870Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Gemini</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>route</title>
    <link href="http://example.com/2024/03/07/laravel/Routing/"/>
    <id>http://example.com/2024/03/07/laravel/Routing/</id>
    <published>2024-03-07T09:34:16.875Z</published>
    <updated>2024-03-07T09:40:12.870Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>⬆️ <a href="../README-zh.md">回到顶部</a> ⬅️ <a href="./Views.md">上一个 (视图)</a> ➡️ <a href="./Validation.md">下一个 (验证)</a></p><ol><li><a href="#%E5%88%86%E7%BB%84%E4%B8%AD%E7%9A%84%E5%88%86%E7%BB%84">分组中的分组</a></li><li><a href="#%E9%80%9A%E9%85%8D%E7%AC%A6%E5%AD%90%E5%9F%9F%E5%90%8D">通配符子域名</a></li><li><a href="#routes%E8%B0%83%E7%94%A8%E4%B9%8B%E5%90%8E%E6%98%AF%E4%BB%80%E4%B9%88">Auth::routes调用之后是什么</a></li><li><a href="#%E8%B7%AF%E7%94%B1%E6%A8%A1%E5%9E%8B%E7%BB%91%E5%AE%9A-%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AAKey">路由模型绑定-你可以定义一个Key</a></li><li><a href="#%E5%BF%AB%E9%80%9F%E4%BB%8E%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA%E5%88%B0%E6%8E%A7%E5%88%B6%E5%99%A8">快速从路由导航到控制器</a></li><li><a href="#%E5%A4%87%E9%80%89%E8%B7%AF%E7%94%B1-%E5%BD%93%E6%B2%A1%E6%9C%89%E5%8C%B9%E9%85%8D%E5%88%B0%E4%BB%BB%E4%BD%95%E8%B7%AF%E7%94%B1%E6%97%B6">备选路由-当没有匹配到任何路由时</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%BF%9B%E8%A1%8C%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0%E9%AA%8C%E8%AF%81">使用正则进行路由参数验证</a></li><li><a href="#%E9%99%90%E6%B5%81-%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%8C%89%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE">限流-全局配置与按用户配置</a></li><li><a href="#%E8%B7%AF%E7%94%B1%E4%B8%AD%E7%9A%84URL%E5%8F%82%E6%95%B0">路由中的URL参数</a></li><li><a href="#%E6%8C%89%E6%96%87%E4%BB%B6%E4%B8%BA%E8%B7%AF%E7%94%B1%E5%88%86%E7%B1%BB">按文件为路由分类</a></li><li><a href="#%E7%BF%BB%E8%AF%91%E8%B5%84%E6%BA%90%E4%B8%AD%E7%9A%84%E5%8A%A8%E8%AF%8D">翻译资源中的动词</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B5%84%E6%BA%90%E8%B7%AF%E7%94%B1%E5%90%8D%E7%A7%B0">自定义资源路由名称</a></li><li><a href="#%E5%8F%AF%E8%AF%BB%E6%80%A7%E6%9B%B4%E5%BC%BA%E7%9A%84%E8%B7%AF%E7%94%B1%E5%88%97%E8%A1%A8">可读性更强的路由列表</a></li><li><a href="#%E9%A2%84%E5%8A%A0%E8%BD%BD">预加载</a></li><li><a href="#%E6%9C%AC%E5%9C%B0%E5%8C%96%E8%B5%84%E6%BA%90URI">本地化资源URI</a></li><li><a href="#%E8%B5%84%E6%BA%90%E6%8E%A7%E5%88%B6%E5%99%A8%E5%91%BD%E5%90%8D">资源控制器命名</a></li><li><a href="#%E6%9B%B4%E7%AE%80%E5%8D%95%E5%9C%B0%E9%AB%98%E4%BA%AE%E4%BD%A0%E7%9A%84%E5%AF%BC%E8%88%AA%E6%A0%8F">更简单地高亮你的导航栏</a></li><li><a href="#%E4%BD%BF%E7%94%A8route()%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0%E7%94%9F%E6%88%90%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84">使用route()辅助函数生成绝对路径</a></li><li><a href="#%E4%B8%BA%E4%BD%A0%E7%9A%84%E6%AF%8F%E4%B8%AA%E6%A8%A1%E5%9E%8B%E9%87%8D%E5%86%99%E8%B7%AF%E7%94%B1%E7%BB%91%E5%AE%9A%E8%A7%A3%E6%9E%90%E5%99%A8">为你的每个模型重写路由绑定解析器</a></li><li><a href="#%E5%A6%82%E6%9E%9C%E4%BD%A0%E9%9C%80%E8%A6%81%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1URL%E4%BD%86%E6%98%AF%E4%BD%A0%E6%83%B3%E8%AE%A9%E4%BB%96%E4%BB%AC%E6%9B%B4%E5%AE%89%E5%85%A8">如果你需要一个公共URL但是你想让他们更安全</a></li><li><a href="#%E5%9C%A8%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%AD%E4%BD%BF%E7%94%A8Gate">在中间件中使用Gate</a></li><li><a href="#%E7%AE%80%E5%8D%95%E8%B7%AF%E7%94%B1-%E4%BD%BF%E7%94%A8%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0">简单路由-使用箭头函数</a></li><li><a href="#%E8%B7%AF%E7%94%B1%E8%A7%86%E5%9B%BE">路由视图</a></li></ol><h3 id="分组中的分组"><a href="#分组中的分组" class="headerlink" title="分组中的分组"></a>分组中的分组</h3><p>在路由中，你可以在分组中创建分组，来实现仅仅为父分组中的某些路由分配中间件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>([<span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;account&#x27;</span>, <span class="string">&#x27;as&#x27;</span> =&gt; <span class="string">&#x27;account.&#x27;</span>], function() &#123;</span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;login&#x27;</span>, <span class="string">&#x27;AccountController@login&#x27;</span>);</span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;register&#x27;</span>, <span class="string">&#x27;AccountController@register&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>([<span class="string">&#x27;middleware&#x27;</span> =&gt; <span class="string">&#x27;auth&#x27;</span>], function() &#123;</span><br><span class="line">        <span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;edit&#x27;</span>, <span class="string">&#x27;AccountController@edit&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="通配符子域名"><a href="#通配符子域名" class="headerlink" title="通配符子域名"></a>通配符子域名</h3><p>你可以在分组中定义变量，来创建动态子域名分组，然后将这个变量传递给每一个子路由。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">domain</span>(<span class="string">&#x27;&#123;username&#125;.workspace.com&#x27;</span>)-&gt;<span class="title function_ invoke__">group</span>(function () &#123;</span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;user/&#123;id&#125;&#x27;</span>, function (<span class="variable">$username</span>, <span class="variable">$id</span>) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="routes调用之后是什么"><a href="#routes调用之后是什么" class="headerlink" title="routes调用之后是什么"></a>routes调用之后是什么</h3><p>若你使用 <a href="https://github.com/laravel/ui">Laravel UI package</a>, 你可能想知道<code>Auth::routes()</code>定义之后真正的路由是什么?</p><p>查看 <code>/vendor/laravel/ui/src/AuthRouteMethods.php</code>.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">auth</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$options</span> = []</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Authentication Routes...</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;login&#x27;</span>, <span class="string">&#x27;Auth\LoginController@showLoginForm&#x27;</span>)-&gt;<span class="title function_ invoke__">name</span>(<span class="string">&#x27;login&#x27;</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;login&#x27;</span>, <span class="string">&#x27;Auth\LoginController@login&#x27;</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;logout&#x27;</span>, <span class="string">&#x27;Auth\LoginController@logout&#x27;</span>)-&gt;<span class="title function_ invoke__">name</span>(<span class="string">&#x27;logout&#x27;</span>);</span><br><span class="line">        <span class="comment">// Registration Routes...</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$options</span>[<span class="string">&#x27;register&#x27;</span>] ?? <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;register&#x27;</span>, <span class="string">&#x27;Auth\RegisterController@showRegistrationForm&#x27;</span>)-&gt;<span class="title function_ invoke__">name</span>(<span class="string">&#x27;register&#x27;</span>);</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;register&#x27;</span>, <span class="string">&#x27;Auth\RegisterController@register&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Password Reset Routes...</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$options</span>[<span class="string">&#x27;reset&#x27;</span>] ?? <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">resetPassword</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Password Confirmation Routes...</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$options</span>[<span class="string">&#x27;confirm&#x27;</span>] ?? <span class="title function_ invoke__">class_exists</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">prependGroupNamespace</span>(<span class="string">&#x27;Auth\ConfirmPasswordController&#x27;</span>))) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">confirmPassword</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Email Verification Routes...</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$options</span>[<span class="string">&#x27;verify&#x27;</span>] ?? <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">emailVerification</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认调用:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Auth</span>::<span class="title function_ invoke__">routes</span>(); <span class="comment">// no parameters</span></span><br></pre></td></tr></table></figure><p>但是你可以提供参数来启用或禁用真正的路由</p><p>But you can provide parameters to enable o disable certain routes:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Auth</span>::<span class="title function_ invoke__">routes</span>([</span><br><span class="line">    <span class="string">&#x27;login&#x27;</span>    =&gt; <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&#x27;logout&#x27;</span>   =&gt; <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&#x27;register&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&#x27;reset&#x27;</span>    =&gt; <span class="literal">true</span>,  // <span class="keyword">for</span> resetting passwords</span><br><span class="line">    <span class="string">&#x27;confirm&#x27;</span>  =&gt; <span class="literal">false</span>, // <span class="keyword">for</span> additional password confirmations</span><br><span class="line">    <span class="string">&#x27;verify&#x27;</span>   =&gt; <span class="literal">false</span>, // <span class="keyword">for</span> email verification</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>由 <a href="https://github.com/LaravelDaily/laravel-tips/pull/57">suggestion</a> by <a href="https://github.com/MimisK13">MimisK13</a>提供</p><h3 id="路由模型绑定-你可以定义一个Key"><a href="#路由模型绑定-你可以定义一个Key" class="headerlink" title="路由模型绑定-你可以定义一个Key"></a>路由模型绑定-你可以定义一个Key</h3><p>你可以像 <code>Route::get(&#39;api/users/&#123;user&#125;&#39;, function (App\User $user) &#123; … &#125;</code> 这样来进行路由模型绑定，但不仅仅是 ID 字段，如果你想让 {user} 是 username，你可以把它放在模型中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getRouteKeyName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;username&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速从路由导航到控制器"><a href="#快速从路由导航到控制器" class="headerlink" title="快速从路由导航到控制器"></a>快速从路由导航到控制器</h3><p>在 <code>Laravel 8</code> 之前，这件事情是可选的。在 <code>Laravel 8</code> 中这将成为路由的标准语法</p><p>不用这么写:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;page&#x27;</span>, <span class="string">&#x27;PageController@action&#x27;</span>);</span><br></pre></td></tr></table></figure><p>你可以将控制器标识为 <code>class</code> 类名:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;page&#x27;</span>, [<span class="title class_">\App\Http\Controllers\PageController</span>::<span class="variable language_">class</span>, <span class="string">&#x27;action&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>这样，你就可以在 <code>PhpStorm</code>中点击 <code>PageController</code> 来跳转到控制器定义，而不是手动去搜索它</p><p>或者你想要让路由的定义更简洁，你可以在路由文件的开始提前引入控制器的类。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">PageController</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Then:</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;page&#x27;</span>, [<span class="title class_">PageController</span>::<span class="variable language_">class</span>, <span class="string">&#x27;action&#x27;</span>]);</span><br></pre></td></tr></table></figure><h3 id="备选路由-当没有匹配到任何路由时"><a href="#备选路由-当没有匹配到任何路由时" class="headerlink" title="备选路由-当没有匹配到任何路由时"></a>备选路由-当没有匹配到任何路由时</h3><p>如果你想为未找到的路由指定其它逻辑，而不是直接显示 404 页面，你可以在路由文件的最后为其创建一个特殊的路由。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>([<span class="string">&#x27;middleware&#x27;</span> =&gt; [<span class="string">&#x27;auth&#x27;</span>], <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;as&#x27;</span> =&gt; <span class="string">&#x27;admin.&#x27;</span>], function () &#123;</span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/home&#x27;</span>, <span class="string">&#x27;HomeController@index&#x27;</span>);</span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">resource</span>(<span class="string">&#x27;tasks&#x27;</span>, <span class="string">&#x27;Admin\TasksController&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Some more routes....</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">fallback</span>(function() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hm, why did you land here somehow?&#x27;</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="使用正则进行路由参数验证"><a href="#使用正则进行路由参数验证" class="headerlink" title="使用正则进行路由参数验证"></a>使用正则进行路由参数验证</h3><p>我们可以在路由中使用 <code>where</code>参数 来直接验证参数。一个典型的例子是，当使用语言区域的参数来作为路由前缀时，像是 <code>fr/blog</code> 和 <code>en/article/333</code> 等，这时我们如何来确保这两个首字母没有被用在其他语言呢？</p><p><code>routes/web.php</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>([</span><br><span class="line">    <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;&#123;locale&#125;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;where&#x27;</span> =&gt; [<span class="string">&#x27;locale&#x27;</span> =&gt; <span class="string">&#x27;[a-zA-Z]&#123;2&#125;&#x27;</span>]</span><br><span class="line">], function () &#123;</span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;HomeController@index&#x27;</span>);</span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;article/&#123;id&#125;&#x27;</span>, <span class="string">&#x27;ArticleController@show&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="限流-全局配置与按用户配置"><a href="#限流-全局配置与按用户配置" class="headerlink" title="限流-全局配置与按用户配置"></a>限流-全局配置与按用户配置</h3><p>你可以使用 <code>throttle:60,1</code> 来限制一些 URL 在每分钟内最多被访问 60 次。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">middleware</span>(<span class="string">&#x27;auth:api&#x27;</span>, <span class="string">&#x27;throttle:60,1&#x27;</span>)-&gt;<span class="title function_ invoke__">group</span>(function () &#123;</span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/user&#x27;</span>, function () &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>另外，你也可以为公开请求和登录用户分别配置：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// maximum of 10 requests for guests, 60 for authenticated users</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">middleware</span>(<span class="string">&#x27;throttle:10|60,1&#x27;</span>)-&gt;<span class="title function_ invoke__">group</span>(function () &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此外，你也可以使用数据库字段 <code>users.rate_limit</code> 为一些特殊用户设定此值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">middleware</span>(<span class="string">&#x27;auth:api&#x27;</span>, <span class="string">&#x27;throttle:rate_limit,1&#x27;</span>)-&gt;<span class="title function_ invoke__">group</span>(function () &#123;</span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/user&#x27;</span>, function () &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="路由中的URL参数"><a href="#路由中的URL参数" class="headerlink" title="路由中的URL参数"></a>路由中的URL参数</h3><p>如果你在路由中使用数组传入了其它参数，这些键 &#x2F; 值将会自动配对并且带入 <code>URL</code> 查询参数中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;user/&#123;id&#125;/profile&#x27;</span>, function (<span class="variable">$id</span>) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;)-&gt;<span class="title function_ invoke__">name</span>(<span class="string">&#x27;profile&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span> = <span class="title function_ invoke__">route</span>(<span class="string">&#x27;profile&#x27;</span>, [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;photos&#x27;</span> =&gt; <span class="string">&#x27;yes&#x27;</span>]); <span class="comment">// Result: /user/1/profile?photos=yes</span></span><br></pre></td></tr></table></figure><h3 id="按文件为路由分类"><a href="#按文件为路由分类" class="headerlink" title="按文件为路由分类"></a>按文件为路由分类</h3><p>如果你有一组与某些功能相关的路由，你可以将它们放在一个特殊的文件 <code>routes/XXXXX.php</code> 中，然后在 <code>routes/web.php</code> 中使用 include 引入它。&#96;</p><p>Taylor Otwell 在  <a href="https://github.com/laravel/breeze/blob/1.x/stubs/routes/web.php">Laravel Breeze</a> 中的例子：<br><code>routes/auth.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/&#x27;</span>, function () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&#x27;welcome&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/dashboard&#x27;</span>, function () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&#x27;dashboard&#x27;</span>);</span><br><span class="line">&#125;)-&gt;<span class="title function_ invoke__">middleware</span>([<span class="string">&#x27;auth&#x27;</span>])-&gt;<span class="title function_ invoke__">name</span>(<span class="string">&#x27;dashboard&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span>.<span class="string">&#x27;/auth.php&#x27;</span>;</span><br></pre></td></tr></table></figure><p>然后，在 <code>routes/auth.php</code> 中:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Auth</span>\<span class="title">AuthenticatedSessionController</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Controllers</span>\<span class="title">Auth</span>\<span class="title">RegisteredUserController</span>;</span><br><span class="line"><span class="comment">// ... more controllers</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Route</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/register&#x27;</span>, [<span class="title class_">RegisteredUserController</span>::<span class="variable language_">class</span>, <span class="string">&#x27;create&#x27;</span>])</span><br><span class="line">                -&gt;<span class="title function_ invoke__">middleware</span>(<span class="string">&#x27;guest&#x27;</span>)</span><br><span class="line">                -&gt;<span class="title function_ invoke__">name</span>(<span class="string">&#x27;register&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">post</span>(<span class="string">&#x27;/register&#x27;</span>, [<span class="title class_">RegisteredUserController</span>::<span class="variable language_">class</span>, <span class="string">&#x27;store&#x27;</span>])</span><br><span class="line">                -&gt;<span class="title function_ invoke__">middleware</span>(<span class="string">&#x27;guest&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... A dozen more routes</span></span><br></pre></td></tr></table></figure><p>但是，你应该只在路由都各自具有相同的前缀 &#x2F; 中间件配置时使用 <code>include()</code> 来引入路由，否则，更好的选择是将他们分类在 <code>app/Providers/RouteServiceProvider</code> 中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">configureRateLimiting</span>();</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">routes</span>(function () &#123;</span><br><span class="line">        <span class="title class_">Route</span>::<span class="title function_ invoke__">prefix</span>(<span class="string">&#x27;api&#x27;</span>)</span><br><span class="line">            -&gt;<span class="title function_ invoke__">middleware</span>(<span class="string">&#x27;api&#x27;</span>)</span><br><span class="line">            -&gt;<span class="title function_ invoke__">namespace</span>(<span class="variable">$this</span>-&gt;namespace)</span><br><span class="line">            -&gt;<span class="title function_ invoke__">group</span>(<span class="title function_ invoke__">base_path</span>(<span class="string">&#x27;routes/api.php&#x27;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Route</span>::<span class="title function_ invoke__">middleware</span>(<span class="string">&#x27;web&#x27;</span>)</span><br><span class="line">            -&gt;<span class="title function_ invoke__">namespace</span>(<span class="variable">$this</span>-&gt;namespace)</span><br><span class="line">            -&gt;<span class="title function_ invoke__">group</span>(<span class="title function_ invoke__">base_path</span>(<span class="string">&#x27;routes/web.php&#x27;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ... Your routes file listed next here</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="翻译资源中的动词"><a href="#翻译资源中的动词" class="headerlink" title="翻译资源中的动词"></a>翻译资源中的动词</h3><p>当你使用了资源控制器，但希望变更 <code>URL</code> 谓词以适应非英语语言环境下的 <code>SEO</code> ，以在路由中用 <code>/crear</code> 替换 <code>/create</code>，你可以使用 <code>App\Providers\RouteServiceProvider 中的 Route::resourceVerbs()</code> 配置。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">resourceVerbs</span>([</span><br><span class="line">        <span class="string">&#x27;create&#x27;</span> =&gt; <span class="string">&#x27;crear&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;edit&#x27;</span> =&gt; <span class="string">&#x27;editar&#x27;</span>,</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义资源路由名称"><a href="#自定义资源路由名称" class="headerlink" title="自定义资源路由名称"></a>自定义资源路由名称</h3><p>当使用资源路由时，你可以在 <code>routes/web.php</code> 中指定 <code>-&gt;names() 参数</code>，这样一来，在整个 Laravel 项目中，浏览器中的 URL 前缀和路由名称前缀可能会不同。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">resource</span>(<span class="string">&#x27;p&#x27;</span>, <span class="title class_">ProductController</span>::<span class="variable language_">class</span>)-&gt;<span class="title function_ invoke__">names</span>(<span class="string">&#x27;products&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这行代码将会生成像 <code>/p</code>, <code>/p/&#123;id&#125;</code>, <code>/p/&#123;id&#125;/edit</code> 这样的路由，但是你可以在代码中使用<code> route(&#39;products.index&#39;)</code>, <code>route(&#39;products.create&#39;)</code> 等方式来调用它们。</p><h3 id="可读性更强的路由列表"><a href="#可读性更强的路由列表" class="headerlink" title="可读性更强的路由列表"></a>可读性更强的路由列表</h3><p>你有没有运行过 <code>php artisan route:list</code> ，然后发现这个列表又长，可读性又很差。<br>另一个方法是：<br><code>php artisan route:list --compact</code><br>这样只会输出 3 列，而非 6 列：只展示方法名、 URI 和方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">+----------+---------------------------------+-------------------------------------------------------------------------+</span><br><span class="line">| Method   | URI                             | Action                                                                  |</span><br><span class="line">+----------+---------------------------------+-------------------------------------------------------------------------+</span><br><span class="line">| GET|HEAD | /                               | Closure                                                                 |</span><br><span class="line">| GET|HEAD | api/user                        | Closure                                                                 |</span><br><span class="line">| POST     | confirm-password                | App\Http\Controllers\Auth\ConfirmablePasswordController@store           |</span><br><span class="line">| GET|HEAD | confirm-password                | App\Http\Controllers\Auth\ConfirmablePasswordController@show            |</span><br><span class="line">| GET|HEAD | dashboard                       | Closure                                                                 |</span><br><span class="line">| POST     | email/verification-notification | App\Http\Controllers\Auth\EmailVerificationNotificationController@store |</span><br><span class="line">| POST     | forgot-password                 | App\Http\Controllers\Auth\PasswordResetLinkController@store             |</span><br><span class="line">| GET|HEAD | forgot-password                 | App\Http\Controllers\Auth\PasswordResetLinkController@create            |</span><br><span class="line">| POST     | login                           | App\Http\Controllers\Auth\AuthenticatedSessionController@store          |</span><br><span class="line">| GET|HEAD | login                           | App\Http\Controllers\Auth\AuthenticatedSessionController@create         |</span><br><span class="line">| POST     | logout                          | App\Http\Controllers\Auth\AuthenticatedSessionController@destroy        |</span><br><span class="line">| POST     | register                        | App\Http\Controllers\Auth\RegisteredUserController@store                |</span><br><span class="line">| GET|HEAD | register                        | App\Http\Controllers\Auth\RegisteredUserController@create               |</span><br><span class="line">| POST     | reset-password                  | App\Http\Controllers\Auth\NewPasswordController@store                   |</span><br><span class="line">| GET|HEAD | reset-password/&#123;token&#125;          | App\Http\Controllers\Auth\NewPasswordController@create                  |</span><br><span class="line">| GET|HEAD | verify-email                    | App\Http\Controllers\Auth\EmailVerificationPromptController@__invoke    |</span><br><span class="line">| GET|HEAD | verify-email/&#123;id&#125;/&#123;hash&#125;        | App\Http\Controllers\Auth\VerifyEmailController@__invoke                |</span><br><span class="line">+----------+---------------------------------+-------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>你还可以特别地指定所需要的列：</p><p><code>php artisan route:list --columns=Method,URI,Name</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">+----------+---------------------------------+---------------------+</span><br><span class="line">| Method   | URI                             | Name                |</span><br><span class="line">+----------+---------------------------------+---------------------+</span><br><span class="line">| GET|HEAD | /                               |                     |</span><br><span class="line">| GET|HEAD | api/user                        |                     |</span><br><span class="line">| POST     | confirm-password                |                     |</span><br><span class="line">| GET|HEAD | confirm-password                | password.confirm    |</span><br><span class="line">| GET|HEAD | dashboard                       | dashboard           |</span><br><span class="line">| POST     | email/verification-notification | verification.send   |</span><br><span class="line">| POST     | forgot-password                 | password.email      |</span><br><span class="line">| GET|HEAD | forgot-password                 | password.request    |</span><br><span class="line">| POST     | login                           |                     |</span><br><span class="line">| GET|HEAD | login                           | login               |</span><br><span class="line">| POST     | logout                          | logout              |</span><br><span class="line">| POST     | register                        |                     |</span><br><span class="line">| GET|HEAD | register                        | register            |</span><br><span class="line">| POST     | reset-password                  | password.update     |</span><br><span class="line">| GET|HEAD | reset-password/&#123;token&#125;          | password.reset      |</span><br><span class="line">| GET|HEAD | verify-email                    | verification.notice |</span><br><span class="line">| GET|HEAD | verify-email/&#123;id&#125;/&#123;hash&#125;        | verification.verify |</span><br><span class="line">+----------+---------------------------------+---------------------+</span><br></pre></td></tr></table></figure><h3 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h3><p>如果你使用了路由模型绑定，并且你认为不会在绑定关系中使用预加载，请你再想一想。<br>所以当你用了这样的路由模型绑定:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">Product <span class="variable">$product</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是你有一个从属关系，这时候就不能使用 <code>$product-&gt;with(&#39;category&#39;)</code> 预加载了吗？<br>你当然可以，使用 <code>-&gt;load()</code> 来加载关系</p><p>But you have a belongsTo relationship, and cannot use $product-&gt;with(‘category’) eager loading?<br><br>You actually can! Load the relationship with <code>-&gt;load()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">Product <span class="variable">$product</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$product</span>-&gt;<span class="title function_ invoke__">load</span>(<span class="string">&#x27;category&#x27;</span>);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="本地化资源URI"><a href="#本地化资源URI" class="headerlink" title="本地化资源URI"></a>本地化资源URI</h3><p>如果你使用了资源控制器，但是想要将 URL 谓词变为非英语形式的，比如你想要西班牙语的 <code>/crear</code> 而不是 <code>/create</code> ，你可以使用 <code>Route::resourceVerbs()</code> 方法来配置。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">resourceVerbs</span>([</span><br><span class="line">        <span class="string">&#x27;create&#x27;</span> =&gt; <span class="string">&#x27;crear&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;edit&#x27;</span> =&gt; <span class="string">&#x27;editar&#x27;</span>,</span><br><span class="line">    ]);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="资源控制器命名"><a href="#资源控制器命名" class="headerlink" title="资源控制器命名"></a>资源控制器命名</h3><p>在资源控制器中，你可以在 <code>routes/web.php</code> 中指定 <code>-&gt;names()</code> 参数，这样 <code>URL</code> 前缀与路由前缀可能会不同<br>.<br>这样会生成诸如  <code>/p</code>, <code>/p/&#123;id&#125;</code>, <code>/p/&#123;id&#125;/edit</code> 等等，但是你可以这样调用它们：</p><p><code>route(&#39;products.index)</code><br><code>route(&#39;products.create)</code><br>等等</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">resource</span>(<span class="string">&#x27;p&#x27;</span>, <span class="title class_">\App\Http\Controllers\ProductController</span>::<span class="variable language_">class</span>)-&gt;<span class="title function_ invoke__">names</span>(<span class="string">&#x27;products&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="更简单地高亮你的导航栏"><a href="#更简单地高亮你的导航栏" class="headerlink" title="更简单地高亮你的导航栏"></a>更简单地高亮你的导航栏</h3><p>使用<code>Route::is(&#39;route-name&#39;)</code>来更简单的高亮你的导航栏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> @<span class="attr">if</span>(<span class="attr">Route::is</span>(&#x27;<span class="attr">home</span>&#x27;)) <span class="attr">class</span>=<span class="string">&quot;active&quot;</span> @<span class="attr">endif</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> @<span class="attr">if</span>(<span class="attr">Route::is</span>(&#x27;<span class="attr">contact-us</span>&#x27;)) <span class="attr">class</span>=<span class="string">&quot;active&quot;</span> @<span class="attr">endif</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/contact-us&quot;</span>&gt;</span>Contact us<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/anwar_nairi/status/1443893957507747849">@anwar_nairi</a>提供</p><h3 id="使用route辅助函数生成绝对路径"><a href="#使用route辅助函数生成绝对路径" class="headerlink" title="使用route辅助函数生成绝对路径"></a>使用route辅助函数生成绝对路径</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">route</span>(<span class="string">&#x27;page.show&#x27;</span>, <span class="variable">$page</span>-&gt;id);</span><br><span class="line"><span class="comment">// http://laravel.test/pages/1</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">route</span>(<span class="string">&#x27;page.show&#x27;</span>, <span class="variable">$page</span>-&gt;id, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// /pages/1</span></span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/oliverds_/status/1445796035742240770">@oliverds_</a>提供</p><h3 id="为你的每个模型重写路由绑定解析器"><a href="#为你的每个模型重写路由绑定解析器" class="headerlink" title="为你的每个模型重写路由绑定解析器"></a>为你的每个模型重写路由绑定解析器</h3><p>你可以为你的所有模型重写路由绑定解析器。在这个例子里，我们没有对<code>URL</code> 中的 <code>@</code> 符号做任何处理，所以 用&#96;&#96;resolveRouteBinding<code> </code>我可以移除<code>@</code>符号 然后解析模型</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Route</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;&#123;product:slug&#125;&#x27;</span>, <span class="title class_">Controller</span>::<span class="variable language_">class</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Request</span></span><br><span class="line">https:<span class="comment">//nodejs.pub/@unlock/hello-world</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Product Model</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveRouteBinding</span>(<span class="params"><span class="variable">$value</span>, <span class="variable">$field</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$value</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$value</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parent</span>::<span class="title function_ invoke__">resolveRouteBinding</span>(<span class="variable">$value</span>, <span class="variable">$field</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/Philo01/status/1447539300397195269">@Philo01</a>提供</p><h3 id="如果你需要一个公共URL但是你想让他们更安全"><a href="#如果你需要一个公共URL但是你想让他们更安全" class="headerlink" title="如果你需要一个公共URL但是你想让他们更安全"></a>如果你需要一个公共URL但是你想让他们更安全</h3><p>如果你需要一个公共URL但是你想让他们更安全，使用 <code> Laravel signed URL</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">destroy</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$confirmDeleteUrl</span> = URL::<span class="title function_ invoke__">signedRoute</span>(<span class="string">&#x27;confirm-destroy&#x27;</span>, [</span><br><span class="line">            <span class="variable">$user</span> =&gt; <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">user</span>()</span><br><span class="line">        ]);</span><br><span class="line">        <span class="comment">// Send link by email...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">confirmDestroy</span>(<span class="params">Request <span class="variable">$request</span>, User <span class="variable">$user</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (! <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">hasValidSignature</span>()) &#123;</span><br><span class="line">            <span class="title function_ invoke__">abort</span>(<span class="number">403</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// User confirmed by clikcing on the email</span></span><br><span class="line">        <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">delete</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">redirect</span>()-&gt;<span class="title function_ invoke__">route</span>(<span class="string">&#x27;home&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/anwar_nairi/status/1448239591467589633">@anwar_nairi</a>提供</p><h3 id="在中间件中使用Gate"><a href="#在中间件中使用Gate" class="headerlink" title="在中间件中使用Gate"></a>在中间件中使用Gate</h3><p>你可以在中间件中使用在 <code>App\Providers\AuthServiceProvider</code>设置的<code>Gate</code> </p><p>怎么做呢?你可以在路由中添加<code>can:</code>和必要<code>gate</code>的名字</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">put</span>(<span class="string">&#x27;/post/&#123;post&#125;&#x27;</span>, function (Post <span class="variable">$post</span>) &#123;</span><br><span class="line">    <span class="comment">// The current user may update the post...</span></span><br><span class="line">&#125;)-&gt;<span class="title function_ invoke__">middleware</span>(<span class="string">&#x27;can:update,post&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="简单路由-使用箭头函数"><a href="#简单路由-使用箭头函数" class="headerlink" title="简单路由-使用箭头函数"></a>简单路由-使用箭头函数</h3><p>在路由中你可以使用PHP的箭头函数 而不需要用匿名函数。</p><p>要做到这一点 你可以使用 <code>fn() =&gt;</code> 这样看起来更简单。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Instead of</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/example&#x27;</span>, function () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">User</span>::<span class="title function_ invoke__">all</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// You can</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/example&#x27;</span>, fn () =&gt; <span class="title class_">User</span>::<span class="title function_ invoke__">all</span>());</span><br></pre></td></tr></table></figure><h3 id="路由视图"><a href="#路由视图" class="headerlink" title="路由视图"></a>路由视图</h3><p>使用<code>Route::view($uri , $bladePage)</code>直接返回view 而不需要控制器方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//this will return home.blade.php view</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">view</span>(<span class="string">&#x27;/home&#x27;</span>, <span class="string">&#x27;home&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="laravel" scheme="http://example.com/categories/laravel/"/>
    
    
    <category term="laravel" scheme="http://example.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>other其他</title>
    <link href="http://example.com/2024/03/07/laravel/Other/"/>
    <id>http://example.com/2024/03/07/laravel/Other/</id>
    <published>2024-03-07T09:34:16.875Z</published>
    <updated>2024-03-07T09:40:10.365Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>⬆️ <a href="../README-zh.md">回到顶部</a> ⬅️ <a href="./API.md">上一个 (API)</a> </p><ol><li><a href="#localhost%E9%85%8D%E7%BD%AE">localhost配置</a></li><li><a href="#%E4%BD%95%E6%97%B6%E8%BF%90%E8%A1%8C%E6%88%96%E4%B8%8D%E8%BF%90%E8%A1%8Ccomposer-update">何时运行或不运行composer-update</a></li><li><a href="#Composer%E6%A3%80%E6%9F%A5%E6%96%B0%E7%89%88%E6%9C%AC">Composer检查新版本</a></li><li><a href="#%E8%87%AA%E5%8A%A8%E5%A4%A7%E5%86%99%E7%BF%BB%E8%AF%91">自动大写翻译</a></li><li><a href="#%E4%BB%85%E5%90%AB%E5%B0%8F%E6%97%B6%E7%9A%84Carbon">仅含小时的Carbon</a></li><li><a href="#%E5%8D%95%E5%8A%A8%E4%BD%9C%E6%8E%A7%E5%88%B6%E5%99%A8">单动作控制器</a></li><li><a href="#%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0%E7%89%B9%E5%AE%9A%E7%9A%84%E6%8E%A7%E5%88%B6%E5%99%A8%E6%96%B9%E6%B3%95">重定向到特定的控制器方法</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E6%97%A7%E7%89%88%E6%9C%AC%E7%9A%84Laravel">使用旧版本的Laravel</a></li><li><a href="#%E4%B8%BA%E5%88%86%E9%A1%B5%E9%93%BE%E6%8E%A5%E6%B7%BB%E5%8A%A0%E5%8F%82%E6%95%B0">为分页链接添加参数</a></li><li><a href="#%E5%8F%AF%E9%87%8D%E5%A4%8D%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0">可重复回调函数</a></li><li><a href="#$request-%3EhasAny">$request-&gt;hasAny</a></li><li><a href="#%E7%AE%80%E5%8D%95%E5%88%86%E9%A1%B5%E7%BB%84%E4%BB%B6">简单分页组件</a></li><li><a href="#%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E7%9A%84%E6%96%B9%E6%B3%95">获取数据的方法</a></li><li><a href="#Blade%E6%8C%87%E4%BB%A4%E5%A2%9E%E5%8A%A0%E7%9C%9F%E5%81%87%E6%9D%A1%E4%BB%B6">Blade指令增加真假条件s</a></li><li><a href="#%E4%BB%BB%E5%8A%A1%E5%85%81%E8%AE%B8%E8%84%B1%E7%A6%BB%E9%98%9F%E5%88%97">任务允许脱离队列</a></li><li><a href="#%E5%9C%A8%E5%B7%A5%E5%8E%82%E7%B1%BB%E6%88%96seeders%E5%A4%96%E9%83%A8%E4%BD%BF%E7%94%A8Faker">在工厂类或seeders外部使用Faker</a></li><li><a href="#%E5%8F%AF%E4%BB%A5%E5%AE%9A%E6%97%B6%E6%89%A7%E8%A1%8C%E7%9A%84%E4%BA%8B%E6%83%85">可以定时执行的事情</a></li><li><a href="#%E6%A3%80%E7%B4%A2Laravel%E6%96%87%E6%A1%A3">检索Laravel文档</a></li><li><a href="#%E8%BF%87%E6%BB%A4route-list">过滤route-list</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89Blade%E6%8C%87%E4%BB%A4">自定义Blade指令</a></li><li><a href="#Artisan%E5%91%BD%E4%BB%A4%E5%B8%AE%E5%8A%A9">Artisan命令帮助</a></li><li><a href="#%E5%BD%93%E8%BF%90%E8%A1%8C%E6%B5%8B%E8%AF%95%E6%97%B6%E7%A6%81%E7%94%A8%E6%87%92%E5%8A%A0%E8%BD%BD">当运行测试时禁用懒加载</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E4%B8%A4%E4%B8%AA%E5%BE%88%E5%A5%BD%E7%94%A8%E7%9A%84%E8%BE%85%E5%8A%A9%E5%87%BD%E6%95%B0%E4%BC%9A%E5%B8%A6%E6%9D%A5%E9%AD%94%E6%B3%95%E6%95%88%E6%9E%9C">使用两个很好用的辅助函数会带来魔法效果</a></li><li><a href="#%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E7%9A%84%E9%BB%98%E8%AE%A4%E5%80%BC">请求参数的默认值</a></li><li><a href="#%E5%9C%A8%E8%B7%AF%E7%94%B1%E4%B8%AD%E7%9B%B4%E6%8E%A5%E4%BC%A0%E5%85%A5%E4%B8%AD%E9%97%B4%E4%BB%B6%E8%80%8C%E4%B8%8D%E6%98%AF%E6%B3%A8%E5%86%8C%E5%AE%83">在路由中直接传入中间件而不是注册它</a></li><li><a href="#%E5%B0%86%E6%95%B0%E7%BB%84%E8%BD%AC%E5%8C%96%E6%88%90css%E7%B1%BB">将数组转化成css类</a></li><li><a href="#Laravel-Cashier%E4%B8%AD%E7%9A%84upcomingInvoice%E6%96%B9%E6%B3%95">Laravel-Cashier中的upcomingInvoice方法</a></li><li><a href="#$request-%3Eexists%E4%B8%8Ehas">$request-&gt;exists与has</a></li><li><a href="#%E8%BF%94%E5%9B%9E%E5%B8%A6%E5%8F%98%E9%87%8F%E8%A7%86%E5%9B%BE%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E6%B3%95">返回带变量视图的多种方法</a></li><li><a href="#%E8%B0%83%E5%BA%A6%E6%A0%87%E5%87%86shell%E5%91%BD%E4%BB%A4">调度标准shell命令</a></li><li><a href="#%E6%97%A0%E9%9C%80SSL%E9%AA%8C%E8%AF%81%E7%9A%84HTTP%E8%AF%B7%E6%B1%82">无需SSL验证的HTTP请求</a></li><li><a href="#%E4%B8%8D%E6%96%AD%E8%A8%80%E4%BB%BB%E4%BD%95%E5%86%85%E5%AE%B9%E7%9A%84%E6%B5%8B%E8%AF%95">不断言任何内容的测试</a></li><li><a href="#Str%E7%9A%84mask%E6%96%B9%E6%B3%95">Str的mask方法</a></li><li><a href="#%E6%89%A9%E5%B1%95Laravel%E7%B1%BB">扩展Laravel类</a></li><li><a href="#Can%E7%89%B9%E6%80%A7">Can特性</a></li><li><a href="#%E4%B8%B4%E6%97%B6%E4%B8%8B%E8%BD%BDurl">临时下载url</a></li><li><a href="#%E5%A4%84%E7%90%86%E6%B7%B1%E5%BA%A6%E5%B5%8C%E5%A5%97%E6%95%B0%E7%BB%84">处理深度嵌套数组</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E7%9A%84%E5%91%88%E7%8E%B0%E6%96%B9%E5%BC%8F">自定义异常的呈现方式</a></li><li><a href="#tap%E5%8A%A9%E6%89%8B%E5%87%BD%E6%95%B0">tap助手函数</a></li><li><a href="#%E9%87%8D%E7%BD%AE%E6%89%80%E6%9C%89%E5%89%A9%E4%BD%99%E7%9A%84%E6%97%B6%E9%97%B4%E5%8D%95%E4%BD%8D">重置所有剩余的时间单位</a></li><li><a href="#%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%86%85%E6%A0%B8%E4%B8%AD%E7%9A%84%E8%AE%A1%E5%88%92%E5%91%BD%E4%BB%A4%E9%97%AE%E9%A2%98%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%8A%A8%E9%80%9A%E8%BF%87%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E5%85%B6%E8%BE%93%E5%87%BA">控制台内核中的计划命令问题可以自动通过电子邮件发送其输出</a></li><li><a href="#%E4%BD%BF%E7%94%A8GET%E5%8F%82%E6%95%B0%E6%9E%84%E9%80%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AD%9B%E9%80%89%E6%9F%A5%E8%AF%A2%E6%97%B6%E8%A6%81%E5%B0%8F%E5%BF%83">使用GET参数构造自定义筛选查询时要小心</a></li><li><a href="#%E6%B8%85%E7%90%86%E4%BD%A0%E8%87%83%E8%82%BF%E7%9A%84%E8%B7%AF%E7%94%B1%E6%96%87%E4%BB%B6">清理你臃肿的路由文件</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%82%AE%E4%BB%B6%E6%97%A5%E5%BF%97%E5%AD%98%E5%82%A8%E4%BD%8D%E7%BD%AE">自定义邮件日志存储位置</a></li><li><a href="#markdown%E7%AE%80%E5%8D%95%E5%88%9B%E5%BB%BA">markdown简单创建</a></li><li><a href="#%E7%BB%99%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%BC%A0%E5%8F%82%E6%95%B0">给中间件传参数</a></li><li><a href="#%E8%8E%B7%E5%8F%96%E5%B9%B6%E5%88%A0%E9%99%A4session">获取并删除session</a></li><li><a href="#request%E7%9A%84date%E6%96%B9%E6%B3%95">request的date方法</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E5%88%86%E9%A1%B5%E6%97%B6%E8%AF%B7%E4%BD%BF%E7%94%A8through%E8%80%8C%E4%B8%8D%E6%98%AFmap">使用分页时请使用through而不是map</a></li><li><a href="#%E5%AE%9A%E4%B9%89%E8%AE%BF%E9%97%AE%E5%99%A8%E4%B8%8E%E4%BF%AE%E6%94%B9%E5%99%A8%E7%9A%84%E6%96%B0%E6%96%B9%E6%B3%95">定义访问器与修改器的新方法</a></li></ol><h3 id="localhost配置"><a href="#localhost配置" class="headerlink" title="localhost配置"></a>localhost配置</h3><p>不要忘记将 <code>.env</code> 文件中的 <code>app_url</code> 从 <code>http://localhost</code> 中改为真实的 <code>URL</code>，因为它将是你的电子邮件通知和任何其他链接的基础。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">APP_NAME=Laravel</span><br><span class="line">APP_ENV=local</span><br><span class="line">APP_KEY=base64:9PHz3TL5C4YrdV6Gg/Xkkmx9btaE93j7rQTUZWm2MqU=</span><br><span class="line">APP_DEBUG=true</span><br><span class="line">APP_URL=http://localhost</span><br></pre></td></tr></table></figure><h3 id="何时运行或不运行composer-update"><a href="#何时运行或不运行composer-update" class="headerlink" title="何时运行或不运行composer-update"></a>何时运行或不运行composer-update</h3><p>与<code>Laravel</code>不是很相关，但是… 永远不要在生产服务器上运行 <code>composer update</code> ，它很慢，会 “破坏” 存储库。始终在你电脑上本地运行 <code>composer update</code> ，将新的 <code>composer.lock</code> 提交到存储库，然后再在生产服务器运行 <code>composer install</code>。</p><h3 id="Composer检查新版本"><a href="#Composer检查新版本" class="headerlink" title="Composer检查新版本"></a>Composer检查新版本</h3><p>如果你想找出 <code>composer.json</code> 包中已经发布的较新版本，直接运行 <code>composer outdated</code>。你会得到一个包含所有信息的完整列表，如下所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">phpdocumentor/type-resolver 0.4.0 0.7.1</span><br><span class="line">phpunit/php-code-coverage   6.1.4 7.0.3 Library that provides collection, processing, and rende...</span><br><span class="line">phpunit/phpunit             7.5.9 8.1.3 The PHP Unit Testing framework.</span><br><span class="line">ralouphie/getallheaders     2.0.5 3.0.3 A polyfill for getallheaders.</span><br><span class="line">sebastian/global-state      2.0.0 3.0.0 Snapshotting of global state</span><br></pre></td></tr></table></figure><h3 id="自动大写翻译"><a href="#自动大写翻译" class="headerlink" title="自动大写翻译"></a>自动大写翻译</h3><p>在翻译文件中<code>（resources/lang）</code>，你不仅可以指定变量为<code>:variable</code> ，也可以指定大写为<code>:VARIABLE</code> 或 <code>:Variable</code>，然后你传递的值也会自动大写。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// resources/lang/en/messages.php</span></span><br><span class="line"><span class="string">&#x27;welcome&#x27;</span> =&gt; <span class="string">&#x27;Welcome, :Name&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Result: &quot;Welcome, Taylor&quot;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">__</span>(<span class="string">&#x27;messages.welcome&#x27;</span>, [<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;taylor&#x27;</span>]);</span><br></pre></td></tr></table></figure><h3 id="仅含小时的Carbon"><a href="#仅含小时的Carbon" class="headerlink" title="仅含小时的Carbon"></a>仅含小时的Carbon</h3><p>如果你想有当前日期不包含秒或者分钟，用<code>Carbon</code>的方法比如：<code>setSeconds(0)</code> 或者  <code>setMinutes(0)</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2020-04-20 08:12:34</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">now</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2020-04-20 08:12:00</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">now</span>()-&gt;<span class="title function_ invoke__">setSeconds</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2020-04-20 08:00:00</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">now</span>()-&gt;<span class="title function_ invoke__">setSeconds</span>(<span class="number">0</span>)-&gt;<span class="title function_ invoke__">setMinutes</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Another way - even shorter</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">now</span>()-&gt;<span class="title function_ invoke__">startOfHour</span>();</span><br></pre></td></tr></table></figure><h3 id="单动作控制器"><a href="#单动作控制器" class="headerlink" title="单动作控制器"></a>单动作控制器</h3><p>如果你想创建一个只有一个动作的控制器，你可以使用 __invoke() 方法创建「可调用（invokable）」控制器。<br>路由：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;user/&#123;id&#125;&#x27;</span>, <span class="string">&#x27;ShowProfile&#x27;</span>);</span><br></pre></td></tr></table></figure><p>Artisan 命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:controller ShowProfile --invokable</span><br></pre></td></tr></table></figure><p>控制器 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShowProfile</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&#x27;user.profile&#x27;</span>, [</span><br><span class="line">            <span class="string">&#x27;user&#x27;</span> =&gt; <span class="title class_">User</span>::<span class="title function_ invoke__">findOrFail</span>(<span class="variable">$id</span>)</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重定向到特定的控制器方法"><a href="#重定向到特定的控制器方法" class="headerlink" title="重定向到特定的控制器方法"></a>重定向到特定的控制器方法</h3><p>你不仅可以 <code>redirect()</code> 到 <code>URL</code> 或特定的路由，而且可以跳转到一个特定的控制器里的特定方法，甚至向其传递参数。像这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">redirect</span>()-&gt;<span class="title function_ invoke__">action</span>(<span class="string">&#x27;SomeController@method&#x27;</span>, [<span class="string">&#x27;param&#x27;</span> =&gt; <span class="variable">$value</span>]);</span><br></pre></td></tr></table></figure><h3 id="使用旧版本的Laravel"><a href="#使用旧版本的Laravel" class="headerlink" title="使用旧版本的Laravel"></a>使用旧版本的Laravel</h3><p>如果你想用旧版本而非新版本的 <code>Laravel</code>，使用这个命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer create-project --prefer-dist laravel/laravel project <span class="string">&quot;7.*&quot;</span></span><br></pre></td></tr></table></figure><p>将 <code>7.*</code> 更改为任何你想要的版本。</p><h3 id="为分页链接添加参数"><a href="#为分页链接添加参数" class="headerlink" title="为分页链接添加参数"></a>为分页链接添加参数</h3><p>在默认的分页链接中，你可以传递其他参数，保留原始的查询字符串，甚至指向一个特定的 <code>#xxxxx</code> 锚点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; $users-&gt;appends([&#x27;sort&#x27; =&gt; &#x27;votes&#x27;])-&gt;links() &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; $users-&gt;withQueryString()-&gt;links() &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; $users-&gt;fragment(&#x27;foo&#x27;)-&gt;links() &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="可重复回调函数"><a href="#可重复回调函数" class="headerlink" title="可重复回调函数"></a>可重复回调函数</h3><p>如果你又一个需要多次重复调用的回调函数，你可以将其声明在一个变量中，然后反复使用它。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$userCondition</span> = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;user_id&#x27;</span>, <span class="title function_ invoke__">auth</span>()-&gt;<span class="title function_ invoke__">id</span>());</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get articles that have comments from this user</span></span><br><span class="line"><span class="comment">// And return only those comments from this user</span></span><br><span class="line"><span class="variable">$articles</span> = <span class="title class_">Article</span>::<span class="title function_ invoke__">with</span>([<span class="string">&#x27;comments&#x27;</span> =&gt; <span class="variable">$userCondition</span>])</span><br><span class="line">    -&gt;<span class="title function_ invoke__">whereHas</span>(<span class="string">&#x27;comments&#x27;</span>, <span class="variable">$userCondition</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></table></figure><h3 id="request-hasAny"><a href="#request-hasAny" class="headerlink" title="$request-&gt;hasAny"></a>$request-&gt;hasAny</h3><p>你不仅可以使用 <code>$request-&gt;has()</code> 方法来查看一个参数，而且可以使用 <code>$request-&gt;hasAny()</code> 来查看传入的多个参数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span>(<span class="params">Request <span class="variable">$request</span></span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">hasAny</span>([<span class="string">&#x27;api_key&#x27;</span>, <span class="string">&#x27;token&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;We have API key passed&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;No authorization parameter&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单分页组件"><a href="#简单分页组件" class="headerlink" title="简单分页组件"></a>简单分页组件</h3><p>在分页组件中，如果你只需要「上一页 &#x2F; 下一页」的链接，而不是需要所有页码，也因此可以使用更少的数据库查询，你只需要将 <code>simplePaginate() </code>更改为<code> paginate()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Instead of </span></span><br><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">paginate</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can do this</span></span><br><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">simplePaginate</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="获取数据的方法"><a href="#获取数据的方法" class="headerlink" title="获取数据的方法"></a>获取数据的方法</h3><p>如果你有一个具有复杂数据结构的数组，例如带对象嵌套的数组，你可以使用 <code>data_get() </code>助手函数配合通配符和「点」符号，来从嵌套数组或对象中检索值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// We have an array</span></span><br><span class="line">[ </span><br><span class="line">  <span class="number">0</span> =&gt; </span><br><span class="line">[<span class="string">&#x27;user_id&#x27;</span> =&gt;<span class="string">&#x27;some user id&#x27;</span>, <span class="string">&#x27;created_at&#x27;</span> =&gt; <span class="string">&#x27;some timestamp&#x27;</span>, <span class="string">&#x27;product&#x27;</span> =&gt; &#123;<span class="keyword">object</span> Product&#125;, etc], </span><br><span class="line">  <span class="number">1</span> =&gt;  </span><br><span class="line">  [<span class="string">&#x27;user_id&#x27;</span> =&gt;<span class="string">&#x27;some user id&#x27;</span>, <span class="string">&#x27;created_at&#x27;</span> =&gt; <span class="string">&#x27;some timestamp&#x27;</span>, <span class="string">&#x27;product&#x27;</span> =&gt; &#123;<span class="keyword">object</span> Product&#125;, etc],  </span><br><span class="line">  <span class="number">2</span> =&gt;  etc</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now we want to get all products ids. We can do like this:</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">data_get</span>(<span class="variable">$yourArray</span>,  <span class="string">&#x27;*.product.id&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now we have all products ids [1, 2, 3, 4, 5, etc...]</span></span><br></pre></td></tr></table></figure><h3 id="Blade指令增加真假条件"><a href="#Blade指令增加真假条件" class="headerlink" title="Blade指令增加真假条件"></a>Blade指令增加真假条件</h3><p><code>Laravel 8.51</code> 新增 <code>@class</code> 指令，用于添加控制 CSS 类的真 &#x2F; 假条件。可以在 <a href="https://laravel.com/docs/8.x/blade#conditional-classes">文档</a> <br>中了解更多<br>之前: </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;@<span class="title">if</span> ($<span class="title">active</span>) <span class="title">underline</span> @<span class="title">endif</span>&quot;&gt;`</span></span><br></pre></td></tr></table></figure><p>现在:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div @<span class="class"><span class="keyword">class</span>([&#x27;<span class="title">underline</span>&#x27; =&gt; $<span class="title">active</span>])&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@php</span><br><span class="line">    <span class="variable">$isActive</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable">$hasError</span> = <span class="literal">true</span>;</span><br><span class="line">@endphp</span><br><span class="line"></span><br><span class="line">&lt;span @<span class="class"><span class="keyword">class</span>([</span></span><br><span class="line"><span class="class">    &#x27;<span class="title">p</span>-4&#x27;,</span></span><br><span class="line"><span class="class">    &#x27;<span class="title">font</span>-<span class="title">bold</span>&#x27; =&gt; $<span class="title">isActive</span>,</span></span><br><span class="line"><span class="class">    &#x27;<span class="title">text</span>-<span class="title">gray</span>-500&#x27; =&gt; ! $<span class="title">isActive</span>,</span></span><br><span class="line"><span class="class">    &#x27;<span class="title">bg</span>-<span class="title">red</span>&#x27; =&gt; $<span class="title">hasError</span>,</span></span><br><span class="line"><span class="class">])&gt;&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;<span class="title">span</span> <span class="title">class</span>=&quot;<span class="title">p</span>-4 <span class="title">text</span>-<span class="title">gray</span>-500 <span class="title">bg</span>-<span class="title">red</span>&quot;&gt;&lt;/<span class="title">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/Teacoders/status/1445417511546023938">@Teacoders</a>提供</p><h3 id="任务允许脱离队列"><a href="#任务允许脱离队列" class="headerlink" title="任务允许脱离队列"></a>任务允许脱离队列</h3><p>在文档中，任务是在<code>队列</code>章节进行讨论的，但是你可以脱离队列来使用<code>job</code>，就像传统的委托任务的类一样。只需在控制器中调用 <code>$this-&gt;dispatchNow()</code> 即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">approve</span>(<span class="params">Article <span class="variable">$article</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">dispatchNow</span>(<span class="keyword">new</span> <span class="title class_">ApproveArticle</span>(<span class="variable">$article</span>));</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在工厂类或seeders外部使用Faker"><a href="#在工厂类或seeders外部使用Faker" class="headerlink" title="在工厂类或seeders外部使用Faker"></a>在工厂类或seeders外部使用Faker</h3><p>如果你想要生成一些假数据，你可以在模型工厂或 Seeds 中，甚至任何类的外部使用 Faker。</p><p>注意：要在生产模式 <code>production</code> 中使用它的话，你需要在 <code>composer.json</code> 中，将 faker 从 “require-dev” 移动到 “require” 中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Faker</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhateverController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">whatever_method</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$faker</span> = <span class="title class_">Faker\Factory</span>::<span class="title function_ invoke__">create</span>();</span><br><span class="line">        <span class="variable">$address</span> = <span class="variable">$faker</span>-&gt;streetAddress;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可以定时执行的事情"><a href="#可以定时执行的事情" class="headerlink" title="可以定时执行的事情"></a>可以定时执行的事情</h3><p>你可以让一些事情以每小时、每天，或是其他时间模式执行。</p><p>你可以安排 <code>artisan</code> 命令、作业类、可调用类、回调函数、甚至是 <code>shell</code> 脚本去定时执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Jobs</span>\<span class="title">Heartbeat</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$schedule</span>-&gt;<span class="title function_ invoke__">job</span>(<span class="keyword">new</span> <span class="title class_">Heartbeat</span>)-&gt;<span class="title function_ invoke__">everyFiveMinutes</span>();</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$schedule</span>-&gt;<span class="title function_ invoke__">exec</span>(<span class="string">&#x27;node /home/forge/script.js&#x27;</span>)-&gt;<span class="title function_ invoke__">daily</span>();</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Console</span>\<span class="title">Commands</span>\<span class="title">SendEmailsCommand</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$schedule</span>-&gt;<span class="title function_ invoke__">command</span>(<span class="string">&#x27;emails:send Taylor --force&#x27;</span>)-&gt;<span class="title function_ invoke__">daily</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$schedule</span>-&gt;<span class="title function_ invoke__">command</span>(<span class="title class_">SendEmailsCommand</span>::<span class="variable language_">class</span>, [<span class="string">&#x27;Taylor&#x27;</span>, <span class="string">&#x27;--force&#x27;</span>])-&gt;<span class="title function_ invoke__">daily</span>();</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">schedule</span>(<span class="params">Schedule <span class="variable">$schedule</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$schedule</span>-&gt;<span class="title function_ invoke__">call</span>(function () &#123;</span><br><span class="line">        DB::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;recent_users&#x27;</span>)-&gt;<span class="title function_ invoke__">delete</span>();</span><br><span class="line">    &#125;)-&gt;<span class="title function_ invoke__">daily</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="检索Laravel文档"><a href="#检索Laravel文档" class="headerlink" title="检索Laravel文档"></a>检索Laravel文档</h3><p>如果你想使用一些关键词来检索 <code>Laravel</code> 文档，默认情况下只会给出 5 个结果。或许还能给出更多结果。</p><p>如果你想要看全部的结果，你可以前往 <code>Laravel</code> 文档 的<code> Github</code> <a href="https://github.com/laravel/docs">仓库</a> 直接搜索。</p><h3 id="过滤route-list"><a href="#过滤route-list" class="headerlink" title="过滤route-list"></a>过滤route-list</h3><p>Laravel 8.34 新增： <code>php artisan route:list</code> 获得了新的参数 <code>--except-path</code>，你可以把一些你不想看见的路由过滤掉。</p><p> <a href="https://github.com/laravel/framework/pull/36619">原始PR</a></p><h3 id="自定义Blade指令"><a href="#自定义Blade指令" class="headerlink" title="自定义Blade指令"></a>自定义Blade指令</h3><p>如果你在不同的 <code>Blade</code> 文件中格式化数据，可以尝试创建自己的 <code>Blade</code> 指令。<br>下面这一段是来自 <code>Laravel Cashier</code> 包的例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;require&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;laravel/cashier&quot;</span>: <span class="string">&quot;^12.9&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title class_">Blade</span>::<span class="title function_ invoke__">directive</span>(<span class="string">&#x27;money&#x27;</span>, function (<span class="variable">$expression</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;?php echo Laravel\Cashier\Cashier::formatAmount(<span class="subst">$expression</span>, config(&#x27;cashier.currency&#x27;)); ?&gt;&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;Price: @<span class="title function_ invoke__">money</span>(<span class="variable">$book</span>-&gt;price)&lt;/div&gt;</span><br><span class="line">@<span class="keyword">if</span>(<span class="variable">$book</span>-&gt;discount_price)</span><br><span class="line">    &lt;div&gt;Discounted price: @<span class="title function_ invoke__">money</span>(<span class="variable">$book</span>-&gt;dicount_price)&lt;/div&gt;</span><br><span class="line">@<span class="keyword">endif</span></span><br></pre></td></tr></table></figure><h3 id="Artisan命令帮助"><a href="#Artisan命令帮助" class="headerlink" title="Artisan命令帮助"></a>Artisan命令帮助</h3><p>如果您不确定某些 Artisan 命令的参数，或者您想知道可用的参数，只需键入 <code>php artisan help [command]</code>。</p><h3 id="当运行测试时禁用懒加载"><a href="#当运行测试时禁用懒加载" class="headerlink" title="当运行测试时禁用懒加载"></a>当运行测试时禁用懒加载</h3><p>当运行测试时如果你想排除掉懒加载 你可以禁用掉懒加载</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Model</span>::<span class="title function_ invoke__">preventLazyLoading</span>(!<span class="variable">$this</span>-&gt;app-&gt;<span class="title function_ invoke__">isProduction</span>() &amp;&amp; !<span class="variable">$this</span>-&gt;app-&gt;<span class="title function_ invoke__">runningUnitTests</span>());</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/djgeisi/status/1435538167290073090">@djgeisi</a>提供</p><h3 id="使用两个很好用的辅助函数会带来魔法效果"><a href="#使用两个很好用的辅助函数会带来魔法效果" class="headerlink" title="使用两个很好用的辅助函数会带来魔法效果"></a>使用两个很好用的辅助函数会带来魔法效果</h3><p>在这个例子中 服务将会被调用并重试。如果仍然失败 将会被报告。但是请求不会失败。(rescue)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">rescue</span>(function () &#123;</span><br><span class="line">    <span class="title function_ invoke__">retry</span>(<span class="number">5</span>, function () &#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;service-&gt;<span class="title function_ invoke__">callSomething</span>();</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/JuanDMeGon/status/1435466660467683328">@JuanDMeGon</a>提供</p><h3 id="请求参数的默认值"><a href="#请求参数的默认值" class="headerlink" title="请求参数的默认值"></a>请求参数的默认值</h3><p>以下是我们检测我们使用的<code>per_page</code>值是否存在 否则我们用默认值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Isteand of this</span></span><br><span class="line"><span class="variable">$perPage</span> = <span class="title function_ invoke__">request</span>()-&gt;per_page ? <span class="title function_ invoke__">request</span>()-&gt;per_page : <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can do this</span></span><br><span class="line"><span class="variable">$perPage</span> = <span class="title function_ invoke__">request</span>(<span class="string">&#x27;per_page&#x27;</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/devThaer/status/1437521022631165957">@devThaer</a>提供</p><h3 id="在路由中直接传入中间件而不是注册它"><a href="#在路由中直接传入中间件而不是注册它" class="headerlink" title="在路由中直接传入中间件而不是注册它"></a>在路由中直接传入中间件而不是注册它</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;posts&#x27;</span>, <span class="title class_">PostController</span>::<span class="variable language_">class</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">middleware</span>([<span class="string">&#x27;auth&#x27;</span>, <span class="title class_">CustomMiddleware</span>::<span class="variable language_">class</span>])</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/sky_0xs/status/1438258486815690766">@sky_0xs</a>提供</p><h3 id="将数组转化成css类"><a href="#将数组转化成css类" class="headerlink" title="将数组转化成css类"></a>将数组转化成css类</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Arr</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$array</span> = [<span class="string">&#x27;p-4&#x27;</span>, <span class="string">&#x27;font-bold&#x27;</span> =&gt; <span class="variable">$isActive</span>, <span class="string">&#x27;bg-red&#x27;</span> =&gt; <span class="variable">$hasError</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$isActive</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$hasError</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$classes</span> = <span class="title class_">Arr</span>::<span class="title function_ invoke__">toCssClasses</span>(<span class="variable">$array</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * &#x27;p-4 bg-red&#x27;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/dietsedev/status/1438550428833271808">@dietsedev</a>提供</p><h3 id="Laravel-Cashier中的upcomingInvoice方法"><a href="#Laravel-Cashier中的upcomingInvoice方法" class="headerlink" title="Laravel-Cashier中的upcomingInvoice方法"></a>Laravel-Cashier中的upcomingInvoice方法</h3><p>您可以显示客户将在下一个计费周期支付的金额。<br></p><p>在<code>Laravel Cashier（Stripe）</code>中有一个“upcomingInvoice”方法来获取即将到来的发票详细信息。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/profile/invoices&#x27;</span>, function (Request <span class="variable">$request</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&#x27;/profile/invoices&#x27;</span>, [</span><br><span class="line">        <span class="string">&#x27;upcomingInvoice&#x27;</span> =&gt; <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">user</span>()-&gt;<span class="title function_ invoke__">upcomingInvoice</span>(),</span><br><span class="line">        <span class="string">&#x27;invoices&#x27;</span> =&gt; <span class="variable">$request</span>-<span class="title function_ invoke__">user</span>()-&gt;<span class="title function_ invoke__">invoices</span>(),</span><br><span class="line">    ]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/oliverds_/status/1439997820228890626">@oliverds_</a>提供</p><h3 id="request-exists与has"><a href="#request-exists与has" class="headerlink" title="$request-&gt;exists与has"></a>$request-&gt;exists与has</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://example.com?popular</span></span><br><span class="line"><span class="variable">$request</span>-&gt;<span class="title function_ invoke__">exists</span>(<span class="string">&#x27;popular&#x27;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable">$request</span>-&gt;<span class="title function_ invoke__">has</span>(<span class="string">&#x27;popular&#x27;</span>) <span class="comment">// false </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://example.com?popular=foo</span></span><br><span class="line"><span class="variable">$request</span>-&gt;<span class="title function_ invoke__">exists</span>(<span class="string">&#x27;popular&#x27;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable">$request</span>-&gt;<span class="title function_ invoke__">has</span>(<span class="string">&#x27;popular&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/coderahuljat/status/1442191143244951552">@coderahuljat</a>提供</p><h3 id="返回带变量视图的多种方法"><a href="#返回带变量视图的多种方法" class="headerlink" title="返回带变量视图的多种方法"></a>返回带变量视图的多种方法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// First way -&gt;with()</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&#x27;index&#x27;</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">with</span>(<span class="string">&#x27;projects&#x27;</span>, <span class="variable">$projects</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">with</span>(<span class="string">&#x27;tasks&#x27;</span>, <span class="variable">$tasks</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Second way - as an array</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&#x27;index&#x27;</span>, [</span><br><span class="line">        <span class="string">&#x27;projects&#x27;</span> =&gt; <span class="variable">$projects</span>,</span><br><span class="line">        <span class="string">&#x27;tasks&#x27;</span> =&gt; <span class="variable">$tasks</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Third way - the same as second, but with variable</span></span><br><span class="line"><span class="variable">$data</span> = [</span><br><span class="line">    <span class="string">&#x27;projects&#x27;</span> =&gt; <span class="variable">$projects</span>,</span><br><span class="line">    <span class="string">&#x27;tasks&#x27;</span> =&gt; <span class="variable">$tasks</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&#x27;index&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fourth way - the shortest - compact()</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&#x27;index&#x27;</span>, <span class="title function_ invoke__">compact</span>(<span class="string">&#x27;projects&#x27;</span>, <span class="string">&#x27;tasks&#x27;</span>));</span><br></pre></td></tr></table></figure><h3 id="调度标准shell命令"><a href="#调度标准shell命令" class="headerlink" title="调度标准shell命令"></a>调度标准shell命令</h3><p>我们可以使用<code>scheduled  command</code>调度标准shell命令</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app/Console/Kernel.php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kernel</span> <span class="keyword">extends</span> <span class="title">ConsoleKernel</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">shedule</span>(<span class="params">Schedule <span class="variable">$shedule</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$shedule</span>-&gt;<span class="title function_ invoke__">exec</span>(<span class="string">&#x27;node /home/forge/script.js&#x27;</span>)-&gt;<span class="title function_ invoke__">daily</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由y <a href="https://twitter.com/anwar_nairi/status/1448985254794915845">@anwar_nairi</a>提供</p><h3 id="无需SSL验证的HTTP请求"><a href="#无需SSL验证的HTTP请求" class="headerlink" title="无需SSL验证的HTTP请求"></a>无需SSL验证的HTTP请求</h3><p>有时候你可能会在本地发送一个无需<code>SSL</code>验证的<code>HTTP</code>请求 可以如下这么干:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title class_">Http</span>::<span class="title function_ invoke__">withoutVerifying</span>()-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;https://example.com&#x27;</span>);</span><br></pre></td></tr></table></figure><p>如果想设置一些选项 可以使用 <code>withOptions</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title class_">Http</span>::<span class="title function_ invoke__">withOptions</span>([</span><br><span class="line">    <span class="string">&#x27;verify&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&#x27;allow_redirects&#x27;</span> =&gt; <span class="literal">true</span></span><br><span class="line">])-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;https://example.com&#x27;</span>);</span><br></pre></td></tr></table></figure><p>由 <a href="https://github.com/raditzfarhan">@raditzfarhan</a>提供</p><h3 id="未经验证的HTTP客户端请求"><a href="#未经验证的HTTP客户端请求" class="headerlink" title="未经验证的HTTP客户端请求"></a>未经验证的HTTP客户端请求</h3><p>有时，您可能希望在本地环境中发送HTTP请求而不验证SSL，您可以这样做：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title class_">Http</span>::<span class="title function_ invoke__">withoutVerifying</span>()-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;https://example.com&#x27;</span>);</span><br></pre></td></tr></table></figure><p>如果要设置多个选项，可以使用<code>withOptions</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title class_">Http</span>::<span class="title function_ invoke__">withOptions</span>([</span><br><span class="line">    <span class="string">&#x27;verify&#x27;</span> =&gt; <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&#x27;allow_redirects&#x27;</span> =&gt; <span class="literal">true</span></span><br><span class="line">])-&gt;<span class="title function_ invoke__">post</span>(<span class="string">&#x27;https://example.com&#x27;</span>);</span><br></pre></td></tr></table></figure><p>Tip given by <a href="https://github.com/raditzfarhan">@raditzfarhan</a></p><h3 id="不断言任何内容的测试"><a href="#不断言任何内容的测试" class="headerlink" title="不断言任何内容的测试"></a>不断言任何内容的测试</h3><p>不断言任何内容的测试，只需启动一些可能引发或不引发异常的内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MigrationsTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test_successful_foreign_key_in_migrations</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// We just test if the migrations succeeds or throws an exception</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">expectNotToPerformAssertions</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Str的mask方法"><a href="#Str的mask方法" class="headerlink" title="Str的mask方法"></a>Str的mask方法</h3><p>Laravel 8.69发布了“Str:：mask（）”方法，该方法使用重复字符屏蔽字符串的一部分.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PasswordResetLinkController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendResetLinkResponse</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$userEmail</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">where</span>(<span class="string">&#x27;email&#x27;</span>, <span class="variable">$request</span>-&gt;email)-&gt;<span class="title function_ invoke__">value</span>(<span class="string">&#x27;email&#x27;</span>); <span class="comment">// username@domain.com</span></span><br><span class="line">        </span><br><span class="line">        <span class="variable">$maskedEmail</span> = <span class="title class_">Str</span>::<span class="title function_ invoke__">mask</span>(<span class="variable">$userEmail</span>, <span class="string">&#x27;*&#x27;</span>, <span class="number">4</span>); <span class="comment">// user***************</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// If needed, you provide a negative number as the third argument to the mask method,</span></span><br><span class="line">        <span class="comment">// which will instruct the method to begin masking at the given distance from the end of the string</span></span><br><span class="line">        </span><br><span class="line">        <span class="variable">$maskedEmail</span> = <span class="title class_">Str</span>::<span class="title function_ invoke__">mask</span>(<span class="variable">$userEmail</span>, <span class="string">&#x27;*&#x27;</span>, -<span class="number">16</span>, <span class="number">6</span>); <span class="comment">// use******domain.com</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://twitter.com/Teacoders/status/1457029765634744322">@Teacoders</a></p><h3 id="扩展Laravel类"><a href="#扩展Laravel类" class="headerlink" title="扩展Laravel类"></a>扩展Laravel类</h3><p>在许多内置的<code>Laravel</code>类上有一个名为<code>macro</code>的方法。例如，集合、Str、Arr、请求、缓存、文件等<br></p><p>您可以在这些类上定义自己的方法，如下所示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Str</span>::<span class="title function_ invoke__">macro</span>(<span class="string">&#x27;lowerSnake&#x27;</span>, function (<span class="keyword">string</span> <span class="variable">$str</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Str</span>::<span class="title function_ invoke__">lower</span>(<span class="title class_">Str</span>::<span class="title function_ invoke__">snake</span>(<span class="variable">$str</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Will return: &quot;my-string&quot;</span></span><br><span class="line"><span class="title class_">Str</span>::<span class="title function_ invoke__">lowerSnake</span>(<span class="string">&#x27;MyString&#x27;</span>);</span><br></pre></td></tr></table></figure><p>Tip given by <a href="https://twitter.com/mmartin_joo/status/1457635252466298885">@mmartin_joo</a></p><h3 id="Can特性"><a href="#Can特性" class="headerlink" title="Can特性"></a>Can特性</h3><p>Laravel <code>v8.70</code>中, 你可以链式调用<code>can()</code> 方法替代 <code>middleware(&#39;can:..&#39;)</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// instead of</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;users/&#123;user&#125;/edit&#x27;</span>, function (User <span class="variable">$user</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)-&gt;<span class="title function_ invoke__">middleware</span>(<span class="string">&#x27;can:edit,user&#x27;</span>);</span><br><span class="line"><span class="comment">// you can do this</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;users/&#123;user&#125;/edit&#x27;</span>, function (User <span class="variable">$user</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)-&gt;<span class="title function_ invoke__">can</span>(<span class="string">&#x27;edit&#x27;</span> <span class="string">&#x27;user&#x27;</span>);</span><br><span class="line"><span class="comment">// PS: you must write UserPolicy to be able to do this in both cases</span></span><br></pre></td></tr></table></figure><p><a href="https://twitter.com/sky_0xs/status/1458179766192853001">@sky_0xs</a></p><h3 id="临时下载url"><a href="#临时下载url" class="headerlink" title="临时下载url"></a>临时下载url</h3><p>您可以使用云存储资源的临时下载URL来防止不必要的访问。例如，当一个用户想要下载一个文件时，我们重定向到一个s3资源，但是URL在5秒内过期。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">download</span>(<span class="params">File <span class="variable">$file</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Initiate file download by redirecting to a temporary s3 URL that expires in 5 seconds</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">redirect</span>()-&gt;<span class="title function_ invoke__">to</span>(</span><br><span class="line">        <span class="title class_">Storage</span>::<span class="title function_ invoke__">disk</span>(<span class="string">&#x27;s3&#x27;</span>)-&gt;<span class="title function_ invoke__">temporaryUrl</span>(<span class="variable">$file</span>-&gt;name, <span class="title function_ invoke__">now</span>()-&gt;<span class="title function_ invoke__">addSeconds</span>(<span class="number">5</span>))</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://twitter.com/Philo01/status/1458791323889197064">@Philo01</a></p><h3 id="处理深度嵌套数组"><a href="#处理深度嵌套数组" class="headerlink" title="处理深度嵌套数组"></a>处理深度嵌套数组</h3><p>处理深度嵌套数组可能会导致缺少键&#x2F;值异常。幸运的是，Laravel的data_get（）助手使这一点很容易避免。它还支持深度嵌套的对象<br></p><p>深度嵌套的数组可能缺少所需的属性，这是一场噩梦<br></p><p>在下面的示例中，如果缺少’request’，’user’或’name’，则会出现错误。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$value</span> = <span class="variable">$payload</span>[<span class="string">&#x27;request&#x27;</span>][<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]</span><br></pre></td></tr></table></figure><p>Instead, use the <code>data_get()</code> helper to access a deeply-nested array item using dot notation.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$value</span> = <span class="title function_ invoke__">data_get</span>(<span class="variable">$payload</span>, <span class="string">&#x27;request.user.name&#x27;</span>);</span><br></pre></td></tr></table></figure><p>We can also avoid any errors caused by missing properties by supplying a default value.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$value</span> = <span class="title function_ invoke__">data_get</span>(<span class="variable">$payload</span>, <span class="string">&#x27;request.user.name&#x27;</span>, <span class="string">&#x27;John&#x27;</span>);</span><br></pre></td></tr></table></figure><p><a href="https://twitter.com/mattkingshott/status/1460970984568094722">@mattkingshott</a></p><h3 id="自定义异常的呈现方式"><a href="#自定义异常的呈现方式" class="headerlink" title="自定义异常的呈现方式"></a>自定义异常的呈现方式</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">expectsJson</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">response</span>()-&gt;<span class="title function_ invoke__">json</span>([</span><br><span class="line">                <span class="string">&#x27;meta&#x27;</span> =&gt; [</span><br><span class="line">                    <span class="string">&#x27;valid&#x27;</span>   =&gt; <span class="literal">false</span>,</span><br><span class="line">                    <span class="string">&#x27;status&#x27;</span>  =&gt; <span class="built_in">static</span>::<span class="variable constant_">ID</span>,</span><br><span class="line">                    <span class="string">&#x27;message&#x27;</span> =&gt; <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getMessage</span>(),</span><br><span class="line">                ],</span><br><span class="line">            ], <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getCode</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">response</span>()-&gt;<span class="title function_ invoke__">view</span>(<span class="string">&#x27;errors.&#x27;</span> . <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getCode</span>(), [<span class="string">&#x27;exception&#x27;</span> =&gt; <span class="variable">$this</span>], <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">getCode</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LicenseExpiredException</span> <span class="keyword">extends</span> <span class="title">BaseException</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="variable constant_">ID</span> = <span class="string">&#x27;EXPIRED&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$code</span> = <span class="number">401</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$message</span> = <span class="string">&#x27;Given license has expired.&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://twitter.com/Philo01/status/1461331239240192003/">@Philo01</a></p><h3 id="tap助手函数"><a href="#tap助手函数" class="headerlink" title="tap助手函数"></a>tap助手函数</h3><p><code>tap</code>助手是在对对象调用方法后删除单独的<code>return</code>语句的好方法。使事物变得美好和干净.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// without tap</span></span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">update</span>([<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;John Doe&#x27;</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$user</span>;</span><br><span class="line"><span class="comment">// with tap()</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">tap</span>(<span class="variable">$user</span>)-&gt;<span class="title function_ invoke__">update</span>([<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;John Doe&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>Tip given by <a href="https://twitter.com/mattkingshott/status/1462058149314183171">@mattkingshott</a></p><h3 id="重置所有剩余的时间单位"><a href="#重置所有剩余的时间单位" class="headerlink" title="重置所有剩余的时间单位"></a>重置所有剩余的时间单位</h3><p>您可以在<code>DateTime::createFromFormat</code>方法中插入感叹号以重置所有剩余的时间单位</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2021-10-12 21:48:07.0</span></span><br><span class="line"><span class="title class_">DateTime</span>::<span class="title function_ invoke__">createFromFormat</span>(<span class="string">&#x27;Y-m-d&#x27;</span>, <span class="string">&#x27;2021-10-12&#x27;</span>);</span><br><span class="line"><span class="comment">// 2021-10-12 00:00:00.0</span></span><br><span class="line"><span class="title class_">DateTime</span>::<span class="title function_ invoke__">createFromFormat</span>(<span class="string">&#x27;!Y-m-d&#x27;</span>, <span class="string">&#x27;2021-10-12&#x27;</span>);</span><br><span class="line"><span class="number">2021</span>-<span class="number">10</span>-<span class="number">12</span> <span class="number">21</span>:<span class="number">00</span>:<span class="number">00.0</span></span><br><span class="line"><span class="title class_">DateTime</span>::<span class="title function_ invoke__">createFromFormat</span>(<span class="string">&#x27;!Y-m-d H&#x27;</span>, <span class="string">&#x27;2021-10-12&#x27;</span>);</span><br></pre></td></tr></table></figure><p>Tip given by <a href="https://twitter.com/SteveTheBauman/status/1448045021006082054">@SteveTheBauman</a></p><h3 id="控制台内核中的计划命令问题可以自动通过电子邮件发送其输出"><a href="#控制台内核中的计划命令问题可以自动通过电子邮件发送其输出" class="headerlink" title="控制台内核中的计划命令问题可以自动通过电子邮件发送其输出"></a>控制台内核中的计划命令问题可以自动通过电子邮件发送其输出</h3><p>您知道吗，如果出现问题，您在控制台内核中调度的任何命令都可以自动通过电子邮件发送其输出</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$schedule</span></span><br><span class="line">    -&gt;<span class="title function_ invoke__">command</span>(<span class="title class_">PruneOrganizationsCOmmand</span>::<span class="variable language_">class</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">hourly</span>()</span><br><span class="line">    -&gt;<span class="title function_ invoke__">emailOutputOnFailure</span>(<span class="title function_ invoke__">config</span>(<span class="string">&#x27;mail.support&#x27;</span>));</span><br></pre></td></tr></table></figure><p> <a href="https://twitter.com/mattkingshott/status/1463160409905455104">@mattkingshott</a></p><h3 id="使用GET参数构造自定义筛选查询时要小心"><a href="#使用GET参数构造自定义筛选查询时要小心" class="headerlink" title="使用GET参数构造自定义筛选查询时要小心"></a>使用GET参数构造自定义筛选查询时要小心</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">has</span>(<span class="string">&#x27;since&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// example.org/?since=</span></span><br><span class="line">    <span class="comment">// fails with illegal operator and value combination</span></span><br><span class="line">    <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">whereDate</span>(<span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;&lt;=&#x27;</span>, <span class="title function_ invoke__">request</span>(<span class="string">&#x27;since&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">input</span>(<span class="string">&#x27;name&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// example.org/?name=0</span></span><br><span class="line">    <span class="comment">// fails to apply query filter because evaluates to false</span></span><br><span class="line">    <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;name&#x27;</span>, <span class="title function_ invoke__">request</span>(<span class="string">&#x27;name&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">filled</span>(<span class="string">&#x27;key&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// correct way to check if get parameter has value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://twitter.com/mc0de/status/1465209203472146434">@mc0de</a></p><h3 id="清理你臃肿的路由文件"><a href="#清理你臃肿的路由文件" class="headerlink" title="清理你臃肿的路由文件"></a>清理你臃肿的路由文件</h3><p>清掉臃肿的路由文件，并将其拆分以保持组织有序</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouteServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">routes</span>(function () &#123;</span><br><span class="line">            <span class="title class_">Route</span>::<span class="title function_ invoke__">prefix</span>(<span class="string">&#x27;api/v1&#x27;</span>)</span><br><span class="line">                -&gt;<span class="title function_ invoke__">middleware</span>(<span class="string">&#x27;api&#x27;</span>)</span><br><span class="line">                -&gt;<span class="title function_ invoke__">namespace</span>(<span class="variable">$this</span>-&gt;namespace)</span><br><span class="line">                -&gt;<span class="title function_ invoke__">group</span>(<span class="title function_ invoke__">base_path</span>(<span class="string">&#x27;routes/api.php&#x27;</span>));</span><br><span class="line">                </span><br><span class="line">            <span class="title class_">Route</span>::<span class="title function_ invoke__">prefix</span>(<span class="string">&#x27;webhooks&#x27;</span>)</span><br><span class="line">                -&gt;<span class="title function_ invoke__">namespace</span>(<span class="variable">$this</span>-&gt;namespace)</span><br><span class="line">                -&gt;<span class="title function_ invoke__">group</span>(<span class="title function_ invoke__">base_path</span>(<span class="string">&#x27;routes/webhooks.php&#x27;</span>));</span><br><span class="line">    </span><br><span class="line">            <span class="title class_">Route</span>::<span class="title function_ invoke__">middleware</span>(<span class="string">&#x27;web&#x27;</span>)</span><br><span class="line">                -&gt;<span class="title function_ invoke__">namespace</span>(<span class="variable">$this</span>-&gt;namespace)</span><br><span class="line">                -&gt;<span class="title function_ invoke__">group</span>(<span class="title function_ invoke__">base_path</span>(<span class="string">&#x27;routes/web.php&#x27;</span>));</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;app-&gt;<span class="title function_ invoke__">environment</span>(<span class="string">&#x27;local&#x27;</span>)) &#123;</span><br><span class="line">                <span class="title class_">Route</span>::<span class="title function_ invoke__">middleware</span>(<span class="string">&#x27;web&#x27;</span>)</span><br><span class="line">                    -&gt;<span class="title function_ invoke__">namespace</span>(<span class="variable">$this</span>-&gt;namespace)</span><br><span class="line">                    -&gt;<span class="title function_ invoke__">group</span>(<span class="title function_ invoke__">base_path</span>(<span class="string">&#x27;routes/local.php&#x27;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://twitter.com/Philo01/status/1466068376330153984">@Philo01</a></p><h3 id="自定义邮件日志存储位置"><a href="#自定义邮件日志存储位置" class="headerlink" title="自定义邮件日志存储位置"></a>自定义邮件日志存储位置</h3><p>你可以自定义日志存储位置.</p><p>通过设置环境变量如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MAIL_MAILER=log</span><br><span class="line">MAIL_LOG_CHANNEL=mail</span><br></pre></td></tr></table></figure><p>也可以设置日志渠道</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;mail&#x27;</span> =&gt; [</span><br><span class="line">    <span class="string">&#x27;driver&#x27;</span> =&gt; <span class="string">&#x27;single&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;path&#x27;</span> =&gt; <span class="title function_ invoke__">storage_path</span>(<span class="string">&#x27;logs/mails.log&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27;level&#x27;</span> =&gt; <span class="title function_ invoke__">env</span>(<span class="string">&#x27;LOG_LEVEL&#x27;</span>, <span class="string">&#x27;debug&#x27;</span>),</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p><a href="https://twitter.com/mmartin_joo/status/1466362508571131904">@mmartin_joo</a></p><h3 id="markdown简单创建"><a href="#markdown简单创建" class="headerlink" title="markdown简单创建"></a>markdown简单创建</h3><p>Laravel提供了一个接口来转换HTML中的即时标记，而无需安装新的composer软件包。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$html</span> = <span class="title class_">Str</span>::<span class="title function_ invoke__">markdown</span>(<span class="string">&#x27;# Changelogfy&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Output:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;Changelogfy&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p><a href="https://twitter.com/paulocastellano/status/1467478502400315394">@paulocastellano</a></p><h3 id="给中间件传参数"><a href="#给中间件传参数" class="headerlink" title="给中间件传参数"></a>给中间件传参数</h3><p>您可以通过在值后面附加“:”向中间件传递特定路由的参数。例如，我使用一个中间件基于路由实施不同的身份验证方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;...&#x27;</span>)-&gt;<span class="title function_ invoke__">middleware</span>(<span class="string">&#x27;auth.license&#x27;</span>);</span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;...&#x27;</span>)-&gt;<span class="title function_ invoke__">middleware</span>(<span class="string">&#x27;auth.license:bearer&#x27;</span>);</span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;...&#x27;</span>)-&gt;<span class="title function_ invoke__">middleware</span>(<span class="string">&#x27;auth.license:basic&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VerifyLicense</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span>  <span class="title">handle</span>(<span class="params">Request <span class="variable">$request</span>, <span class="built_in">Closure</span> <span class="variable">$next</span>, <span class="variable">$type</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$licenseKey</span>  = <span class="keyword">match</span> (<span class="variable">$type</span>) &#123;</span><br><span class="line">            <span class="string">&#x27;basic&#x27;</span>  =&gt; <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">getPassword</span>(),</span><br><span class="line">            <span class="string">&#x27;bearer&#x27;</span> =&gt; <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">bearerToken</span>(),</span><br><span class="line">            <span class="keyword">default</span>  =&gt; <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Verify license and return response based on the authentication type</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <a href="https://twitter.com/Philo01/status/1471864630486179840">@Philo01</a></p><h3 id="获取并删除session"><a href="#获取并删除session" class="headerlink" title="获取并删除session"></a>获取并删除session</h3><p>如果您需要从Laravel会话中获取一些东西，并立即忘记它，考虑使用<code>Session()-&gt;pull(value)</code>。它为您完成了这两个步骤。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Before</span></span><br><span class="line"><span class="variable">$path</span> = <span class="title function_ invoke__">session</span>()-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;before-github-redirect&#x27;</span>, <span class="string">&#x27;/components&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session</span>()-&gt;<span class="title function_ invoke__">forget</span>(<span class="string">&#x27;before-github-redirect&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">redirect</span>(<span class="variable">$path</span>);</span><br><span class="line"><span class="comment">// After</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">redirect</span>(<span class="title function_ invoke__">session</span>()-&gt;<span class="title function_ invoke__">pull</span>(<span class="string">&#x27;before-github-redirect&#x27;</span>, <span class="string">&#x27;/components&#x27;</span>))</span><br></pre></td></tr></table></figure><p> <a href="https://twitter.com/jasonlbeggs/status/1471905631619715077">@jasonlbeggs</a>提供</p><h3 id="request的date方法"><a href="#request的date方法" class="headerlink" title="request的date方法"></a>request的date方法</h3><p>Laravel v8.77: <code>$request-&gt;date()</code> 方法</p><p>现在您不需要手动调用Carbon，您可以执行以下操作：<code>$post-&gt;publish_at=$request-&gt;date（&#39;publish_at&#39;）-&gt;&gt;addHour()-&gt;startOfHour()</code><br><a href="https://github.com/laravel/framework/pull/39945">Link to full pr</a> by <a href="https://twitter.com/DarkGhostHunter">@DarkGhostHunter</a></p><h3 id="使用分页时请使用through而不是map"><a href="#使用分页时请使用through而不是map" class="headerlink" title="使用分页时请使用through而不是map"></a>使用分页时请使用through而不是map</h3><p>当您想要映射分页数据并只返回字段的子集时，请使用<code>through</code>而不是<code>map</code>。<code>map</code>会打断分页对象并更改其标识。而，<code>through</code>作用于分页数据本身</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Don&#x27;t: Mapping paginated data</span></span><br><span class="line"><span class="variable">$employees</span> = <span class="title class_">Employee</span>::<span class="title function_ invoke__">paginate</span>(<span class="number">10</span>)-&gt;<span class="title function_ invoke__">map</span>(fn (<span class="variable">$employee</span>) =&gt; [</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span> =&gt; <span class="variable">$employee</span>-&gt;id,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="variable">$employee</span>-&gt;name</span><br><span class="line">])</span><br><span class="line"><span class="comment">// Do: Mapping paginated data</span></span><br><span class="line"><span class="variable">$employees</span> = <span class="title class_">Employee</span>::<span class="title function_ invoke__">paginate</span>(<span class="number">10</span>)-&gt;<span class="title function_ invoke__">through</span>(fn (<span class="variable">$employee</span>) =&gt; [</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span> =&gt; <span class="variable">$employee</span>-&gt;id,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="variable">$employee</span>-&gt;name</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p> <a href="https://twitter.com/bhaidar/status/1475073910383120399">@bhaidar</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="laravel" scheme="http://example.com/categories/laravel/"/>
    
    
    <category term="laravel" scheme="http://example.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>view</title>
    <link href="http://example.com/2024/03/07/laravel/Views/"/>
    <id>http://example.com/2024/03/07/laravel/Views/</id>
    <published>2024-03-07T09:34:16.875Z</published>
    <updated>2024-03-07T09:40:18.927Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>⬆️ <a href="../README-zh.md">回到顶部</a> ⬅️ <a href="./Migrations.md">上一个 (数据库迁移)</a> ➡️ <a href="./Routing.md">下一个 (路由)</a></p><ol><li><a href="#foreach-%E8%AF%AD%E5%8F%A5%E4%B8%AD%E7%9A%84-$loop-%E5%8F%98%E9%87%8F">foreach 语句中的 $loop 变量</a></li><li><a href="#%E8%A7%86%E5%9B%BE%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8">视图是否存在</a></li><li><a href="#%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81%E8%A7%86%E5%9B%BE%E9%A1%B5%E9%9D%A2">错误代码视图页面</a></li><li><a href="#%E8%84%B1%E7%A6%BB%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E8%A7%86%E5%9B%BE">脱离控制器的视图</a></li><li><a href="#Blade-@auth-%E6%8C%87%E4%BB%A4">Blade @auth 指令</a></li><li><a href="#Blade-%E8%A7%86%E5%9B%BE%E4%B8%AD%E7%9A%84%E4%BA%8C%E7%BA%A7-$loop-%E5%8F%98%E9%87%8F">Blade 视图中的二级 $loop 变量</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84-Blade-%E6%8C%87%E4%BB%A4">创建你自己的 Blade 指令</a></li><li><a href="#%E8%A7%86%E5%9B%BE%E6%8C%87%E4%BB%A4IncludeIf-IncludeWhen-IncludeFirst">视图指令IncludeIf IncludeWhen IncludeFirst</a></li><li><a href="#%E4%BD%BF%E7%94%A8Laravel-Blade-X-%E5%8F%98%E9%87%8F%E7%BB%91%E5%AE%9A%E8%8A%82%E7%9C%81%E6%9B%B4%E5%A4%9A%E7%A9%BA%E9%97%B4">使用Laravel Blade-X 变量绑定节省更多空间</a></li><li><a href="#Blade-%E7%BB%84%E4%BB%B6%E5%B1%9E%E6%80%A7">Blade 组件属性</a></li><li><a href="#Blade%E7%B1%BB%E5%9E%8B%E6%8F%90%E7%A4%BA">Blade类型提示</a></li><li><a href="#%E7%BB%84%E4%BB%B6%E8%AF%AD%E6%B3%95%E6%8F%90%E7%A4%BA">组件语法提示</a></li><li><a href="#%E8%87%AA%E5%8A%A8%E9%AB%98%E4%BA%AE%E5%AF%BC%E8%88%AA%E9%93%BE%E6%8E%A5">自动高亮导航链接</a></li><li><a href="#%E7%AE%80%E5%8C%96%E5%BE%AA%E7%8E%AF">简化循环</a></li><li><a href="#%E6%95%B4%E7%90%86blade%E8%A7%86%E5%9B%BE%E7%9A%84%E7%AE%80%E5%8D%95%E6%96%B9%E6%B3%95">整理blade视图的简单方法</a></li></ol><h3 id="foreach-语句中的-loop-变量"><a href="#foreach-语句中的-loop-变量" class="headerlink" title="foreach 语句中的 $loop 变量"></a>foreach 语句中的 $loop 变量</h3><p>在 <code>foreach</code> 循环中，使用 <code>$loop</code> 变量来查看当前是否是第一次 &#x2F; 最后一次循环。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@foreach ($users as $user)</span><br><span class="line">     @if ($loop-&gt;first)</span><br><span class="line">        This is the first iteration.</span><br><span class="line">     @endif</span><br><span class="line"></span><br><span class="line">     @if ($loop-&gt;last)</span><br><span class="line">        This is the last iteration.</span><br><span class="line">     @endif</span><br><span class="line"></span><br><span class="line">     &lt;p&gt;This is user &#123;&#123; $user-&gt;id &#125;&#125;&lt;/p&gt;</span><br><span class="line">@endforeach</span><br></pre></td></tr></table></figure><p>同样也有诸如 <code>$loop-&gt;iteration</code> 或 <code>$loop-&gt;count</code> 等属性。可以在 <a href="https://laravel.com/docs/master/blade#the-loop-variable">官方文档</a>中查看更多相关内容。</p><h3 id="视图是否存在"><a href="#视图是否存在" class="headerlink" title="视图是否存在"></a>视图是否存在</h3><p>你可以在视图实际加载之前确认该视图文件是否存在。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">view</span>()-&gt;<span class="title function_ invoke__">exists</span>(<span class="string">&#x27;custom.page&#x27;</span>)) &#123;</span><br><span class="line"> <span class="comment">// Load the view</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你甚至可以使用一个数组来加载视图，这样只有第一个视图文件确实存在的视图会被加载。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">view</span>()-&gt;<span class="title function_ invoke__">first</span>([<span class="string">&#x27;custom.dashboard&#x27;</span>, <span class="string">&#x27;dashboard&#x27;</span>], <span class="variable">$data</span>);</span><br></pre></td></tr></table></figure><h3 id="错误代码视图页面"><a href="#错误代码视图页面" class="headerlink" title="错误代码视图页面"></a>错误代码视图页面</h3><p>如果你想为一些特殊的 HTTP 返回码建立特定的错误页面，比如 <code>500</code> —— 只需要使用该码值创建视图文件，比如  <code>resources/views/errors/500.blade.php</code> ，或者是 <code>403.blade.php</code> 等等，这些视图会在对应的错误码出现时自动被加载。</p><h3 id="脱离控制器的视图"><a href="#脱离控制器的视图" class="headerlink" title="脱离控制器的视图"></a>脱离控制器的视图</h3><p>如果你想让一个路由仅仅显示某个视图，不需要创建控制器，只需要使用 Route::view() 方法即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Instead of this</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;about&#x27;</span>, <span class="string">&#x27;TextsController@about&#x27;</span>);</span><br><span class="line"><span class="comment">// And this</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextsController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">about</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&#x27;texts.about&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Do this</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">view</span>(<span class="string">&#x27;about&#x27;</span>, <span class="string">&#x27;texts.about&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="Blade-auth-指令"><a href="#Blade-auth-指令" class="headerlink" title="Blade @auth 指令"></a>Blade @auth 指令</h3><p>不需要使用 if 来检查用户是否登录，使用 @auth 指令即可。</p><p>比较典型的方式是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@if(auth()-&gt;user())</span><br><span class="line">    // The user is authenticated.</span><br><span class="line">@endif</span><br></pre></td></tr></table></figure><p>更短的用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@auth</span><br><span class="line">    // The user is authenticated.</span><br><span class="line">@endauth</span><br></pre></td></tr></table></figure><p>与 @auth 相对的是 @guest 指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@guest</span><br><span class="line">    // The user is not authenticated.</span><br><span class="line">@endguest</span><br></pre></td></tr></table></figure><h3 id="Blade-视图中的二级-loop-变量"><a href="#Blade-视图中的二级-loop-变量" class="headerlink" title="Blade 视图中的二级 $loop 变量"></a>Blade 视图中的二级 $loop 变量</h3><p>你甚至可以在 <code>Blade</code> 视图的二级 <code>foreach</code> 循环中使用 <code>$loop</code> 变量来表示外层的循环变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@foreach ($users as $user)</span><br><span class="line">    @foreach ($user-&gt;posts as $post)</span><br><span class="line">        @if ($loop-&gt;parent-&gt;first)</span><br><span class="line">            This is first iteration of the parent loop.</span><br><span class="line">        @endif</span><br><span class="line">    @endforeach</span><br><span class="line">@endforeach</span><br></pre></td></tr></table></figure><h3 id="创建你自己的-Blade-指令"><a href="#创建你自己的-Blade-指令" class="headerlink" title="创建你自己的 Blade 指令"></a>创建你自己的 Blade 指令</h3><p>你只需要在 <code>app/Providers/AppServiceProvider.php</code> 中添加你自己的方法。举个例子，如果你需要将 <code>&lt;br&gt;</code> 标签替换为换行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea&gt;@br2nl($post-&gt;post_text)&lt;/textarea&gt;</span><br></pre></td></tr></table></figure><p>然后将这个指令添加到 <code>AppServiceProvider</code> 的 <code>boot()</code> 方法中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title class_">Blade</span>::<span class="title function_ invoke__">directive</span>(<span class="string">&#x27;br2nl&#x27;</span>, function (<span class="variable">$string</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&lt;?php echo preg_replace(&#x27;/\&lt;br(\s*)?\/?\&gt;/i&#x27;, \&quot;\n\&quot;, <span class="subst">$string</span>); ?&gt;&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="视图指令IncludeIf-IncludeWhen-IncludeFirst"><a href="#视图指令IncludeIf-IncludeWhen-IncludeFirst" class="headerlink" title="视图指令IncludeIf IncludeWhen IncludeFirst"></a>视图指令IncludeIf IncludeWhen IncludeFirst</h3><p>如果你不确定 Blade 文件是否存在，你可以使用这些条件指令。<br>仅当 Blade 文件存在时载入 header：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@includeIf(&#x27;partials.header&#x27;)</span><br></pre></td></tr></table></figure><p>仅当用户的 role_id &#x3D;&#x3D; 1 的时候载入 header：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@includeWhen(auth()-&gt;user()-&gt;role_id == 1, &#x27;partials.header&#x27;)</span><br></pre></td></tr></table></figure><p>尝试加载 adminlte.header ，如果不存在，则加载 default.header：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@includeFirst(&#x27;adminlte.header&#x27;, &#x27;default.header&#x27;)</span><br></pre></td></tr></table></figure><h3 id="使用Laravel-Blade-X-变量绑定节省更多空间"><a href="#使用Laravel-Blade-X-变量绑定节省更多空间" class="headerlink" title="使用Laravel Blade-X 变量绑定节省更多空间"></a>使用Laravel Blade-X 变量绑定节省更多空间</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Using include, the old way</span></span><br><span class="line">@<span class="keyword">include</span>(<span class="string">&quot;components.post&quot;</span>, [<span class="string">&quot;title&quot;</span> =&gt; <span class="variable">$post</span>-&gt;title])</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using Blade-X</span></span><br><span class="line">&lt;x-post link=<span class="string">&quot;&#123;&#123; <span class="subst">$post</span>-&gt;title &#125;&#125;&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using Blade-X variable binding</span></span><br><span class="line">&lt;x-post :link=<span class="string">&quot;<span class="subst">$post</span>-&gt;title&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/anwar_nairi/status/1442441888787795970">@anwar_nairi</a>提供</p><h3 id="Blade-组件属性"><a href="#Blade-组件属性" class="headerlink" title="Blade 组件属性"></a>Blade 组件属性</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// button.blade.php</span></span><br><span class="line">@<span class="title function_ invoke__">props</span>([<span class="string">&#x27;rounded&#x27;</span> =&gt; <span class="literal">false</span>])</span><br><span class="line"></span><br><span class="line">&lt;button &#123;&#123; <span class="variable">$attributes</span>-&gt;<span class="class"><span class="keyword">class</span>([</span></span><br><span class="line"><span class="class">    &#x27;<span class="title">bg</span>-<span class="title">red</span>-100 <span class="title">text</span>-<span class="title">red</span>-800&#x27;,</span></span><br><span class="line"><span class="class">    &#x27;<span class="title">rounded</span>&#x27; =&gt; $<span class="title">rounded</span></span></span><br><span class="line"><span class="class">    ]) &#125;&#125;&gt;</span></span><br><span class="line"><span class="class">    </span>&#123;&#123; <span class="variable">$slot</span> &#125;&#125;</span><br><span class="line">&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// view.blade.php</span></span><br><span class="line"><span class="comment">// Non-rounded:</span></span><br><span class="line">&lt;x-button&gt;Submit&lt;/x-button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rounded:</span></span><br><span class="line">&lt;x-button rounded&gt;Submit&lt;/x-button&gt;</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/godismyjudge95/status/1448825909167931396">@godismyjudge95</a>提供</p><h3 id="Blade类型提示"><a href="#Blade类型提示" class="headerlink" title="Blade类型提示"></a>Blade类型提示</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@php</span><br><span class="line">    <span class="comment">/* <span class="doctag">@var</span> App\Models\User $user */</span></span><br><span class="line">@endphp</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="comment">// your ide will typehint the property for you </span></span><br><span class="line">    &#123;&#123;<span class="variable">$user</span>-&gt;email&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/freekmurze/status/1455466663927746560">@freekmurze</a>提供</p><h3 id="组件语法提示"><a href="#组件语法提示" class="headerlink" title="组件语法提示"></a>组件语法提示</h3><p>在组件参数之前传入 <code>:</code> 你可以直接传入变量而不需要使用 <code>&#123;&#123;&#125;&#125;</code>表达式</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;x-navbar title=<span class="string">&quot;&#123;&#123; <span class="subst">$title</span> &#125;&#125;&quot;</span>/&gt;</span><br><span class="line"><span class="comment">// you can do instead</span></span><br><span class="line">&lt;x-navbar :title=<span class="string">&quot;<span class="subst">$title</span>&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/sky_0xs/status/1457056634363072520">@sky_0xs</a>提供</p><h3 id="自动高亮导航链接"><a href="#自动高亮导航链接" class="headerlink" title="自动高亮导航链接"></a>自动高亮导航链接</h3><p>当精确的URL匹配或传递路径或路由名称模式时，自动突出显示导航链接</p><p>带有请求和CSS类助手的 <code>blade</code> 组件使显示活动&#x2F;非活动状态变得非常简单。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NavLink</span> <span class="keyword">extends</span> <span class="title">Component</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$href</span>, <span class="variable">$active</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;href = <span class="variable">$href</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;active = <span class="variable">$active</span> ?? <span class="variable">$href</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>): <span class="title">View</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$classes</span> = [<span class="string">&#x27;font-medium&#x27;</span>, <span class="string">&#x27;py-2&#x27;</span>, <span class="string">&#x27;text-primary&#x27;</span> =&gt; <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isActive</span>()];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">view</span>(<span class="string">&#x27;components.nav-link&#x27;</span>, [</span><br><span class="line">            <span class="string">&#x27;class&#x27;</span> =&gt; <span class="title class_">Arr</span>::<span class="title function_ invoke__">toCssClasses</span>(<span class="variable">$classes</span>);</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">isActive</span>(<span class="params"></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_bool</span>(<span class="variable">$this</span>-&gt;active)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;active;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">is</span>(<span class="variable">$this</span>-&gt;active)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">fullUrlIs</span>(<span class="variable">$this</span>-&gt;active)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">routeIs</span>(<span class="variable">$this</span>-&gt;active);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;&#123; $href &#125;&#125;&quot; &#123;&#123; $attributes-&gt;class($class) &#125;&#125;&gt;</span><br><span class="line">    &#123;&#123; $slot &#125;&#125;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;x-nav-link :href=&quot;route(&#x27;projects.index&#x27;)&quot;&gt;Projects&lt;/x-nav-link&gt;</span><br><span class="line">&lt;x-nav-link :href=&quot;route(&#x27;projects.index&#x27;)&quot; active=&quot;projects.*&quot;&gt;Projects&lt;/x-nav-link&gt;</span><br><span class="line">&lt;x-nav-link :href=&quot;route(&#x27;projects.index&#x27;)&quot; active=&quot;projects/*&quot;&gt;Projects&lt;/x-nav-link&gt;</span><br><span class="line">&lt;x-nav-link :href=&quot;route(&#x27;projects.index&#x27;)&quot; :active=&quot;$tab = &#x27;projects&#x27;&quot;&gt;Projects&lt;/x-nav-link&gt;</span><br></pre></td></tr></table></figure><p><a href="https://twitter.com/mpskovvang/status/1459646197635944455">@mpskovvang</a>提供</p><h3 id="简化循环"><a href="#简化循环" class="headerlink" title="简化循环"></a>简化循环</h3><p>你知道Blade<code>@each</code>指令可以帮助清理模板中的循环吗？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// good</span><br><span class="line">@foreach($item in $items)</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;p&gt;Name: &#123;&#123; $item-&gt;name &#125;&#125;</span><br><span class="line">        &lt;p&gt;Price: &#123;&#123; $item-&gt;price &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">@endforeach</span><br><span class="line">// better (HTML extracted into partial)</span><br><span class="line">@each(&#x27;partials.item&#x27;, $items, &#x27;item&#x27;)</span><br></pre></td></tr></table></figure><p><a href="https://twitter.com/kirschbaum_dev/status/1463205294914297861">@kirschbaum_dev</a>提供</p><h3 id="整理blade视图的简单方法"><a href="#整理blade视图的简单方法" class="headerlink" title="整理blade视图的简单方法"></a>整理blade视图的简单方法</h3><p>整理刀片视图的简单方法<br></p><p>使用<code>forelse·，而不是嵌套在</code>if<code>语句中的</code>foreach&#96;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- if/loop combination --&gt;</span><br><span class="line">@if ($orders-&gt;count())</span><br><span class="line">    @foreach($orders as $order)</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &#123;&#123; $order-&gt;id &#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    @endforeach</span><br><span class="line">@else</span><br><span class="line">    &lt;p&gt;You haven&#x27;t placed any orders yet.&lt;/p&gt;</span><br><span class="line">@endif</span><br><span class="line">&lt;!-- Forelse alternative --&gt;</span><br><span class="line">@forelse($orders as $order)</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;&#123; $order-&gt;id &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">@empty</span><br><span class="line">    &lt;p&gt;You haven&#x27;t placed any orders yet.&lt;/p&gt;</span><br><span class="line">@endforelse</span><br></pre></td></tr></table></figure><p>由 [@alexjgarrett]提供</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="laravel" scheme="http://example.com/categories/laravel/"/>
    
    
    <category term="laravel" scheme="http://example.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>validate</title>
    <link href="http://example.com/2024/03/07/laravel/Validation/"/>
    <id>http://example.com/2024/03/07/laravel/Validation/</id>
    <published>2024-03-07T09:34:16.875Z</published>
    <updated>2024-03-07T09:40:15.662Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>⬆️ <a href="../README-zh.md">回到顶部</a> ⬅️ <a href="./Routing.md">上一个 (路由)</a> ➡️ <a href="./Collections.md">下一个 (集合)</a></p><ol><li><a href="#%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81">图片验证</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%AA%8C%E8%AF%81%E9%94%99%E8%AF%AF%E7%9A%84%E4%BF%A1%E6%81%AF">自定义验证错误的信息</a></li><li><a href="#%E7%94%A8now%E6%88%96yesterday%E6%9D%A5%E9%AA%8C%E8%AF%81%E6%97%A5%E6%9C%9F">用now或yesterday来验证日期</a></li><li><a href="#%E5%85%B7%E6%9C%89%E6%9F%90%E4%BA%9B%E6%9D%A1%E4%BB%B6%E7%9A%84%E9%AA%8C%E8%AF%81%E8%A7%84%E5%88%99">具有某些条件的验证规则</a></li><li><a href="#%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E9%AA%8C%E8%AF%81%E6%B6%88%E6%81%AF">更改默认验证消息</a></li><li><a href="#%E9%A2%84%E9%AA%8C%E8%AF%81">预验证</a></li><li><a href="#%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%AA%8C%E8%AF%81%E9%94%99%E8%AF%AF%E6%97%B6%E5%81%9C%E6%AD%A2">第一次验证错误时停止</a></li><li><a href="#%E4%B8%8D%E4%BD%BF%E7%94%A8validate%E6%88%96%E8%80%85FormRequest%E5%B0%B1%E6%8A%9B%E5%87%BA422">不使用validate或者FormRequest就抛出422</a></li><li><a href="#%E8%A7%84%E5%88%99%E5%8F%96%E5%86%B3%E4%BA%8E%E5%85%B6%E4%BB%96%E6%9D%A1%E4%BB%B6">规则取决于其他条件</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE%E9%A6%96%E6%AC%A1%E9%AA%8C%E8%AF%81%E5%A4%B1%E8%B4%A5%E6%97%B6%E5%81%9C%E6%AD%A2">使用属性设置首次验证失败时停止</a></li><li><a href="#unique%E8%A7%84%E5%88%99%E5%9C%A8%E8%BD%AF%E5%88%A0%E9%99%A4%E5%85%A8%E5%B1%80%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%AD%E6%97%A0%E6%95%88">unique规则在软删除全局作用域中无效</a></li><li><a href="#sometimes%E6%96%B9%E6%B3%95%E5%85%81%E8%AE%B8%E4%BD%A0%E5%AE%9A%E4%B9%89%E9%AA%8C%E8%AF%81%E5%99%A8%E5%9C%A8%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E8%A2%AB%E5%BA%94%E7%94%A8">sometimes方法允许你定义验证器在什么时候被应用</a></li><li><a href="#%E6%8F%90%E4%BA%A4%E8%87%AA%E5%AE%9A%E4%B9%89%E9%AA%8C%E8%AF%81%E8%A7%84%E5%88%99">提交自定义验证规则</a></li><li><a href="#%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E9%AA%8C%E8%AF%81">数组元素验证</a></li><li><a href="#Password%E7%9A%84defaults%E6%96%B9%E6%B3%95">Password的defaults方法</a></li><li><a href="#%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E9%87%8D%E5%AE%9A%E5%90%91%E8%AF%B7%E6%B1%82">表单验证重定向请求</a></li><li><a href="#Mac%E9%AA%8C%E8%AF%81%E8%A7%84%E5%88%99">Mac验证规则</a></li><li><a href="#%E9%AA%8C%E8%AF%81%E9%A1%B6%E7%BA%A7%E5%9F%9F%E5%90%8D%E9%82%AE%E7%AE%B1">验证顶级域名邮箱</a></li></ol><h3 id="图片验证"><a href="#图片验证" class="headerlink" title="图片验证"></a>图片验证</h3><p>在验证上传的图片时，可以指定所需的尺寸</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;photo&#x27;</span> =&gt; <span class="string">&#x27;dimensions:max_width=4096,max_height=4096&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="自定义验证错误的信息"><a href="#自定义验证错误的信息" class="headerlink" title="自定义验证错误的信息"></a>自定义验证错误的信息</h3><p>只需在 <code>resources/lang/xx/validation.php</code> 文件创建适当的数组结构，就可以定义定每个 字段、规则和语言的验证错误消息。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;custom&#x27;</span> =&gt; [</span><br><span class="line">     <span class="string">&#x27;email&#x27;</span> =&gt; [</span><br><span class="line">        <span class="string">&#x27;required&#x27;</span> =&gt; <span class="string">&#x27;We need to know your e-mail address!&#x27;</span>,</span><br><span class="line">     ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="用now或yesterday来验证日期"><a href="#用now或yesterday来验证日期" class="headerlink" title="用now或yesterday来验证日期"></a>用now或yesterday来验证日期</h3><p>您可以使用 <code>before/after</code> 的规则验证日期，并将各种字符串作为参数传递，比如: <code>tomorrow</code>, <code>now</code>, <code>yesterday</code>。例如: <code>&#39;start_date&#39; =&gt; &#39;after:now&#39;</code>。它在底层下使用 <code>strtotime ()</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$rules</span> = [</span><br><span class="line">    <span class="string">&#x27;start_date&#x27;</span> =&gt; <span class="string">&#x27;after:tomorrow&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;end_date&#x27;</span> =&gt; <span class="string">&#x27;after:start_date&#x27;</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="具有某些条件的验证规则"><a href="#具有某些条件的验证规则" class="headerlink" title="具有某些条件的验证规则"></a>具有某些条件的验证规则</h3><p>如果验证规则依赖于某些条件，则可以通过将 <code>withValidator()</code> 添加到 <code>FormRequest</code> 类中来修改规则，并在那里指定自定义逻辑。例如，如果您只想为某些用户角色添加验证规则。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Validation</span>\<span class="title">Validator</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StoreBlogCategoryRequest</span> <span class="keyword">extends</span> <span class="title">FormRequest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">withValidator</span>(<span class="params">Validator <span class="variable">$validator</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">auth</span>()-&gt;<span class="title function_ invoke__">user</span>()-&gt;is_admin) &#123;</span><br><span class="line">            <span class="variable">$validator</span>-&gt;<span class="title function_ invoke__">addRules</span>([<span class="string">&#x27;some_secret_password&#x27;</span> =&gt; <span class="string">&#x27;required&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更改默认验证消息"><a href="#更改默认验证消息" class="headerlink" title="更改默认验证消息"></a>更改默认验证消息</h3><p>如果要更改特定字段和特定验证规则的默认验证错误消息，只需将 <code>messages()</code> 方法添加到<code>FormRequest</code>类中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StoreUserRequest</span> <span class="keyword">extends</span> <span class="title">FormRequest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;required&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">messages</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;name.required&#x27;</span> =&gt; <span class="string">&#x27;User name should be real name&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="预验证"><a href="#预验证" class="headerlink" title="预验证"></a>预验证</h3><p>如果你想在默认的<code>Laravel</code>验证之前修改某个字段，或者，换句话说，“准备” 那个字段， <code>FormRequest </code>类中有一个方法 <code>prepareForValidation () </code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">prepareForValidation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">merge</span>([</span><br><span class="line">        <span class="string">&#x27;slug&#x27;</span> =&gt; <span class="title class_">Illuminate\Support\Str</span>::<span class="title function_ invoke__">slug</span>(<span class="variable">$this</span>-&gt;slug),</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第一次验证错误时停止"><a href="#第一次验证错误时停止" class="headerlink" title="第一次验证错误时停止"></a>第一次验证错误时停止</h3><p>默认情况下，将在列表中返回 Laravel 验证错误，检查所有验证规则。但是如果你想要在第一个错误之后停止这个过程，使用验证规则叫做 bail:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$request</span>-&gt;<span class="title function_ invoke__">validate</span>([</span><br><span class="line">    <span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;bail|required|unique:posts|max:255&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;body&#x27;</span> =&gt; <span class="string">&#x27;required&#x27;</span>,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>如果你需要停止首次错误验证，可以设置<code>FormRequest</code> 类中<code>$stopOnFirstFailure</code>为<code>true</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="variable">$stopOnFirstFailure</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="不使用validate或者FormRequest就抛出422"><a href="#不使用validate或者FormRequest就抛出422" class="headerlink" title="不使用validate或者FormRequest就抛出422"></a>不使用validate或者FormRequest就抛出422</h3><p>如果您不使用 <code>validate()</code> 或 <code>Form Request</code>，但仍然需要使用相同的 <code>422</code> 状态码和错误结构抛出错误，那么可以手动抛出 <code>throw ValidationException::withMessages()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (! <span class="variable">$user</span> || ! <span class="title class_">Hash</span>::<span class="title function_ invoke__">check</span>(<span class="variable">$request</span>-&gt;password, <span class="variable">$user</span>-&gt;password)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="title class_">ValidationException</span>::<span class="title function_ invoke__">withMessages</span>([</span><br><span class="line">        <span class="string">&#x27;email&#x27;</span> =&gt; [<span class="string">&#x27;The provided credentials are incorrect.&#x27;</span>],</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="规则取决于其他条件"><a href="#规则取决于其他条件" class="headerlink" title="规则取决于其他条件"></a>规则取决于其他条件</h3><p>如果您的规则是动态的并且依赖于其他条件，那么您可以动态地创建该规则数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">store</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$validationArray</span> = [</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span> =&gt; <span class="string">&#x27;required&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;company&#x27;</span> =&gt; <span class="string">&#x27;required&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;logo&#x27;</span> =&gt; <span class="string">&#x27;file|max:2048&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;location&#x27;</span> =&gt; <span class="string">&#x27;required&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;apply_link&#x27;</span> =&gt; <span class="string">&#x27;required|url&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;content&#x27;</span> =&gt; <span class="string">&#x27;required&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;payment_method_id&#x27;</span> =&gt; <span class="string">&#x27;required&#x27;</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Auth</span>::<span class="title function_ invoke__">check</span>()) &#123;</span><br><span class="line">        <span class="variable">$validationArray</span> = <span class="title function_ invoke__">array_merge</span>(<span class="variable">$validationArray</span>, [</span><br><span class="line">            <span class="string">&#x27;email&#x27;</span> =&gt; <span class="string">&#x27;required|email|unique:users&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;required|confirmed|min:5&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;required&#x27;</span></span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用属性设置首次验证失败时停止"><a href="#使用属性设置首次验证失败时停止" class="headerlink" title="使用属性设置首次验证失败时停止"></a>使用属性设置首次验证失败时停止</h3><p>在<code>request</code>类中使用这个属性设置首次验证失败时停止。</p><p>注意 这个跟 <code>Bail</code>规则不一样 只在单个规则失败时就停止</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Indicated if the validator should stop</span></span><br><span class="line"><span class="comment"> * the entire validation once a single</span></span><br><span class="line"><span class="comment"> * rule failure has occurred.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$stopOnFirstFailure</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/Sala7JR/status/1436172331198603270">@Sala7JR</a>提供</p><h3 id="unique规则在软删除全局作用域中无效"><a href="#unique规则在软删除全局作用域中无效" class="headerlink" title="unique规则在软删除全局作用域中无效"></a>unique规则在软删除全局作用域中无效</h3><p><code>Rule::unique</code> 默认不在软删除的全局范围内。但是<code>使用</code>withoutTrashed&#96; 时可用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Rule</span>::<span class="title function_ invoke__">unique</span>(<span class="string">&#x27;users&#x27;</span>, <span class="string">&#x27;email&#x27;</span>)-&gt;<span class="title function_ invoke__">withoutTrashed</span>();</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/Zubairmohsin33/status/1438490197956702209">@Zubairmohsin33</a>提供</p><h3 id="sometimes方法允许你定义验证器在什么时候被应用"><a href="#sometimes方法允许你定义验证器在什么时候被应用" class="headerlink" title="sometimes方法允许你定义验证器在什么时候被应用"></a>sometimes方法允许你定义验证器在什么时候被应用</h3><p><code>Validator::sometimes</code> 方法允许你定义验证器在什么时候被应用，基于提供的输入。<br>这个片段展示了如果购买的物品数量不够，如何禁止使用优惠券。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$data</span> = [</span><br><span class="line">    <span class="string">&#x27;coupon&#x27;</span> =&gt; <span class="string">&#x27;PIZZA_PARTY&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;items&#x27;</span> =&gt; [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">1</span>,</span><br><span class="line">            <span class="string">&#x27;quantity&#x27;</span> =&gt; <span class="number">2</span></span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">2</span>,</span><br><span class="line">            <span class="string">&#x27;quantity&#x27;</span> =&gt; <span class="number">2</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="variable">$validator</span> = <span class="title class_">Validator</span>::<span class="title function_ invoke__">make</span>(<span class="variable">$data</span>, [</span><br><span class="line">    <span class="string">&#x27;coupon&#x27;</span> =&gt; <span class="string">&#x27;exists:coupons,name&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;items&#x27;</span> =&gt; <span class="string">&#x27;required|array&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;items.*.id&#x27;</span> =&gt; <span class="string">&#x27;required|int&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;items.*.quantity&#x27;</span> =&gt; <span class="string">&#x27;required|int&#x27;</span>,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$validator</span>-&gt;<span class="title function_ invoke__">sometimes</span>(<span class="string">&#x27;coupon&#x27;</span>, <span class="string">&#x27;prohibited&#x27;</span>, function (Fluent <span class="variable">$data</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">collect</span>(<span class="variable">$data</span>-&gt;items)-&gt;<span class="title function_ invoke__">sum</span>(<span class="string">&#x27;quantity&#x27;</span>) &lt; <span class="number">5</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// throws a ValidationException as the quantity provided is not enough</span></span><br><span class="line"><span class="variable">$validator</span>-&gt;<span class="title function_ invoke__">validate</span>();</span><br></pre></td></tr></table></figure><p>Tip given by <a href="https://twitter.com/cerbero90/status/1440226037972013056">@cerbero90</a></p><h3 id="数组元素验证"><a href="#数组元素验证" class="headerlink" title="数组元素验证"></a>数组元素验证</h3><p>如果你想要验证提交的数组元素，使用带<code>*</code>号的点符号。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// say you have this array</span></span><br><span class="line"><span class="comment">// array in request &#x27;user_info&#x27;</span></span><br><span class="line"><span class="variable">$request</span>-&gt;<span class="title function_ invoke__">validated</span>()-&gt;user_info = [</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Qasim&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">26</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Ahmed&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;age&#x27;</span> =&gt; <span class="number">23</span>,</span><br><span class="line">    ],</span><br><span class="line">];</span><br><span class="line"><span class="comment">// Rule</span></span><br><span class="line"><span class="variable">$rules</span> = [</span><br><span class="line">    <span class="string">&#x27;user_info.*.name&#x27;</span> =&gt; [<span class="string">&#x27;required&#x27;</span>, <span class="string">&#x27;alpha&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;user_info.*.age&#x27;</span> =&gt; [<span class="string">&#x27;required&#x27;</span>, <span class="string">&#x27;numeric&#x27;</span>],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>由<a href="https://github.com/HydroMoon">HydroMoon</a>提供</p><h3 id="提交自定义验证规则"><a href="#提交自定义验证规则" class="headerlink" title="提交自定义验证规则"></a>提交自定义验证规则</h3><p>感谢<code>Rule::when</code> 我们可以指定提交验证规则。</p><p>下面例子我们可以验证用户是否真的可以对文章点赞。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Validation</span>\<span class="title">Rule</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rules</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">&#x27;vote&#x27;</span> =&gt; <span class="title class_">Rule</span>::<span class="title function_ invoke__">when</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">can</span>(<span class="string">&#x27;vote&#x27;</span>, <span class="variable">$post</span>), <span class="string">&#x27;required|int|between:1,5&#x27;</span>),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/cerbero90/status/1434426076198014976">@cerbero90</a>提供</p><h3 id="Password的defaults方法"><a href="#Password的defaults方法" class="headerlink" title="Password的defaults方法"></a>Password的defaults方法</h3><p>使用<code>Password::defaults</code>方法验证用户提供的密码时，可以强制执行特定规则。它包括要求字母、数字、符号等的选项。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>): <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title class_">Password</span>::<span class="title function_ invoke__">defaults</span>(function () &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Password</span>::<span class="title function_ invoke__">min</span>(<span class="number">12</span>)</span><br><span class="line">                -&gt;<span class="title function_ invoke__">letters</span>()</span><br><span class="line">                -&gt;<span class="title function_ invoke__">numbers</span>()</span><br><span class="line">                -&gt;<span class="title function_ invoke__">symbols</span>()</span><br><span class="line">                -&gt;<span class="title function_ invoke__">mixedCase</span>()</span><br><span class="line">                -&gt;<span class="title function_ invoke__">uncompromised</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">validate</span>([</span><br><span class="line">    [<span class="string">&#x27;password&#x27;</span> =&gt; [<span class="string">&#x27;required&#x27;</span>, <span class="title class_">Password</span>::<span class="title function_ invoke__">defaults</span>()]]</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p> <a href="https://twitter.com/mattkingshott/status/1463190613260603395">@mattkingshott</a>提供</p><h3 id="表单验证重定向请求"><a href="#表单验证重定向请求" class="headerlink" title="表单验证重定向请求"></a>表单验证重定向请求</h3><p>使用表单请求进行验证时，默认情况下，验证错误将重定向回上一页，但您可以覆盖它<br></p><p>只需定义<code>$redirect</code>或<code>redirectRoute</code>的属性即可</p><p><a href="https://laravel.com/docs/8.x/validation#customizing-the-redirect-location">Link to docs</a></p><h3 id="Mac验证规则"><a href="#Mac验证规则" class="headerlink" title="Mac验证规则"></a>Mac验证规则</h3><p><code>Laravel 8.77</code>添加了新的<code>mac_address</code>规则</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$trans</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getIlluminateArrayTranslator</span>();</span><br><span class="line"><span class="variable">$validator</span> = <span class="keyword">new</span> <span class="title class_">Validator</span>(<span class="variable">$trans</span>, [<span class="string">&#x27;mac&#x27;</span> =&gt; <span class="string">&#x27;01-23-45-67-89-ab&#x27;</span>], [<span class="string">&#x27;mac&#x27;</span> =&gt; <span class="string">&#x27;mac_address&#x27;</span>]);</span><br><span class="line"><span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assertTrue</span>(<span class="variable">$validator</span>-&gt;<span class="title function_ invoke__">passes</span>());</span><br></pre></td></tr></table></figure><p> [@Teacoders] 提供</p><h3 id="验证顶级域名邮箱"><a href="#验证顶级域名邮箱" class="headerlink" title="验证顶级域名邮箱"></a>验证顶级域名邮箱</h3><p><code>email</code>验证规则将接受一个非顶级域名邮箱 (例子:<code>taylor@laravel</code>, <code>povilas@ldaily</code>)</p><p>但是你如果想确保邮箱必须有一个顶级域名 (例子:<code>taylor@laravel.com</code>, <code>povilas@ldaily.com</code>) 使用<code>email:filter</code>规则</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">&#x27;email&#x27;</span> =&gt; <span class="string">&#x27;required|email&#x27;</span>, <span class="comment">// before</span></span><br><span class="line">    <span class="string">&#x27;email&#x27;</span> =&gt; <span class="string">&#x27;required|email:filter&#x27;</span>, <span class="comment">// after</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><p> <a href="https://laracasts.com/discuss/channels/general-discussion/laravel-58-override-email-validation-use-57-rules?replyId=645613">@Chris1904</a>提供</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="laravel" scheme="http://example.com/categories/laravel/"/>
    
    
    <category term="laravel" scheme="http://example.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>邮件</title>
    <link href="http://example.com/2024/03/07/laravel/Mail/"/>
    <id>http://example.com/2024/03/07/laravel/Mail/</id>
    <published>2024-03-07T09:34:16.874Z</published>
    <updated>2024-03-07T09:40:01.945Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h2><p>⬆️ <a href="../README-zh.md">回到顶部</a> ⬅️ <a href="./Auth.md">上一个 (授权)</a> ➡️ <a href="./Artisan.md">下一个 (Artisan)</a></p><ol><li><a href="#%E6%B5%8B%E8%AF%95%E9%82%AE%E4%BB%B6%E5%AD%98%E5%85%A5laravel.log">测试邮件存入laravel.log</a></li><li><a href="#%E9%A2%84%E8%A7%88%E9%82%AE%E4%BB%B6">预览邮件</a></li><li><a href="#%E4%B8%8D%E4%BD%BF%E7%94%A8Mailables%E9%A2%84%E8%A7%88%E9%82%AE%E4%BB%B6">不使用Mailables预览邮件</a></li><li><a href="#Laravel-%E9%80%9A%E7%9F%A5%E4%B8%AD%E7%9A%84%E9%BB%98%E8%AE%A4%E9%82%AE%E4%BB%B6%E4%B8%BB%E9%A2%98">Laravel 通知中的默认邮件主题</a></li><li><a href="#%E5%90%91%E4%BB%BB%E4%BD%95%E4%BA%BA%E5%8F%91%E9%80%81%E9%80%9A%E7%9F%A5">向任何人发送通知</a></li></ol><h3 id="测试邮件存入laravel-log"><a href="#测试邮件存入laravel-log" class="headerlink" title="测试邮件存入laravel.log"></a>测试邮件存入laravel.log</h3><p>如果你想在你的应用中测试邮件内容但是无法或不愿意设置类似 <code>Mailgun</code> 的东西，使用 <code>.env</code> 参数 <code>MAIL_DRIVER=log</code> 然后所有的邮件都会被保存到 <code>storage/logs/laravel.log</code> 文件，而不是真实的发送。</p><h3 id="预览邮件"><a href="#预览邮件" class="headerlink" title="预览邮件"></a>预览邮件</h3><p>如果你使用 <code>Mailables</code> 发送邮件，您可以在浏览器中预览结果，而无需发送。返回一个 Mailables 作为路由结果:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/mailable&#x27;</span>, function () &#123;</span><br><span class="line">    <span class="variable">$invoice</span> = <span class="title class_">App\Invoice</span>::<span class="title function_ invoke__">find</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">App\Mail\InvoicePaid</span>(<span class="variable">$invoice</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="不使用Mailables预览邮件"><a href="#不使用Mailables预览邮件" class="headerlink" title="不使用Mailables预览邮件"></a>不使用Mailables预览邮件</h3><p>不使用Mailables你也可以预览你的邮件。举个例子，当你创建通知的时候你可以指定你的邮件通知中可能用到的markdown文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Notifications</span>\<span class="title">Messages</span>\<span class="title">MailMessage</span>;</span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/mailable&#x27;</span>, function () &#123;</span><br><span class="line">    <span class="variable">$invoice</span> = <span class="title class_">App\Invoice</span>::<span class="title function_ invoke__">find</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">new</span> <span class="title class_">MailMessage</span>)-&gt;<span class="title function_ invoke__">markdown</span>(<span class="string">&#x27;emails.invoice-paid&#x27;</span>, <span class="title function_ invoke__">compact</span>(<span class="string">&#x27;invoice&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>你也可以使用&#96;&#96;MailMessage<code> </code>对象提供的<code>view</code>方法和其他方法。</p><p>由 <a href="https://github.com/raditzfarhan">@raditzfarhan</a>提供</p><h3 id="Laravel-通知中的默认邮件主题"><a href="#Laravel-通知中的默认邮件主题" class="headerlink" title="Laravel 通知中的默认邮件主题"></a>Laravel 通知中的默认邮件主题</h3><p>如果您发送 <code>Laravel</code> 通知，并且没有在 <code>toMail()</code> 中指定主题，默认主题是您的通知类名，驼峰命名进入控制器。<br>那么，你可以：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRegistrationEmail</span> <span class="keyword">extends</span> <span class="title">Notification</span> </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后您将收到一封主题为<code> 用户注册的电子邮件</code> 的电子邮件。</p><h3 id="向任何人发送通知"><a href="#向任何人发送通知" class="headerlink" title="向任何人发送通知"></a>向任何人发送通知</h3><p>你不仅可以发送 <code>Laravel</code> 通知 给特定的用户 <code>$user-&gt;notify()</code>，而且可以发送给你想发给的任何人，通过 <code>Notification::route()</code> ，所谓的 “按需” 通知：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Notification</span>::<span class="title function_ invoke__">route</span>(<span class="string">&#x27;mail&#x27;</span>, <span class="string">&#x27;taylor@example.com&#x27;</span>)</span><br><span class="line">        -&gt;<span class="title function_ invoke__">route</span>(<span class="string">&#x27;nexmo&#x27;</span>, <span class="string">&#x27;5555555555&#x27;</span>)</span><br><span class="line">        -&gt;<span class="title function_ invoke__">route</span>(<span class="string">&#x27;slack&#x27;</span>, <span class="string">&#x27;https://hooks.slack.com/services/...&#x27;</span>)</span><br><span class="line">        -&gt;<span class="title function_ invoke__">notify</span>(<span class="keyword">new</span> <span class="title class_">InvoicePaid</span>(<span class="variable">$invoice</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="laravel" scheme="http://example.com/categories/laravel/"/>
    
    
    <category term="laravel" scheme="http://example.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>日志与调试</title>
    <link href="http://example.com/2024/03/07/laravel/Log_and_Debug/"/>
    <id>http://example.com/2024/03/07/laravel/Log_and_Debug/</id>
    <published>2024-03-07T09:34:16.874Z</published>
    <updated>2024-03-07T09:39:59.656Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="日志与调试"><a href="#日志与调试" class="headerlink" title="日志与调试"></a>日志与调试</h2><p>⬆️ <a href="../README-zh.md">回到顶部</a> ⬅️ <a href="./Factories.md">上一个 (工厂)</a> ➡️ <a href="./API.md">下一个 (API)</a></p><ol><li><a href="#%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95%E5%8F%82%E6%95%B0">日志记录参数</a></li><li><a href="#%E6%9B%B4%E6%96%B9%E4%BE%BF%E7%9A%84-DD">更方便的 DD</a></li><li><a href="#%E4%BD%BF%E7%94%A8-context-%E6%97%A5%E5%BF%97">使用 context 日志</a></li><li><a href="#%E5%BF%AB%E9%80%9F%E8%BE%93%E5%87%BAQuery%E7%9A%84sql">快速输出Query的sql</a></li><li><a href="#%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E6%89%93%E5%8D%B0%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2">开发模式打印所有数据库查询</a></li></ol><h3 id="日志记录参数"><a href="#日志记录参数" class="headerlink" title="日志记录参数"></a>日志记录参数</h3><p>你可以使用 <code>Log::info()</code>，或使用更短的 <code>info()</code> 额外参数信息，来了解更多发生的事情</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Log</span>::<span class="title function_ invoke__">info</span>(<span class="string">&#x27;User failed to login.&#x27;</span>, [<span class="string">&#x27;id&#x27;</span> =&gt; <span class="variable">$user</span>-&gt;id]);</span><br></pre></td></tr></table></figure><h3 id="更方便的-DD"><a href="#更方便的-DD" class="headerlink" title="更方便的 DD"></a>更方便的 DD</h3><p>你可以在你的 <code>Eloquent</code> 句子或者任何集合结尾添加 <code>-&gt;dd()</code>，而不是使用 <code>dd($result)</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Instead of</span></span><br><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">where</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Taylor&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line"><span class="title function_ invoke__">dd</span>(<span class="variable">$users</span>);</span><br><span class="line"><span class="comment">// Do this</span></span><br><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">where</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Taylor&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>()-&gt;<span class="title function_ invoke__">dd</span>();</span><br></pre></td></tr></table></figure><h3 id="使用-context-日志"><a href="#使用-context-日志" class="headerlink" title="使用 context 日志"></a>使用 context 日志</h3><p>在最新的 <code>Laravel 8.49</code> 中：<code>Log::withContext()</code> 将帮助您区分不同请求之间的日志消息。<br>如果你创建了中间件并且设置了 <code>context</code>，所有的长消息将包含在 <code>context</code> 中，你将会搜索更容易。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">Request <span class="variable">$request</span>, <span class="built_in">Closure</span> <span class="variable">$next</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$requestId</span> = (<span class="keyword">string</span>) <span class="title class_">Str</span>::<span class="title function_ invoke__">uuid</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Log</span>::<span class="title function_ invoke__">withContext</span>([<span class="string">&#x27;request-id&#x27;</span> =&gt; <span class="variable">$requestId</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$response</span> = <span class="variable">$next</span>(<span class="variable">$request</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$response</span>-&gt;<span class="title function_ invoke__">header</span>(<span class="string">&#x27;request-id&#x27;</span>, <span class="variable">$requestId</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$response</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/LaraibiM/status/1437857603263078421">@LaraibiM</a>提供</p><h3 id="快速输出Query的sql"><a href="#快速输出Query的sql" class="headerlink" title="快速输出Query的sql"></a>快速输出Query的sql</h3><p>如果你想快速输出一个 <code>Eloquent query</code>的sql 你可以调用 <code>toSql()</code>方法如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$invoices</span> = <span class="title class_">Invoice</span>::<span class="title function_ invoke__">where</span>(<span class="string">&#x27;client&#x27;</span>, <span class="string">&#x27;James pay&#x27;</span>)-&gt;<span class="title function_ invoke__">toSql</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">dd</span>(<span class="variable">$invoices</span>)</span><br><span class="line"><span class="comment">// select * from `invoices` where `client` = ? </span></span><br></pre></td></tr></table></figure><p> <a href="https://twitter.com/devThaer/status/1438816135881822210">@devThaer</a>提供</p><h3 id="开发模式打印所有数据库查询"><a href="#开发模式打印所有数据库查询" class="headerlink" title="开发模式打印所有数据库查询"></a>开发模式打印所有数据库查询</h3><p>如果要在开发期间记录所有数据库查询，请将此代码段添加到<code>AppServiceProvider</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">App</span>::<span class="title function_ invoke__">environment</span>(<span class="string">&#x27;local&#x27;</span>)) &#123;</span><br><span class="line">        DB::<span class="title function_ invoke__">listen</span>(function (<span class="variable">$query</span>) &#123;</span><br><span class="line">            <span class="title function_ invoke__">logger</span>(<span class="title class_">Str</span>::<span class="title function_ invoke__">replaceArray</span>(<span class="string">&#x27;?&#x27;</span>, <span class="variable">$query</span>-&gt;bindings, <span class="variable">$query</span>-&gt;sql));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <a href="https://twitter.com/mmartin_joo/status/1473262634405449730">@mmartin_joo</a>提供</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="laravel" scheme="http://example.com/categories/laravel/"/>
    
    
    <category term="laravel" scheme="http://example.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>工厂</title>
    <link href="http://example.com/2024/03/07/laravel/Factories/"/>
    <id>http://example.com/2024/03/07/laravel/Factories/</id>
    <published>2024-03-07T09:34:16.874Z</published>
    <updated>2024-03-07T09:39:57.472Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="工厂"><a href="#工厂" class="headerlink" title="工厂"></a>工厂</h2><p>⬆️ <a href="../README-zh.md">回到顶部</a> ⬅️ <a href="./Artisan.md">上一个 (Artisan)</a> ➡️ <a href="./Log_and_Debug.md">下一个 (日志与调试)</a></p><ol><li><a href="#%E5%B7%A5%E5%8E%82%E5%9B%9E%E8%B0%83">工厂回调</a></li><li><a href="#%E7%94%9F%E6%88%90%E5%B8%A6%E5%9B%BE%E5%83%8F%E7%9A%84%E6%95%B0%E6%8D%AE%E5%B7%A5%E5%8E%82%E6%88%96%E5%A1%AB%E5%85%85">生成带图像的数据工厂或填充</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%BB%E8%BE%91%E8%A6%86%E7%9B%96%E5%80%BC">使用自定义逻辑覆盖值</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E5%B8%A6%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB%E7%9A%84%E5%B7%A5%E5%8E%82">使用带关联关系的工厂</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%9E%8B%E8%80%8C%E4%B8%8D%E8%A7%A6%E5%8F%91%E4%BB%BB%E6%84%8F%E4%BA%8B%E4%BB%B6">创建模型而不触发任意事件</a></li><li><a href="#%E6%9C%89%E7%94%A8%E7%9A%84for%E6%96%B9%E6%B3%95">有用的for方法</a></li></ol><h3 id="工厂回调"><a href="#工厂回调" class="headerlink" title="工厂回调"></a>工厂回调</h3><p>使用工厂类进行填充数据时，您可以在插入记录后提供回调函数来执行某种操作。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$factory</span>-&gt;<span class="title function_ invoke__">afterCreating</span>(<span class="title class_">App\User</span>::<span class="variable language_">class</span>, function (<span class="variable">$user</span>, <span class="variable">$faker</span>) &#123;</span><br><span class="line">    <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">accounts</span>()-&gt;<span class="title function_ invoke__">save</span>(<span class="title function_ invoke__">factory</span>(<span class="title class_">App\Account</span>::<span class="variable language_">class</span>)-&gt;<span class="title function_ invoke__">make</span>());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="生成带图像的数据工厂或填充"><a href="#生成带图像的数据工厂或填充" class="headerlink" title="生成带图像的数据工厂或填充"></a>生成带图像的数据工厂或填充</h3><p>你是否知道伪造类 (Faker) 不仅可以生成文本值，还可以生成图像？看此处的 avatar 字段，它将生成一个 50x50 的图像:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$factory</span>-&gt;<span class="title function_ invoke__">define</span>(<span class="title class_">User</span>::<span class="variable language_">class</span>, function (Faker <span class="variable">$faker</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="variable">$faker</span>-&gt;name,</span><br><span class="line">        <span class="string">&#x27;email&#x27;</span> =&gt; <span class="variable">$faker</span>-&gt;<span class="title function_ invoke__">unique</span>()-&gt;safeEmail,</span><br><span class="line">        <span class="string">&#x27;email_verified_at&#x27;</span> =&gt; <span class="title function_ invoke__">now</span>(),</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span> =&gt; <span class="title function_ invoke__">bcrypt</span>(<span class="string">&#x27;password&#x27;</span>),</span><br><span class="line">        <span class="string">&#x27;remember_token&#x27;</span> =&gt; <span class="title class_">Str</span>::<span class="title function_ invoke__">random</span>(<span class="number">10</span>),</span><br><span class="line">        <span class="string">&#x27;avatar&#x27;</span> =&gt; <span class="variable">$faker</span>-&gt;<span class="title function_ invoke__">image</span>(<span class="title function_ invoke__">storage_path</span>(<span class="string">&#x27;images&#x27;</span>), <span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">    ];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="使用自定义逻辑覆盖值"><a href="#使用自定义逻辑覆盖值" class="headerlink" title="使用自定义逻辑覆盖值"></a>使用自定义逻辑覆盖值</h3><p>当使用工厂类创建记录时，可以使用序列类 (Sequence) 来输入自定义逻辑并将值覆盖</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">factory</span>()</span><br><span class="line">                -&gt;<span class="title function_ invoke__">count</span>(<span class="number">10</span>)</span><br><span class="line">                -&gt;<span class="title function_ invoke__">state</span>(<span class="keyword">new</span> <span class="title class_">Sequence</span>(</span><br><span class="line">                    [<span class="string">&#x27;admin&#x27;</span> =&gt; <span class="string">&#x27;Y&#x27;</span>],</span><br><span class="line">                    [<span class="string">&#x27;admin&#x27;</span> =&gt; <span class="string">&#x27;N&#x27;</span>],</span><br><span class="line">                ))</span><br><span class="line">                -&gt;<span class="title function_ invoke__">create</span>();</span><br></pre></td></tr></table></figure><h3 id="使用带关联关系的工厂"><a href="#使用带关联关系的工厂" class="headerlink" title="使用带关联关系的工厂"></a>使用带关联关系的工厂</h3><p>当使用带关联关系的工厂时，<code>laravel</code>也提供了魔术方法:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// magic factory relationship methods</span></span><br><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">factory</span>()-&gt;<span class="title function_ invoke__">hasPosts</span>(<span class="number">3</span>)-&gt;<span class="title function_ invoke__">create</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// instead of</span></span><br><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">factory</span>()-&gt;<span class="title function_ invoke__">has</span>(<span class="title class_">Post</span>::<span class="title function_ invoke__">factory</span>()-&gt;<span class="title function_ invoke__">count</span>(<span class="number">3</span>))-&gt;<span class="title function_ invoke__">create</span>();</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/oliverds_/status/1441447356323430402">@oliverds_</a>提供</p><h3 id="创建模型而不触发任意事件"><a href="#创建模型而不触发任意事件" class="headerlink" title="创建模型而不触发任意事件"></a>创建模型而不触发任意事件</h3><p>有时，您可能希望<code>update</code>给定的模型，而不发送任何事件。您可以使用<code>updateQuietly</code>方法来完成此操作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Post</span>::<span class="title function_ invoke__">factory</span>()-&gt;<span class="title function_ invoke__">createOneQuietly</span>();</span><br><span class="line"><span class="title class_">Post</span>::<span class="title function_ invoke__">factory</span>()-&gt;<span class="title function_ invoke__">count</span>(<span class="number">3</span>)-&gt;<span class="title function_ invoke__">createQuietly</span>();</span><br><span class="line"><span class="title class_">Post</span>::<span class="title function_ invoke__">factory</span>()-&gt;<span class="title function_ invoke__">createManyQuietly</span>([</span><br><span class="line">    [<span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;A new comment&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Another new comment&#x27;</span>],</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h3 id="有用的for方法"><a href="#有用的for方法" class="headerlink" title="有用的for方法"></a>有用的for方法</h3><p>Laravel工厂有一个非常有用的<code>for</code>方法。您可以使用它来创建<code>belongsTo</code>关系。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title class_">Product</span>::<span class="title function_ invoke__">factory</span>()</span><br><span class="line">        -&gt;<span class="title function_ invoke__">count</span>(<span class="number">3</span>);</span><br><span class="line">        -&gt;<span class="keyword">for</span>(<span class="title class_">Category</span>::<span class="title function_ invoke__">factory</span>()-&gt;<span class="title function_ invoke__">create</span>())</span><br><span class="line">        -&gt;<span class="title function_ invoke__">create</span>();    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/mmartin_joo/status/1461002439629361158">@mmartin_joo</a>提供</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="laravel" scheme="http://example.com/categories/laravel/"/>
    
    
    <category term="laravel" scheme="http://example.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>数据库迁移</title>
    <link href="http://example.com/2024/03/07/laravel/Migrations/"/>
    <id>http://example.com/2024/03/07/laravel/Migrations/</id>
    <published>2024-03-07T09:34:16.874Z</published>
    <updated>2024-03-07T09:40:05.272Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a>数据库迁移</h2><p>⬆️ <a href="../README-zh.md">回到顶部</a> ⬅️ <a href="./Models_Relations.md">上一个 (模型关联)</a> ➡️ <a href="./Views.md">下一个 (视图)</a></p><ol><li><a href="#%E6%97%A0%E7%AC%A6%E5%8F%B7%E6%95%B4%E5%9E%8B">无符号整型</a></li><li><a href="#%E8%BF%81%E7%A7%BB%E9%A1%BA%E5%BA%8F">迁移顺序</a></li><li><a href="#%E5%B8%A6%E6%97%B6%E5%8C%BA%E7%9A%84%E8%BF%81%E7%A7%BB%E5%AD%97%E6%AE%B5">带时区的迁移字段</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB%E5%AD%97%E6%AE%B5%E7%B1%BB%E5%9E%8B">数据库迁移字段类型</a></li><li><a href="#%E9%BB%98%E8%AE%A4%E6%97%B6%E9%97%B4%E6%88%B3">默认时间戳</a></li><li><a href="#%E8%BF%81%E7%A7%BB%E7%8A%B6%E6%80%81">迁移状态</a></li><li><a href="#%E5%88%9B%E5%BB%BA%E5%B8%A6%E7%A9%BA%E6%A0%BC%E7%9A%84%E8%BF%81%E7%A7%BB">创建带空格的迁移</a></li><li><a href="#%E5%9C%A8%E5%8F%A6%E4%B8%80%E5%88%97%E7%9A%84%E5%90%8E%E9%9D%A2%E5%88%9B%E5%BB%BA%E4%B8%80%E5%88%97">在另一列的后面创建一列</a></li><li><a href="#%E4%B8%BA%E5%B7%B2%E7%BB%8F%E5%AD%98%E5%9C%A8%E7%9A%84%E8%A1%A8%E7%94%9F%E6%88%90%E8%BF%81%E7%A7%BB%E6%96%87%E4%BB%B6">为已经存在的表生成迁移文件</a></li><li><a href="#%E6%89%A7%E8%A1%8C%E8%BF%81%E7%A7%BB%E5%89%8D%E5%85%88%E8%BE%93%E5%87%BA-SQL-%E8%AF%AD%E5%8F%A5">执行迁移前先输出 SQL 语句</a></li><li><a href="#%E5%8C%BF%E5%90%8D%E8%BF%81%E7%A7%BB">匿名迁移</a></li><li><a href="#%E7%BB%99%E8%BF%81%E7%A7%BB%E6%B7%BB%E5%8A%A0%E6%B3%A8%E9%87%8A">给迁移添加注释</a></li><li><a href="#%E8%A1%A8%E5%90%8D%E8%A1%A8%E5%AD%97%E6%AE%B5%E6%A3%80%E6%B5%8B">表名表字段检测</a></li></ol><h3 id="无符号整型"><a href="#无符号整型" class="headerlink" title="无符号整型"></a>无符号整型</h3><p>作为迁移的外键，请使用 <code>unsignedInteger()</code>  类型或 <code>integer()-&gt;unsigned()</code> 来替代 <code>integer()</code> ，否则你会得到 SQL 错误。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Schema</span>::<span class="title function_ invoke__">create</span>(<span class="string">&#x27;employees&#x27;</span>, function (Blueprint <span class="variable">$table</span>) &#123;</span><br><span class="line">    <span class="variable">$table</span>-&gt;<span class="title function_ invoke__">unsignedInteger</span>(<span class="string">&#x27;company_id&#x27;</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;<span class="title function_ invoke__">foreign</span>(<span class="string">&#x27;company_id&#x27;</span>)-&gt;<span class="title function_ invoke__">references</span>(<span class="string">&#x27;id&#x27;</span>)-&gt;<span class="title function_ invoke__">on</span>(<span class="string">&#x27;companies&#x27;</span>);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>同样，你可以用 <code>unsignedBigInteger()</code> 如果外键对应的是 <code>bigInteger()</code> 类型。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Schema</span>::<span class="title function_ invoke__">create</span>(<span class="string">&#x27;employees&#x27;</span>, function (Blueprint <span class="variable">$table</span>) &#123;</span><br><span class="line">    <span class="variable">$table</span>-&gt;<span class="title function_ invoke__">unsignedBigInteger</span>(<span class="string">&#x27;company_id&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="迁移顺序"><a href="#迁移顺序" class="headerlink" title="迁移顺序"></a>迁移顺序</h3><p>如果你想改变数据库迁移的顺序，只需要将文件按时间戳记命名， 就像 <code>2018_08_04_070443_create_posts_table.php</code> 改为 <code>2018_07_04_070443_create_posts_table.php</code> (从 <code>2018_08_04</code> 改成了 <code>2018_07_04</code>).</p><p>迁移是以字母顺序执行。</p><h3 id="带时区的迁移字段"><a href="#带时区的迁移字段" class="headerlink" title="带时区的迁移字段"></a>带时区的迁移字段</h3><p>你知不知道在迁移中不止有 <code>timestamps()</code> 还有带时区的 <code>timestampsTz()</code> 。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Schema</span>::<span class="title function_ invoke__">create</span>(<span class="string">&#x27;employees&#x27;</span>, function (Blueprint <span class="variable">$table</span>) &#123;</span><br><span class="line">    <span class="variable">$table</span>-&gt;<span class="title function_ invoke__">increments</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;<span class="keyword">string</span>(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;<span class="keyword">string</span>(<span class="string">&#x27;email&#x27;</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;<span class="title function_ invoke__">timestampsTz</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>同样，还有这么些列 <code>dateTimeTz()</code> ，<code> timeTz()</code> ， <code>timestampTz()</code> ， <code>softDeletesTz()</code>。</p><h3 id="数据库迁移字段类型"><a href="#数据库迁移字段类型" class="headerlink" title="数据库迁移字段类型"></a>数据库迁移字段类型</h3><p>迁移中有一些有趣的字段类型，下面是一些示例。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$table</span>-&gt;<span class="title function_ invoke__">geometry</span>(<span class="string">&#x27;positions&#x27;</span>);</span><br><span class="line"><span class="variable">$table</span>-&gt;<span class="title function_ invoke__">ipAddress</span>(<span class="string">&#x27;visitor&#x27;</span>);</span><br><span class="line"><span class="variable">$table</span>-&gt;<span class="title function_ invoke__">macAddress</span>(<span class="string">&#x27;device&#x27;</span>);</span><br><span class="line"><span class="variable">$table</span>-&gt;<span class="title function_ invoke__">point</span>(<span class="string">&#x27;position&#x27;</span>);</span><br><span class="line"><span class="variable">$table</span>-&gt;<span class="title function_ invoke__">uuid</span>(<span class="string">&#x27;id&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在 <a href="https://laravel.com/docs/master/migrations#creating-columns">官方文档</a> 中你可以找到全部的字段类型列表.</p><h3 id="默认时间戳"><a href="#默认时间戳" class="headerlink" title="默认时间戳"></a>默认时间戳</h3><p>当创建迁移文件时，你可以使用带<br><code>useCurrent()</code> 和 <code>useCurrentOnUpdate()</code> 可选项的 <code>timestamp()</code> 类型，这将会设置使相应字段以 <code>CURRENT_TIMESTAMP</code> 作为默认值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$table</span>-&gt;<span class="title function_ invoke__">timestamp</span>(<span class="string">&#x27;created_at&#x27;</span>)-&gt;<span class="title function_ invoke__">useCurrent</span>();</span><br><span class="line"><span class="variable">$table</span>-&gt;<span class="title function_ invoke__">timestamp</span>(<span class="string">&#x27;updated_at&#x27;</span>)-&gt;<span class="title function_ invoke__">useCurrentOnUpdate</span>();</span><br></pre></td></tr></table></figure><h3 id="迁移状态"><a href="#迁移状态" class="headerlink" title="迁移状态"></a>迁移状态</h3><p>如果你想知道迁移是不是已经运行过了，不需要查看 “migrations” 表，你可以运行 <code>php artisan migrate:status</code> 命令来查看。</p><p>结果示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------+------------------------------------------------+-------+</span><br><span class="line">| Ran? | Migration                                      | Batch |</span><br><span class="line">+------+------------------------------------------------+-------+</span><br><span class="line">| Yes  | 2014_10_12_000000_create_users_table           | 1     |</span><br><span class="line">| Yes  | 2014_10_12_100000_create_password_resets_table | 1     |</span><br><span class="line">| No   | 2019_08_19_000000_create_failed_jobs_table     |       |</span><br><span class="line">+------+------------------------------------------------+-------+</span><br></pre></td></tr></table></figure><h3 id="创建带空格的迁移"><a href="#创建带空格的迁移" class="headerlink" title="创建带空格的迁移"></a>创建带空格的迁移</h3><p>当你打入 <code>make:migration</code> 命令，你不 “必须” 在不同部分间使用下划线 _ 进行分隔，比如 <code>create_transactions_table</code> 。你可以把名字用引号引起来并把下划线换成空格。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This works</span></span><br><span class="line">php artisan make:migration create_transactions_table</span><br><span class="line"></span><br><span class="line"><span class="comment">// But this works too</span></span><br><span class="line">php artisan make:migration <span class="string">&quot;create transactions table&quot;</span></span><br></pre></td></tr></table></figure><p>Source: <a href="https://twitter.com/stephenoldham/status/1353647972991578120">Steve O on Twitter</a></p><h3 id="在另一列的后面创建一列"><a href="#在另一列的后面创建一列" class="headerlink" title="在另一列的后面创建一列"></a>在另一列的后面创建一列</h3><p>注意： 仅 MySQL 可用<br>如果你要在已经存在的表里增加一个新列，这个列不 “必须” 成为最后一列，你可以指定这个列创建在哪个列的后面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Schema</span>::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;users&#x27;</span>, function (Blueprint <span class="variable">$table</span>) &#123;</span><br><span class="line">    <span class="variable">$table</span>-&gt;<span class="keyword">string</span>(<span class="string">&#x27;phone&#x27;</span>)-&gt;<span class="title function_ invoke__">after</span>(<span class="string">&#x27;email&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果你要在已经存在的表里增加一个新列，这个列不 “必须” 成为最后一列，你也可以指定这个列创建在哪个列的前面：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Schema</span>::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;users&#x27;</span>, function (Blueprint <span class="variable">$table</span>) &#123;</span><br><span class="line">    <span class="variable">$table</span>-&gt;<span class="keyword">string</span>(<span class="string">&#x27;phone&#x27;</span>)-&gt;<span class="title function_ invoke__">before</span>(<span class="string">&#x27;created_at&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果你让创建的列排在表中的第一个，那么可以使用 <code>first</code> 方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Schema</span>::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;users&#x27;</span>, function (Blueprint <span class="variable">$table</span>) &#123;</span><br><span class="line">    <span class="variable">$table</span>-&gt;<span class="keyword">string</span>(<span class="string">&#x27;uuid&#x27;</span>)-&gt;<span class="title function_ invoke__">first</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="为已经存在的表生成迁移文件"><a href="#为已经存在的表生成迁移文件" class="headerlink" title="为已经存在的表生成迁移文件"></a>为已经存在的表生成迁移文件</h3><p>如果你要为已经存的表生成迁移文件，而且你想让 Lavarel 来为你生成 Schema::table ()  代码，那么，在命令后面加入  “_in_xxxxx_table” 或”_to_xxxxx_table”，或者指明 “–table” 参数。<br><code>php artisan make:migration change_fields_products_table</code> generates empty class</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeFieldsProductsTable</span> <span class="keyword">extends</span> <span class="title">Migration</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，加入 <code>in_xxxxx_table</code> <code>php artisan make:migration change_fields_in_products_table</code> 生成了填好了 <code>Schemma::table()</code> 的类。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeFieldsProductsTable</span> <span class="keyword">extends</span> <span class="title">Migration</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title class_">Schema</span>::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;products&#x27;</span>, function (Blueprint <span class="variable">$table</span>) &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，你可以指明 <code>--table</code> 参数 <code>php artisan make:migration whatever_you_want --table=products</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WhateverYouWant</span> <span class="keyword">extends</span> <span class="title">Migration</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title class_">Schema</span>::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;products&#x27;</span>, function (Blueprint <span class="variable">$table</span>) &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="执行迁移前先输出-SQL-语句"><a href="#执行迁移前先输出-SQL-语句" class="headerlink" title="执行迁移前先输出 SQL 语句"></a>执行迁移前先输出 SQL 语句</h3><p>当输入 migrate –pretend 命令，你可以得到将在终端中执行的 SQL 查询。如果有需要的话调试 SQL 的方法，这是个很有趣的方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Artisan command</span></span><br><span class="line">php artisan migrate --pretend</span><br></pre></td></tr></table></figure><p> <a href="https://github.com/zarpelon">@zarpelon</a> 提供</p><h3 id="匿名迁移"><a href="#匿名迁移" class="headerlink" title="匿名迁移"></a>匿名迁移</h3><p><code>Laravel</code>团队发布了<code>Laravel 8.37</code>版本 支持匿名迁移，解决了迁移命名冲突的问题。</p><p>这个问题的核心是 如果多个迁移有相同的类名 当尝试重新创建数据库时可能会导致问题</p><p>以下是一个来自 <code>pr </code>的例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Migrations</span>\<span class="title">Migration</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Schema</span>\<span class="title">Blueprint</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Schema</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Migration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="title class_">Schema</span>::table(<span class="params"><span class="string">&#x27;people&#x27;</span>, function (<span class="params">Blueprint <span class="variable">$table</span></span>) &#123;</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="function">            <span class="variable">$table</span>-&gt;<span class="keyword">string</span>(<span class="params"><span class="string">&#x27;first_name&#x27;</span></span>)-&gt;nullable(<span class="params"></span>);</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="function">        &#125;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">public</span> function down(<span class="params"></span>)</span></span></span><br><span class="line"><span class="params"><span class="function">    &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="title class_">Schema</span>::table(<span class="params"><span class="string">&#x27;people&#x27;</span>, function (<span class="params">Blueprint <span class="variable">$table</span></span>) &#123;</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="function">            <span class="variable">$table</span>-&gt;dropColumn(<span class="params"><span class="string">&#x27;first_name&#x27;</span></span>);</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="function">        &#125;</span>);</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;;</span></span></span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/nicksdot/status/1432340806275198978">@nicksdot</a>提供</p><h3 id="给迁移添加注释"><a href="#给迁移添加注释" class="headerlink" title="给迁移添加注释"></a>给迁移添加注释</h3><p>在迁移中你可以给字段添加 <code>comment</code> 提供有用的信息。</p><p>如果数据库被其他开发者管理,他们在任何操作之前可以看这些表结构的注释。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$table</span>-&gt;<span class="title function_ invoke__">unsignedInteger</span>(<span class="string">&#x27;interval&#x27;</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">index</span>()</span><br><span class="line">    -&gt;<span class="title function_ invoke__">comment</span>(<span class="string">&#x27;This column is used for indexing.&#x27;</span>)   </span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/Zubairmohsin33/status/1442345998790107137">@Zubairmohsin33</a>提供</p><h3 id="表名表字段检测"><a href="#表名表字段检测" class="headerlink" title="表名表字段检测"></a>表名表字段检测</h3><p>你可以使用 <code>hasTable</code> 和 <code>hasColumn</code> 方法检测表或字段是否存在。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title class_">Schema</span>::<span class="title function_ invoke__">hasTable</span>(<span class="string">&#x27;users&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// The &quot;users&quot; table exists...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Schema</span>::<span class="title function_ invoke__">hasColumn</span>(<span class="string">&#x27;users&#x27;</span>, <span class="string">&#x27;email&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">// The &quot;users&quot; table exists and has an &quot;email&quot; column...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <a href="https://github.com/dipeshsukhia">@dipeshsukhia</a>提供</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="laravel" scheme="http://example.com/categories/laravel/"/>
    
    
    <category term="laravel" scheme="http://example.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>数据库模型与 Eloquent</title>
    <link href="http://example.com/2024/03/07/laravel/DB_Models_and_Eloquent/"/>
    <id>http://example.com/2024/03/07/laravel/DB_Models_and_Eloquent/</id>
    <published>2024-03-07T09:34:16.874Z</published>
    <updated>2024-03-07T09:39:55.161Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="数据库模型与-Eloquent"><a href="#数据库模型与-Eloquent" class="headerlink" title="数据库模型与 Eloquent"></a>数据库模型与 Eloquent</h2><p>⬆️ <a href="../README-zh.md">回到顶部</a> ➡️ <a href="./Models_Relations.md">下一个 (模型关联)</a></p><ol><li><a href="#%E5%A4%8D%E7%94%A8%E6%88%96%E5%85%8B%E9%9A%86query">复用或克隆query</a></li><li><a href="#Eloquent-where%E6%97%A5%E6%9C%9F%E6%96%B9%E6%B3%95">Eloquent where 日期方法</a></li><li><a href="#%E5%A2%9E%E9%87%8F%E5%92%8C%E5%87%8F%E9%87%8F">增量和减量</a></li><li><a href="#%E7%A6%81%E6%AD%A2-timestamp-%E5%88%97">禁止 timestamp 列</a></li><li><a href="#%E8%BD%AF%E5%88%A0%E9%99%A4-%E5%A4%9A%E8%A1%8C%E6%81%A2%E5%A4%8D">软删除: 多行恢复</a></li><li><a href="#Model-all-columns">Model all: columns</a></li><li><a href="#To-Fail-or-not-to-Fail">To Fail or not to Fail</a></li><li><a href="#%E5%88%97%E5%90%8D%E4%BF%AE%E6%94%B9">列名修改</a></li><li><a href="#%E8%BF%87%E6%BB%A4%E7%BB%93%E6%9E%9C%E9%9B%86%E5%90%88">过滤结果集合</a></li><li><a href="#%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%9A%84-Timestamp-%E5%AD%97%E6%AE%B5">修改默认的Timestamp 字段</a></li><li><a href="#%E6%8C%89%E7%85%A7created_at%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F">按照created_at快速排序</a></li><li><a href="#%E5%BD%93%E5%88%9B%E5%BB%BA%E8%AE%B0%E5%BD%95%E6%97%B6%E8%87%AA%E5%8A%A8%E4%BF%AE%E6%94%B9%E6%9F%90%E4%BA%9B%E5%88%97%E7%9A%84%E5%80%BC">当创建记录时自动修改某些列的值</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E5%A7%8B%E6%9F%A5%E8%AF%A2%E8%AE%A1%E7%AE%97%E8%BF%90%E8%A1%8C%E5%BE%97%E6%9B%B4%E5%BF%AB">数据库原始查询计算运行得更快</a></li><li><a href="#%E4%B8%8D%E6%AD%A2%E4%B8%80%E4%B8%AA%E8%8C%83%E5%9B%B4">不止一个范围</a></li><li><a href="#%E6%97%A0%E9%9C%80%E8%BD%AC%E6%8D%A2-Carbon">无需转换 Carbon</a></li><li><a href="#%E6%A0%B9%E6%8D%AE%E9%A6%96%E5%AD%97%E6%AF%8D%E5%88%86%E7%BB%84">根据首字母分组</a></li><li><a href="#%E6%B0%B8%E4%B8%8D%E6%9B%B4%E6%96%B0%E6%9F%90%E4%B8%AA%E5%AD%97%E6%AE%B5">永不更新某个字段</a></li><li><a href="#find-()-%E6%9F%A5%E8%AF%A2%E5%A4%9A%E6%9D%A1%E6%95%B0%E6%8D%AE">find () 查询多条数据</a></li><li><a href="#find%E5%A4%9A%E4%B8%AA%E6%A8%A1%E5%9E%8B%E5%B9%B6%E8%BF%94%E5%9B%9E%E5%A4%9A%E5%88%97">find多个模型并返回多列</a></li><li><a href="#%E6%8C%89%E7%85%A7%E9%94%AE%E6%9F%A5%E6%89%BE">按照键查找</a></li><li><a href="#%E4%BD%BF%E7%94%A8UUID%E6%9B%BF%E6%8D%A2auto-increment">使用UUID替换auto-increment</a></li><li><a href="#Laravel-%E4%B8%AD%E7%9A%84%E5%AD%90%E6%9F%A5%E8%AF%A2">Laravel 中的子查询</a></li><li><a href="#%E9%9A%90%E8%97%8F%E6%9F%90%E4%BA%9B%E5%88%97">隐藏某些列</a></li><li><a href="#%E7%A1%AE%E5%AE%9ADB%E6%8A%A5%E9%94%99">确定DB报错</a></li><li><a href="#%E8%BD%AF%E5%88%A0%E9%99%A4%E4%B8%8E%E6%9F%A5%E8%AF%A2%E6%9E%84%E9%80%A0%E5%99%A8">软删除与查询构造器</a></li><li><a href="#SQL%E5%A3%B0%E6%98%8E">SQL声明</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1">数据库事务</a></li><li><a href="#%E6%9B%B4%E6%96%B0%E6%88%96%E5%88%9B%E5%BB%BA">更新或创建</a></li><li><a href="#%E4%BF%9D%E5%AD%98%E6%97%B6%E7%A7%BB%E9%99%A4%E7%BC%93%E5%AD%98">保存时移除缓存</a></li><li><a href="#%E4%BF%AE%E6%94%B9Created_at%E5%92%8CUpdated_at%E7%9A%84%E6%A0%BC%E5%BC%8F">修改Created_at和Updated_at的格式</a></li><li><a href="#%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%82%A8%E5%88%B0-JSON-%E4%B8%AD">数组类型存储到 JSON 中</a></li><li><a href="#%E5%A4%8D%E5%88%B6%E4%B8%80%E4%B8%AA%E6%A8%A1%E5%9E%8B">复制一个模型</a></li><li><a href="#%E9%99%8D%E4%BD%8E%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8">降低内存占用</a></li><li><a href="#%E5%BF%BD%E7%95%A5-$fillable/$guarded-%E5%B9%B6%E5%BC%BA%E5%88%B6%E6%89%A7%E8%A1%8C">忽略 $fillable&#x2F;$guarded 并强制执行</a></li><li><a href="#3%E5%B1%82%E7%88%B6%E5%AD%90%E7%BA%A7%E7%BB%93%E6%9E%84">3层父子级结构</a></li><li><a href="#%E4%BD%BF%E7%94%A8-find()-%E6%9D%A5%E6%90%9C%E7%B4%A2%E6%9B%B4%E5%A4%9A%E7%9A%84%E8%AE%B0%E5%BD%95">使用 find() 来搜索更多的记录</a></li><li><a href="#%E5%A4%B1%E8%B4%A5%E6%97%B6%E6%89%A7%E8%A1%8C%E4%BB%BB%E4%BD%95%E6%93%8D%E4%BD%9C">失败时执行任何操作</a></li><li><a href="#%E6%A3%80%E6%9F%A5%E8%AE%B0%E5%BD%95%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E5%90%A6%E5%88%99%E6%98%BE%E7%A4%BA-404">检查记录是否存在否则显示 404</a></li><li><a href="#%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5%E4%B8%BA%E5%90%A6%E6%97%B6%E4%B8%AD%E6%AD%A2">条件语句为否时中止</a></li><li><a href="#%E5%9C%A8%E5%88%A0%E9%99%A4%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%89%8D%E6%89%A7%E8%A1%8C%E4%BB%BB%E4%BD%95%E9%A2%9D%E5%A4%96%E7%9A%84%E6%93%8D%E4%BD%9C">在删除模型之前执行任何额外的操作</a></li><li><a href="#%E5%BD%93%E4%BD%A0%E9%9C%80%E8%A6%81%E5%9C%A8%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%B6%E8%87%AA%E5%8A%A8%E5%A1%AB%E5%85%85%E4%B8%80%E4%B8%AA%E5%AD%97%E6%AE%B5">当你需要在保存数据到数据库时自动填充一个字段</a></li><li><a href="#%E8%8E%B7%E5%8F%96%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E7%9A%84%E9%A2%9D%E5%A4%96%E4%BF%A1%E6%81%AF">获取查询语句的额外信息</a></li><li><a href="#%E5%9C%A8-Laravel-%E4%B8%AD%E4%BD%BF%E7%94%A8doesntExist()%E6%96%B9%E6%B3%95">在 Laravel 中使用doesntExist()方法</a></li><li><a href="#%E5%9C%A8%E4%B8%80%E4%BA%9B%E6%A8%A1%E5%9E%8B%E7%9A%84-boot-()-%E6%96%B9%E6%B3%95%E4%B8%AD%E8%87%AA%E5%8A%A8%E8%B0%83%E7%94%A8%E4%B8%80%E4%B8%AA%E7%89%B9%E6%80%A7">在一些模型的 boot () 方法中自动调用一个特性</a></li><li><a href="#%E5%9C%A8-Laravel-%E4%B8%AD%E6%9C%89%E4%B8%A4%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E6%96%B9%E6%B3%95%E6%9D%A5%E7%A1%AE%E5%AE%9A%E4%B8%80%E4%B8%AA%E8%A1%A8%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA%E8%A1%A8">在 Laravel 中有两种常见的方法来确定一个表是否为空表</a></li><li><a href="#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D-property-of-non-object-%E9%94%99%E8%AF%AF">如何避免 property of non-object 错误</a></li><li><a href="#Eloquent-%E6%95%B0%E6%8D%AE%E6%94%B9%E5%8F%98%E5%90%8E%E8%8E%B7%E5%8F%96%E5%8E%9F%E5%A7%8B%E6%95%B0%E6%8D%AE">Eloquent 数据改变后获取原始数据</a></li><li><a href="#%E4%B8%80%E7%A7%8D%E6%9B%B4%E7%AE%80%E5%8D%95%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95">一种更简单创建数据库的方法</a></li><li><a href="#Query%E6%9E%84%E9%80%A0%E5%99%A8%E7%9A%84crossJoinSub%E6%96%B9%E6%B3%95">Query构造器的crossJoinSub方法</a></li><li><a href="#belongsToMany%E7%9A%84%E4%B8%AD%E9%97%B4%E8%A1%A8%E5%91%BD%E5%90%8D">belongsToMany的中间表命名</a></li><li><a href="#%E6%A0%B9%E6%8D%AEPivot%E5%AD%97%E6%AE%B5%E6%8E%92%E5%BA%8F">根据Pivot字段排序</a></li><li><a href="#%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E6%9F%A5%E8%AF%A2%E4%B8%80%E6%9D%A1%E8%AE%B0%E5%BD%95">从数据库中查询一条记录</a></li><li><a href="#%E8%AE%B0%E5%BD%95%E8%87%AA%E5%8A%A8%E5%88%86%E5%9D%97">记录自动分块</a></li><li><a href="#%E5%AE%9A%E6%97%B6%E6%B8%85%E7%90%86%E8%BF%87%E6%9C%9F%E8%AE%B0%E5%BD%95%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9E%8B">定时清理过期记录中的模型</a></li><li><a href="#%E4%B8%8D%E5%8F%98%E7%9A%84%E6%97%A5%E6%9C%9F%E5%92%8C%E5%AF%B9%E5%AE%83%E4%BB%AC%E7%9A%84%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2">不变的日期和对它们的强制转换</a></li><li><a href="#findorfail%E6%96%B9%E6%B3%95%E4%B9%9F%E6%8E%A5%E6%94%B6ids%E6%95%B0%E7%BB%84">findorfail方法也接收ids数组</a></li><li><a href="#%E4%BB%8E%E4%BD%A0%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E8%87%AA%E5%8A%A8%E7%A7%BB%E9%99%A4%E6%A8%A1%E5%9E%8BprunableTrait">从你的数据库中自动移除模型prunableTrait</a></li><li><a href="#%E6%97%A5%E6%9C%9F%E8%BD%AC%E6%8D%A2">日期转换</a></li><li><a href="#%E5%A4%9A%E6%A8%A1%E5%9E%8B%E6%9B%B4%E6%96%B0%E6%8F%92%E5%85%A5">多模型更新&#x2F;插入</a></li><li><a href="#%E8%BF%87%E6%BB%A4%E7%BB%93%E6%9E%9C%E9%9B%86%E4%B9%8B%E5%90%8E%E8%8E%B7%E5%8F%96%E6%9F%A5%E8%AF%A2%E6%9E%84%E9%80%A0%E5%99%A8">过滤结果集之后获取查询构造器</a></li><li><a href="#%E9%80%89%E6%8B%A9%E8%81%9A%E5%90%88%E8%AE%A1%E7%AE%97%E7%9B%B8%E5%85%B3%E6%A8%A1%E5%9E%8B">选择聚合计算相关模型</a></li><li><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2">自定义强制转换</a></li><li><a href="#%E4%BF%9D%E5%AD%98%E4%B8%AD%E4%B8%8D%E8%A6%81%E8%A7%A6%E5%8F%91%E4%BA%8B%E4%BB%B6">保存中不要触发事件</a></li><li><a href="#%E5%9F%BA%E4%BA%8E%E7%9B%B8%E5%85%B3%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%B9%B3%E5%9D%87%E5%80%BC%E6%88%96%E6%80%BB%E6%95%B0%E6%8E%92%E5%BA%8F">基于相关模型的平均值或总数排序</a></li><li><a href="#%E8%BF%94%E5%9B%9E%E4%BA%8B%E5%8A%A1%E7%BB%93%E6%9E%9C">返回事务结果</a></li><li><a href="#%E4%BB%8Equery%E4%B8%AD%E7%A7%BB%E9%99%A4%E5%A4%9A%E4%B8%AA%E5%85%AC%E5%85%B1scope">从query中移除多个公共scope</a></li><li><a href="#JSON%E5%88%97%E5%B1%9E%E6%80%A7%E6%8E%92%E5%BA%8F">JSON列属性排序</a></li><li><a href="#%E4%BB%8E%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BB%93%E6%9E%9C%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%8D%95%E5%88%97%E7%9A%84%E5%80%BC">从第一个结果中获取单列的值</a></li><li><a href="#%E6%A3%80%E6%B5%8B%E6%A8%A1%E5%9E%8B%E5%B1%9E%E6%80%A7%E6%98%AF%E5%90%A6%E8%A2%AB%E4%BF%AE%E6%94%B9">检测模型属性是否被修改</a></li><li><a href="#%E5%AE%9A%E4%B9%89%E8%AE%BF%E9%97%AE%E5%99%A8%E4%B8%8E%E4%BF%AE%E6%94%B9%E5%99%A8%E7%9A%84%E6%96%B0%E6%96%B9%E6%B3%95">定义访问器与修改器的新方法</a></li><li><a href="#%E5%8F%A6%E5%A4%96%E4%B8%80%E7%A7%8D%E5%AE%9A%E4%B9%89%E8%AE%BF%E9%97%AE%E5%99%A8%E4%B8%8E%E4%BF%AE%E6%94%B9%E5%99%A8%E7%9A%84%E6%96%B9%E6%B3%95">另外一种定义访问器与修改器的方法</a></li></ol><h3 id="复用或克隆query"><a href="#复用或克隆query" class="headerlink" title="复用或克隆query"></a>复用或克隆query</h3><p>通常，我们需要从过滤后的查询中进行更多次查询。因此，大多数时候我们使用 query() 方法，<br>让我们编写一个查询来获取今天创建的可用和不可用的产品</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$query</span> = <span class="title class_">Product</span>::<span class="title function_ invoke__">query</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$today</span> = <span class="title function_ invoke__">request</span>()-&gt;q_date ?? <span class="title function_ invoke__">today</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$today</span>)&#123;</span><br><span class="line">    <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;created_at&#x27;</span>, <span class="variable">$today</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让我们获取可用和不可用的产品</span></span><br><span class="line"><span class="variable">$active_products</span> = <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;status&#x27;</span>, <span class="number">1</span>)-&gt;<span class="title function_ invoke__">get</span>(); <span class="comment">// 这一行 修改了$query 对象变量</span></span><br><span class="line"><span class="variable">$inactive_products</span> = <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;status&#x27;</span>, <span class="number">0</span>)-&gt;<span class="title function_ invoke__">get</span>(); <span class="comment">// 所以这里我们将获取不到任何不可用产品</span></span><br></pre></td></tr></table></figure><p>但是，在获得 <code>$active products</code> 后，<code>$query</code> 会被修改。因此 <code>$inactive_products</code> 不会从 <code>$query</code> 中获取到不可用产品，并且每次都返回空集合。因为，它尝试从 <code>$active_products</code> 中查找不可用产品（<code>$query</code> 仅返回可用产品）。</p><p>为了解决这个问题,我们可以通过重用这个<code>$query</code>对象来查询多次。因此我们在做任何对<code>$query</code>修改操作的时候需要克隆这个<code>$query</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$active_products</span> = (<span class="keyword">clone</span> <span class="variable">$query</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;status&#x27;</span>, <span class="number">1</span>)-&gt;<span class="title function_ invoke__">get</span>(); <span class="comment">// it will not modify the $query</span></span><br><span class="line"><span class="variable">$inactive_products</span> = (<span class="keyword">clone</span> <span class="variable">$query</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;status&#x27;</span>, <span class="number">0</span>)-&gt;<span class="title function_ invoke__">get</span>(); <span class="comment">// so we will get inactive products from $query</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Eloquent-where日期方法"><a href="#Eloquent-where日期方法" class="headerlink" title="Eloquent where日期方法"></a>Eloquent where日期方法</h3><p>在 Eloquent 中，使用 <code>whereDay()</code>、<code>whereMonth()</code>、<code>whereYear()</code>、<code>whereDate()</code> 和 <code>whereTime()</code> 函数检查日期。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$products</span> = <span class="title class_">Product</span>::<span class="title function_ invoke__">whereDate</span>(<span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;2018-01-31&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line"><span class="variable">$products</span> = <span class="title class_">Product</span>::<span class="title function_ invoke__">whereMonth</span>(<span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;12&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line"><span class="variable">$products</span> = <span class="title class_">Product</span>::<span class="title function_ invoke__">whereDay</span>(<span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;31&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line"><span class="variable">$products</span> = <span class="title class_">Product</span>::<span class="title function_ invoke__">whereYear</span>(<span class="string">&#x27;created_at&#x27;</span>, <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y&#x27;</span>))-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line"><span class="variable">$products</span> = <span class="title class_">Product</span>::<span class="title function_ invoke__">whereTime</span>(<span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;14:13:58&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></table></figure><h3 id="增量和减量"><a href="#增量和减量" class="headerlink" title="增量和减量"></a>增量和减量</h3><p>如果要增加数据库某个表中的某个列的值，只需要使用 <code>increment()</code> 函数。你不仅可以增加 1，还可以增加其他数字，如 50。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Post</span>::<span class="title function_ invoke__">find</span>(<span class="variable">$post_id</span>)-&gt;<span class="title function_ invoke__">increment</span>(<span class="string">&#x27;view_count&#x27;</span>);</span><br><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">find</span>(<span class="variable">$user_id</span>)-&gt;<span class="title function_ invoke__">increment</span>(<span class="string">&#x27;points&#x27;</span>, <span class="number">50</span>);</span><br></pre></td></tr></table></figure><h3 id="禁止-timestamp-列"><a href="#禁止-timestamp-列" class="headerlink" title="禁止 timestamp 列"></a>禁止 timestamp 列</h3><p>如果你的数据库表不包含 timestamp 字段 <code>created_at</code> 和 <code>updated_at</code>，你可以使用 <code>$timestamps = false</code> 属性指定 Eloquent 模型不使用它们。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Company</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$timestamps</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="软删除-多行恢复"><a href="#软删除-多行恢复" class="headerlink" title="软删除-多行恢复"></a>软删除-多行恢复</h3><p>使用软删除时，可以在一个句子中恢复多行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Post</span>::<span class="title function_ invoke__">onlyTrashed</span>()-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;author_id&#x27;</span>, <span class="number">1</span>)-&gt;<span class="title function_ invoke__">restore</span>();</span><br></pre></td></tr></table></figure><h3 id="Model-all-columns"><a href="#Model-all-columns" class="headerlink" title="Model all-columns"></a>Model all-columns</h3><p>当调用Eloquent’s <code>Model::all()</code>时你可以指定返回哪些列。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">all</span>([<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;email&#x27;</span>]);</span><br></pre></td></tr></table></figure><h3 id="To-Fail-or-not-to-Fail"><a href="#To-Fail-or-not-to-Fail" class="headerlink" title="To Fail or not to Fail"></a>To Fail or not to Fail</h3><p>除了 <code>findOrFail()</code> 之外，还有 Eloquent 方法 <code>firstOrFail()</code>，如果没有找到查询记录，它将返回 <code>404</code> 页面。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">where</span>(<span class="string">&#x27;email&#x27;</span>, <span class="string">&#x27;povilas@laraveldaily.com&#x27;</span>)-&gt;<span class="title function_ invoke__">firstOrFail</span>();</span><br></pre></td></tr></table></figure><h3 id="列名修改"><a href="#列名修改" class="headerlink" title="列名修改"></a>列名修改</h3><p>在 <code>Eloquent Query Builder</code> 中，您可以像在普通 SQL 查询中一样指定<code>as</code>以返回任何列的别名。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = DB::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;users&#x27;</span>)-&gt;<span class="title function_ invoke__">select</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;email as user_email&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></table></figure><h3 id="过滤结果集合"><a href="#过滤结果集合" class="headerlink" title="过滤结果集合"></a>过滤结果集合</h3><p>在 <code>Eloquent</code> 查询到结果之后，您可以使用 Collections 中的 <code>map()</code> 函数来修改行数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">where</span>(<span class="string">&#x27;role_id&#x27;</span>, <span class="number">1</span>)-&gt;<span class="title function_ invoke__">get</span>()-&gt;<span class="title function_ invoke__">map</span>(function (User <span class="variable">$user</span>) &#123;</span><br><span class="line">    <span class="variable">$user</span>-&gt;some_column = <span class="title function_ invoke__">some_function</span>(<span class="variable">$user</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$user</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="修改默认的Timestamp-字段"><a href="#修改默认的Timestamp-字段" class="headerlink" title="修改默认的Timestamp 字段"></a>修改默认的Timestamp 字段</h3><p>如果您使用的是非 <code>Laravel</code> 数据库并且时间戳列的名称不同怎么办？也许，你有 <code>create_time</code> 和 <code>update_time</code>。 幸运的是，您也可以在模型中指定它们：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Role</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">CREATED_AT</span> = <span class="string">&#x27;create_time&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">UPDATED_AT</span> = <span class="string">&#x27;update_time&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="按照created-at快速排序"><a href="#按照created-at快速排序" class="headerlink" title="按照created_at快速排序"></a>按照created_at快速排序</h3><p>不用:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">orderBy</span>(<span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></table></figure><p>你可以更快的使用排序:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">latest</span>()-&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></table></figure><p>默认情况下 <code>latest()</code> 将按照 <code>created_at</code>排序。</p><p>有一个相反的方法 <code>oldest()</code>，按 created_at 升序排序：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">oldest</span>()-&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></table></figure><p>您也可以指定另一列进行排序。 例如，如果你想使用 <code>updated_at</code>，你可以这样做：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$lastUpdatedUser</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">latest</span>(<span class="string">&#x27;updated_at&#x27;</span>)-&gt;<span class="title function_ invoke__">first</span>();</span><br></pre></td></tr></table></figure><h3 id="当创建记录时自动修改某些列的值"><a href="#当创建记录时自动修改某些列的值" class="headerlink" title="当创建记录时自动修改某些列的值"></a>当创建记录时自动修改某些列的值</h3><p>如果您想在创建记录时生成一些 DB 列值，请将其添加到模型的 boot() 方法中。<br>例如，如果您有一个字段 「position」，并且想要赋值下一个可用位置（如 Country::max(‘position’) + 1)，请执行以下操作：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Country</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">boot</span>();</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Country</span>::<span class="title function_ invoke__">creating</span>(function(<span class="variable">$model</span>) &#123;</span><br><span class="line">            <span class="variable">$model</span>-&gt;position = <span class="title class_">Country</span>::<span class="title function_ invoke__">max</span>(<span class="string">&#x27;position&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据库原始查询计算运行得更快"><a href="#数据库原始查询计算运行得更快" class="headerlink" title="数据库原始查询计算运行得更快"></a>数据库原始查询计算运行得更快</h3><p>使用类似 <code>whereRaw()</code> 方法的 SQL 原始查询，直接在查询中进行一些数据库特定计算，而不是在 Laravel 中，通常情况下结果会更快。 例如，如果您想获得注册后 30 天以上仍处于活跃状态的用户，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">where</span>(<span class="string">&#x27;active&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">whereRaw</span>(<span class="string">&#x27;TIMESTAMPDIFF(DAY, created_at, updated_at) &gt; ?&#x27;</span>, <span class="number">30</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></table></figure><h3 id="不止一个范围"><a href="#不止一个范围" class="headerlink" title="不止一个范围"></a>不止一个范围</h3><p>您可以在 Eloquent 中组合和链式调用查询范围，在一个<code>query</code>查询中使用多个范围。</p><p>Model文件内:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scopeActive</span>(<span class="params"><span class="variable">$query</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;active&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">scopeRegisteredWithinDays</span>(<span class="params"><span class="variable">$query</span>, <span class="variable">$days</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;&gt;=&#x27;</span>, <span class="title function_ invoke__">now</span>()-&gt;<span class="title function_ invoke__">subDays</span>(<span class="variable">$days</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制器内:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">registeredWithinDays</span>(<span class="number">30</span>)-&gt;<span class="title function_ invoke__">active</span>()-&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></table></figure><h3 id="无需转换-Carbon"><a href="#无需转换-Carbon" class="headerlink" title="无需转换 Carbon"></a>无需转换 Carbon</h3><p>如果你正使用 <code>whereDate()</code> 查询今日的记录，可以直接使用 <code>Carbon</code> 的 <code>now()</code> 方法，它会自动转换为日期进行查询，而不需要指定 -&gt;toDateString()。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不用</span></span><br><span class="line"><span class="variable">$todayUsers</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">whereDate</span>(<span class="string">&#x27;created_at&#x27;</span>, <span class="title function_ invoke__">now</span>()-&gt;<span class="title function_ invoke__">toDateString</span>())-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line"><span class="comment">// 不用做转换 只需要用 now()</span></span><br><span class="line"><span class="variable">$todayUsers</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">whereDate</span>(<span class="string">&#x27;created_at&#x27;</span>, <span class="title function_ invoke__">now</span>())-&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></table></figure><h3 id="根据首字母分组"><a href="#根据首字母分组" class="headerlink" title="根据首字母分组"></a>根据首字母分组</h3><p>你可以用任意自定义条件对 Eloquent 结果进行分组，下面的示例是由用户名的第一个单词进行分组:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">all</span>()-&gt;<span class="title function_ invoke__">groupBy</span>(function(<span class="variable">$item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$item</span>-&gt;name[<span class="number">0</span>];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="永不更新某个字段"><a href="#永不更新某个字段" class="headerlink" title="永不更新某个字段"></a>永不更新某个字段</h3><p>如果有一个数据库字段你想只设置一次并不想再次更新，您可以在Eloquent的模型上使用一个修改器设置该限制：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setEmailAttribute</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;email) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;attributes[<span class="string">&#x27;email&#x27;</span>] = <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="find-查询多条数据"><a href="#find-查询多条数据" class="headerlink" title="find () 查询多条数据"></a>find () 查询多条数据</h3><p><code>find()</code>方法可以接受多参数, 传入多个值时会返回所有找到记录的集合，而不是一个模型:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回 Eloquent Model</span></span><br><span class="line"><span class="variable">$user</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">find</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 返回 Eloquent Collection</span></span><br><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">find</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p>技巧来自 <a href="https://twitter.com/tahiriqbalnajam/status/1436120403655671817">@tahiriqbalnajam</a></p><h3 id="find多个模型并返回多列"><a href="#find多个模型并返回多列" class="headerlink" title="find多个模型并返回多列"></a>find多个模型并返回多列</h3><p><code>find</code>方法可接受多参数 使得结果集返回指定列的模型集合，而不是模型的所有列:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Will return Eloquent Model with first_name and email only</span></span><br><span class="line"><span class="variable">$user</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">find</span>(<span class="number">1</span>, [<span class="string">&#x27;first_name&#x27;</span>, <span class="string">&#x27;email&#x27;</span>]);</span><br><span class="line"><span class="comment">// Will return Eloquent Collection with first_name and email only</span></span><br><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">find</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="string">&#x27;first_name&#x27;</span>, <span class="string">&#x27;email&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>技巧来自 <a href="https://github.com/tahiriqbalnajam">@tahiriqbalnajam</a></p><h3 id="按照键查找"><a href="#按照键查找" class="headerlink" title="按照键查找"></a>按照键查找</h3><p>您还可以使用<code>whereKey()</code>方法根据您指定的主键查找多条记录。(默认<code>id</code>但是你可以在Eloquent 模型中覆盖掉)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">whereKey</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])-&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></table></figure><h3 id="使用UUID替换auto-increment"><a href="#使用UUID替换auto-increment" class="headerlink" title="使用UUID替换auto-increment"></a>使用UUID替换auto-increment</h3><p>您不想在模型中使用自动递增 ID？</p><p>迁移:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Schema</span>::<span class="title function_ invoke__">create</span>(<span class="string">&#x27;users&#x27;</span>, function (Blueprint <span class="variable">$table</span>) &#123;</span><br><span class="line">    <span class="comment">// $table-&gt;increments(&#x27;id&#x27;);</span></span><br><span class="line">    <span class="variable">$table</span>-&gt;<span class="title function_ invoke__">uuid</span>(<span class="string">&#x27;id&#x27;</span>)-&gt;<span class="title function_ invoke__">unique</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>模型:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$incrementing</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$keyType</span> = <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">boot</span>();</span><br><span class="line"></span><br><span class="line">        <span class="title class_">User</span>::<span class="title function_ invoke__">creating</span>(function (<span class="variable">$model</span>) &#123;</span><br><span class="line">            <span class="variable">$model</span>-&gt;<span class="title function_ invoke__">setId</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setId</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;attributes[<span class="string">&#x27;id&#x27;</span>] = <span class="title class_">Str</span>::<span class="title function_ invoke__">uuid</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Laravel-中的子查询"><a href="#Laravel-中的子查询" class="headerlink" title="Laravel 中的子查询"></a>Laravel 中的子查询</h3><p>从 Laravel 6 开始，您可以在 Eloquent 语句中使用 <code>addSelect()</code>方法，对列进行一些计算。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title class_">Destination</span>::<span class="title function_ invoke__">addSelect</span>([<span class="string">&#x27;last_flight&#x27;</span> =&gt; <span class="title class_">Flight</span>::<span class="title function_ invoke__">select</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">whereColumn</span>(<span class="string">&#x27;destination_id&#x27;</span>, <span class="string">&#x27;destinations.id&#x27;</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">orderBy</span>(<span class="string">&#x27;arrived_at&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">limit</span>(<span class="number">1</span>)</span><br><span class="line">])-&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></table></figure><h3 id="隐藏某些列"><a href="#隐藏某些列" class="headerlink" title="隐藏某些列"></a>隐藏某些列</h3><p>在进行 Eloquent 查询时，如果您想在返回中隐藏特定字段，最快捷的方法之一是在集合结果上添加 <code>-&gt;makeHidden()</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">all</span>()-&gt;<span class="title function_ invoke__">makeHidden</span>([<span class="string">&#x27;email_verified_at&#x27;</span>, <span class="string">&#x27;deleted_at&#x27;</span>]);</span><br></pre></td></tr></table></figure><h3 id="确定DB报错"><a href="#确定DB报错" class="headerlink" title="确定DB报错"></a>确定DB报错</h3><p>如果您想捕获 Eloquent Query 异常，请使用特定的 <code>QueryException</code> 代替默认的 <code>Exception</code> 类，您将能够获得SQL确切的错误代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Some Eloquent/SQL statement</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (\Illuminate\Database\QueryException <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getCode</span>() === <span class="string">&#x27;23000&#x27;</span>) &#123; <span class="comment">// integrity constraint violation</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">back</span>()-&gt;<span class="title function_ invoke__">withError</span>(<span class="string">&#x27;Invalid data&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="软删除与查询构造器"><a href="#软删除与查询构造器" class="headerlink" title="软删除与查询构造器"></a>软删除与查询构造器</h3><p>注意 当你用到 <code>Eloquent</code>时 软删除将会起作用，但是查询构造器不行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将排除软删除的条目</span></span><br><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">all</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将不会排除软删除的条目</span></span><br><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">withTrashed</span>()-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将不会排除软删除的条目</span></span><br><span class="line"><span class="variable">$users</span> = DB::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;users&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></table></figure><h3 id="SQL声明"><a href="#SQL声明" class="headerlink" title="SQL声明"></a>SQL声明</h3><p>如果你需要执行一个简单的 SQL 查询，但没有方案 —— 比如改变数据库模式中的某些东西，只需执行 DB::statement()。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DB::<span class="title function_ invoke__">statement</span>(<span class="string">&#x27;DROP TABLE users&#x27;</span>);</span><br><span class="line">DB::<span class="title function_ invoke__">statement</span>(<span class="string">&#x27;ALTER TABLE projects AUTO_INCREMENT=123&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h3><p>如果您执行了两个数据库操作，第二个可能会出错，那么您应该回滚第一个，对吗？<br>为此，我建议使用 DB Transactions，它在 Laravel 中非常简单：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DB::<span class="title function_ invoke__">transaction</span>(function () &#123;</span><br><span class="line">    DB::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;users&#x27;</span>)-&gt;<span class="title function_ invoke__">update</span>([<span class="string">&#x27;votes&#x27;</span> =&gt; <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    DB::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;posts&#x27;</span>)-&gt;<span class="title function_ invoke__">delete</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="更新或创建"><a href="#更新或创建" class="headerlink" title="更新或创建"></a>更新或创建</h3><p>如果你需要检查记录是否存在，然后更新它，或者创建一个新记录，你可以用一句话来完成 - 使用 Eloquent updateOrCreate() 方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Instead of this</span></span><br><span class="line"><span class="variable">$flight</span> = <span class="title class_">Flight</span>::<span class="title function_ invoke__">where</span>(<span class="string">&#x27;departure&#x27;</span>, <span class="string">&#x27;Oakland&#x27;</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;destination&#x27;</span>, <span class="string">&#x27;San Diego&#x27;</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">first</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$flight</span>) &#123;</span><br><span class="line">    <span class="variable">$flight</span>-&gt;<span class="title function_ invoke__">update</span>([<span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">99</span>, <span class="string">&#x27;discounted&#x27;</span> =&gt; <span class="number">1</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$flight</span> = <span class="title class_">Flight</span>::<span class="title function_ invoke__">create</span>([</span><br><span class="line">    <span class="string">&#x27;departure&#x27;</span> =&gt; <span class="string">&#x27;Oakland&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;destination&#x27;</span> =&gt; <span class="string">&#x27;San Diego&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">99</span>,</span><br><span class="line">    <span class="string">&#x27;discounted&#x27;</span> =&gt; <span class="number">1</span></span><br><span class="line">]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Do it in ONE sentence</span></span><br><span class="line"><span class="variable">$flight</span> = <span class="title class_">Flight</span>::<span class="title function_ invoke__">updateOrCreate</span>(</span><br><span class="line">    [<span class="string">&#x27;departure&#x27;</span> =&gt; <span class="string">&#x27;Oakland&#x27;</span>, <span class="string">&#x27;destination&#x27;</span> =&gt; <span class="string">&#x27;San Diego&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">99</span>, <span class="string">&#x27;discounted&#x27;</span> =&gt; <span class="number">1</span>]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="保存时移除缓存"><a href="#保存时移除缓存" class="headerlink" title="保存时移除缓存"></a>保存时移除缓存</h3><p>由 <a href="https://github.com/pratiksh404">@pratiksh404</a>提供</p><p>如果您缓存了一个键存储了 <code>posts</code> 这个集合，想在新增或更新时移除缓存键，可以在您的模型上调用静态的 saved 函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// Forget cache key on storing or updating</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>::<span class="title function_ invoke__">boot</span>();</span><br><span class="line">        <span class="built_in">static</span>::<span class="title function_ invoke__">saved</span>(function () &#123;</span><br><span class="line">           <span class="title class_">Cache</span>::<span class="title function_ invoke__">forget</span>(<span class="string">&#x27;posts&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改Created-at和Updated-at的格式"><a href="#修改Created-at和Updated-at的格式" class="headerlink" title="修改Created_at和Updated_at的格式"></a>修改Created_at和Updated_at的格式</h3><p>由<a href="https://github.com/syofyanzuhad">@syofyanzuhad</a>提供</p><p>想要改变 <code>created_at</code>的格式，您可以在模型中添加一个方法，如下所示:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCreatedAtFormattedAttribute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;created_at-&gt;<span class="title function_ invoke__">format</span>(<span class="string">&#x27;H:i d, M Y&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以在需要改变时间格式时使用 <code>$entry-&gt;created_at_formatted</code> ，它会返回 <code>created_at</code> 的属性如同 <code>04:19 23, Aug 2020</code>。</p><p>你也可以用同样的方法更改 <code>updated_at</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getUpdatedAtFormattedAttribute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;updated_at-&gt;<span class="title function_ invoke__">format</span>(<span class="string">&#x27;H:i d, M Y&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在有需要的时候使用 <code>$entry-&gt;updated_at_formatted</code>。它会返回 <code>updated_at</code> 的属性如同: <code>04:19 23, Aug 2020</code> 。</p><h3 id="数组类型存储到-JSON-中"><a href="#数组类型存储到-JSON-中" class="headerlink" title="数组类型存储到 JSON 中"></a>数组类型存储到 JSON 中</h3><p>由<a href="https://github.com/pratiksh404">@pratiksh404</a>提供</p><p>如果你的输入字段有一个数组需要存储为 JSON 格式，你可以在模型中使用 <code>$casts</code> 属性。 这里的 <code>images</code> 是 JSON 属性</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="variable">$casts</span> = [</span><br><span class="line">    <span class="string">&#x27;images&#x27;</span> =&gt; <span class="string">&#x27;array&#x27;</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>这样你可以以 JSON 格式存储它，但当你从 DB 中读取时，它会以数组方式使用。</p><h3 id="复制一个模型"><a href="#复制一个模型" class="headerlink" title="复制一个模型"></a>复制一个模型</h3><p>如果你有两个非常相似的模型（比如送货地址和账单地址），而且你想要复制其中一个作为另一个，你可以使用 replicate() 方法并更改一部分属性。</p><p><a href="https://laravel.com/docs/8.x/eloquent#replicating-models">官方文档的示例</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$shipping</span> = <span class="title class_">Address</span>::<span class="title function_ invoke__">create</span>([</span><br><span class="line">    <span class="string">&#x27;type&#x27;</span> =&gt; <span class="string">&#x27;shipping&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;line_1&#x27;</span> =&gt; <span class="string">&#x27;123 Example Street&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;city&#x27;</span> =&gt; <span class="string">&#x27;Victorville&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;state&#x27;</span> =&gt; <span class="string">&#x27;CA&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;postcode&#x27;</span> =&gt; <span class="string">&#x27;90001&#x27;</span>,</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$billing</span> = <span class="variable">$shipping</span>-&gt;<span class="title function_ invoke__">replicate</span>()-&gt;<span class="title function_ invoke__">fill</span>([</span><br><span class="line">    <span class="string">&#x27;type&#x27;</span> =&gt; <span class="string">&#x27;billing&#x27;</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$billing</span>-&gt;<span class="title function_ invoke__">save</span>();</span><br></pre></td></tr></table></figure><h3 id="降低内存占用"><a href="#降低内存占用" class="headerlink" title="降低内存占用"></a>降低内存占用</h3><p>有时我们需要将大量的数据加载到内存中，比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$orders</span> = <span class="title class_">Order</span>::<span class="title function_ invoke__">all</span>();</span><br></pre></td></tr></table></figure><p>但如果我们有非常庞大的数据库，这可能会很慢，因为 <code>Laravel </code> 会准备好模型类的对象。在这种情况下，<code>Laravel </code>有一个很方便的函数 <code>toBase()</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$orders</span> = <span class="title class_">Order</span>::<span class="title function_ invoke__">toBase</span>()-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line"><span class="comment">//$orders 将是一个由`StdClass`组成的 `Illuminate\Support\Collection`</span></span><br></pre></td></tr></table></figure><p>通过调用这个方法，它将从数据库中获取数据，但它不会准备模型类。同时，向 <code>get()</code> 方法传递一个字段数组通常是个好主意，这样可以防止从数据库中获取所有字段。</p><h3 id="忽略-fillable-guarded-并强制执行"><a href="#忽略-fillable-guarded-并强制执行" class="headerlink" title="忽略 $fillable&#x2F;$guarded 并强制执行"></a>忽略 $fillable&#x2F;$guarded 并强制执行</h3><p>如果你为其他开发者创建了一个 Laravel 模板, 然后你不能控制他们以后会在模型的 $fillable&#x2F;$guarded 中填写什么，你可以使用 forceFill()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$team</span>-&gt;<span class="title function_ invoke__">update</span>([<span class="string">&#x27;name&#x27;</span> =&gt; <span class="variable">$request</span>-&gt;name])</span><br></pre></td></tr></table></figure><p>如果 name 不在<code>team</code>模型的 <code>$fillable</code> 中，怎么办？或者如果根本就没有 <code>$fillable/$guarded</code>， 怎么办？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$team</span>-&gt;<span class="title function_ invoke__">forceFill</span>([<span class="string">&#x27;name&#x27;</span> =&gt; <span class="variable">$request</span>-&gt;name])</span><br></pre></td></tr></table></figure><p>这将忽略该查询的 $fillable 并强制执行。</p><h3 id="3层父子级结构"><a href="#3层父子级结构" class="headerlink" title="3层父子级结构"></a>3层父子级结构</h3><p>If you have a 3-level structure of parent-children, like categories in an e-shop, and you want to show the number of products on the third level, you can use <code>with(&#39;yyy.yyy&#39;)</code> and then add <code>withCount()</code> as a condition</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> <span class="title">extend</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$categories</span> = <span class="title class_">Category</span>::<span class="title function_ invoke__">query</span>()</span><br><span class="line">            -&gt;<span class="title function_ invoke__">whereNull</span>(<span class="string">&#x27;category_id&#x27;</span>)</span><br><span class="line">            -&gt;<span class="title function_ invoke__">with</span>([<span class="string">&#x27;subcategories.subcategories&#x27;</span> =&gt; function(<span class="variable">$query</span>) &#123;</span><br><span class="line">                <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">withCount</span>(<span class="string">&#x27;products&#x27;</span>);</span><br><span class="line">            &#125;])-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Category</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">subcategories</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">hasMany</span>(<span class="title class_">Category</span>::<span class="variable language_">class</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">products</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">hasMany</span>(<span class="title class_">Product</span>::<span class="variable language_">class</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    @<span class="keyword">foreach</span>(<span class="variable">$categories</span> <span class="keyword">as</span> <span class="variable">$category</span>)</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &#123;&#123; <span class="variable">$category</span>-&gt;name &#125;&#125;</span><br><span class="line">            @<span class="keyword">if</span> (<span class="variable">$category</span>-&gt;subcategories)</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                @<span class="keyword">foreach</span>(<span class="variable">$category</span>-&gt;subcategories <span class="keyword">as</span> <span class="variable">$subcategory</span>)</span><br><span class="line">                    &lt;li&gt;</span><br><span class="line">                        &#123;&#123; <span class="variable">$subcategory</span>-&gt;name &#125;&#125;</span><br><span class="line">                        @<span class="keyword">if</span> (<span class="variable">$subcategory</span>-&gt;subcategories)</span><br><span class="line">                            &lt;ul&gt;</span><br><span class="line">                                @<span class="keyword">foreach</span> (<span class="variable">$subcategory</span>-&gt;subcategories <span class="keyword">as</span> <span class="variable">$subcategory</span>)</span><br><span class="line">                                    &lt;li&gt;&#123;&#123; <span class="variable">$subcategory</span>-&gt;name &#125;&#125; (&#123;&#123; <span class="variable">$subcategory</span>-&gt;product_count &#125;&#125;)&lt;/li&gt;</span><br><span class="line">                                @<span class="keyword">endforeach</span></span><br><span class="line">                            &lt;/ul&gt;</span><br><span class="line">                        @<span class="keyword">endif</span></span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                @<span class="keyword">endforeach</span></span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            @<span class="keyword">endif</span></span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    @<span class="keyword">endforeach</span>           </span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h3 id="使用-find-来搜索更多的记录"><a href="#使用-find-来搜索更多的记录" class="headerlink" title="使用 find() 来搜索更多的记录"></a>使用 find() 来搜索更多的记录</h3><p>你不仅可以用 find() 来搜索单条记录，还可以用 IDs 的集合来搜索更多的记录，方法如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title class_">Product</span>::<span class="title function_ invoke__">whereIn</span>(<span class="string">&#x27;id&#x27;</span>, <span class="variable">$this</span>-&gt;productIDs)-&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></table></figure><p>这么做:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title class_">Product</span>::<span class="title function_ invoke__">find</span>(<span class="variable">$this</span>-&gt;productIDs)</span><br></pre></td></tr></table></figure><h3 id="失败时执行任何操作"><a href="#失败时执行任何操作" class="headerlink" title="失败时执行任何操作"></a>失败时执行任何操作</h3><p>当查询一条记录时，如果没有找到，你可能想执行一些操作。除了用 -&gt;firstOrFail() 会抛出 404 之外，你可以在失败时执行任何操作，只需要使用 </p><p><code>-&gt;firstOr(function() &#123; ... &#125;)</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$model</span> = <span class="title class_">Flight</span>::<span class="title function_ invoke__">where</span>(<span class="string">&#x27;legs&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="number">3</span>)-&gt;<span class="title function_ invoke__">firstOr</span>(function () &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="检查记录是否存在否则显示-404"><a href="#检查记录是否存在否则显示-404" class="headerlink" title="检查记录是否存在否则显示 404"></a>检查记录是否存在否则显示 404</h3><p>不要使用 find() ，然后再检查记录是否存在，使用 <code>findOrFail()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$product</span> = <span class="title class_">Product</span>::<span class="title function_ invoke__">find</span>(<span class="variable">$id</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$product</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">abort</span>(<span class="number">404</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$product</span>-&gt;<span class="title function_ invoke__">update</span>(<span class="variable">$productDataArray</span>);</span><br></pre></td></tr></table></figure><p>更简单的方法:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$product</span> = <span class="title class_">Product</span>::<span class="title function_ invoke__">findOrFail</span>(<span class="variable">$id</span>); <span class="comment">// shows 404 if not found</span></span><br><span class="line"><span class="variable">$product</span>-&gt;<span class="title function_ invoke__">update</span>(<span class="variable">$productDataArray</span>);</span><br></pre></td></tr></table></figure><h3 id="条件语句为否时中止"><a href="#条件语句为否时中止" class="headerlink" title="条件语句为否时中止"></a>条件语句为否时中止</h3><p>可以使用 <code>abort_if()</code> 作为判断条件和抛出错误页面的快捷方式。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$product</span> = <span class="title class_">Product</span>::<span class="title function_ invoke__">findOrFail</span>(<span class="variable">$id</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$product</span>-&gt;user_id != <span class="title function_ invoke__">auth</span>()-&gt;<span class="title function_ invoke__">user</span>()-&gt;id)&#123;</span><br><span class="line">    <span class="title function_ invoke__">abort</span>(<span class="number">403</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更简单的方法:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* abort_if(CONDITION, ERROR_CODE) */</span></span><br><span class="line"><span class="variable">$product</span> = <span class="title class_">Product</span>::<span class="title function_ invoke__">findOrFail</span>(<span class="variable">$id</span>);</span><br><span class="line"><span class="title function_ invoke__">abort_if</span> (<span class="variable">$product</span>-&gt;user_id != <span class="title function_ invoke__">auth</span>()-&gt;<span class="title function_ invoke__">user</span>()-&gt;id, <span class="number">403</span>)</span><br></pre></td></tr></table></figure><h3 id="在删除模型之前执行任何额外的操作"><a href="#在删除模型之前执行任何额外的操作" class="headerlink" title="在删除模型之前执行任何额外的操作"></a>在删除模型之前执行任何额外的操作</h3><p>由<a href="https://github.com/back2Lobby">@back2Lobby</a>提供</p><p>我们可以使用 <code>Model::delete()</code> 执行额外的操作来覆盖原本的删除方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App\Models\User.php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//extra steps here whatever you want</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//now perform the normal deletion</span></span><br><span class="line"><span class="title class_">Model</span>::<span class="title function_ invoke__">delete</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="当你需要在保存数据到数据库时自动填充一个字段"><a href="#当你需要在保存数据到数据库时自动填充一个字段" class="headerlink" title="当你需要在保存数据到数据库时自动填充一个字段"></a>当你需要在保存数据到数据库时自动填充一个字段</h3><p>当你需要在保存数据到数据库时自动填充一个字段 （例如: slug），使用模型观察者来代替重复编写代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Str</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">parent</span>:<span class="title function_ invoke__">boot</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">static</span>::<span class="title function_ invoke__">saving</span>(function (<span class="variable">$model</span>) &#123;</span><br><span class="line">            <span class="variable">$model</span>-&gt;slug = <span class="title class_">Str</span>::<span class="title function_ invoke__">slug</span>(<span class="variable">$model</span>-&gt;title);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由<a href="https://twitter.com/sky_0xs/status/1432390722280427521">@sky_0xs</a>提供</p><h3 id="获取查询语句的额外信息"><a href="#获取查询语句的额外信息" class="headerlink" title="获取查询语句的额外信息"></a>获取查询语句的额外信息</h3><p>你可以使用 <code>explain()</code> 方法来获取查询语句的额外信息</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Book</span>::<span class="title function_ invoke__">where</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Ruskin Bond&#x27;</span>)-&gt;<span class="title function_ invoke__">explain</span>()-&gt;<span class="title function_ invoke__">dd</span>();</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Illuminate\Support\Collection &#123;<span class="comment">#5344</span></span><br><span class="line">    all: [</span><br><span class="line">        &#123;<span class="comment">#15407</span></span><br><span class="line">            +<span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            +<span class="string">&quot;select_type&quot;</span>: <span class="string">&quot;SIMPLE&quot;</span>,</span><br><span class="line">            +<span class="string">&quot;table&quot;</span>: <span class="string">&quot;books&quot;</span>,</span><br><span class="line">            +<span class="string">&quot;partitions&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            +<span class="string">&quot;type&quot;</span>: <span class="string">&quot;ALL&quot;</span>,</span><br><span class="line">            +<span class="string">&quot;possible_keys&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            +<span class="string">&quot;key&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            +<span class="string">&quot;key_len&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            +<span class="string">&quot;ref&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">            +<span class="string">&quot;rows&quot;</span>: <span class="number">9</span>,</span><br><span class="line">            +<span class="string">&quot;filtered&quot;</span>: <span class="number">11.11111164093</span>,</span><br><span class="line">            +<span class="string">&quot;Extra&quot;</span>: <span class="string">&quot;Using where&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/amit_merchant/status/1432277631320223744">@amit_merchant</a>提供</p><h3 id="在-Laravel-中使用doesntExist-方法"><a href="#在-Laravel-中使用doesntExist-方法" class="headerlink" title="在 Laravel 中使用doesntExist()方法"></a>在 Laravel 中使用doesntExist()方法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个例子</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="number">0</span> === <span class="variable">$model</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;pending&#x27;</span>)-&gt;<span class="title function_ invoke__">count</span>() ) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我不关心它有多少数据只要它是0</span></span><br><span class="line"><span class="comment">// Laravel 的 exists() 方法会很清晰</span></span><br><span class="line"><span class="keyword">if</span> ( ! <span class="variable">$model</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;pending&#x27;</span>)-&gt;<span class="title function_ invoke__">exists</span>() ) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但我发现上面这条语句中的！很容易被忽略。</span></span><br><span class="line"><span class="comment">// 那么 doesntExist() 方法会让这个例子更加清晰</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="variable">$model</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;status&#x27;</span>, <span class="string">&#x27;pending&#x27;</span>)-&gt;<span class="title function_ invoke__">doesntExist</span>() ) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/ShawnHooper/status/1435686220542234626">@ShawnHooper</a>提供</p><h3 id="在一些模型的-boot-方法中自动调用一个特性"><a href="#在一些模型的-boot-方法中自动调用一个特性" class="headerlink" title="在一些模型的 boot () 方法中自动调用一个特性"></a>在一些模型的 boot () 方法中自动调用一个特性</h3><p>如果你有一个特性，你想把它添加到几个模型中，自动调用它们的 <code>boot()</code> 方法，你可以把特性的方法作为boot （特性名称）来调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> <span class="keyword">extends</span>  <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">MultiTenantModelTrait</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">extends</span>  <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">MultiTenantModelTrait</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">MultiTenantModelTrait</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// This method&#x27;s name is boot[TraitName]</span></span><br><span class="line">    <span class="comment">// It will be auto-called as boot() of Transaction/Task</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">bootMultiTenantModelTrait</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">static</span>::<span class="title function_ invoke__">creating</span>(function (<span class="variable">$model</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable">$isAdmin</span>) &#123;</span><br><span class="line">                <span class="variable">$isAdmin</span>-&gt;created_by_id = <span class="title function_ invoke__">auth</span>()-&gt;<span class="title function_ invoke__">id</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Laravel-的-find-方法，比只传一个-ID-更多的选择"><a href="#Laravel-的-find-方法，比只传一个-ID-更多的选择" class="headerlink" title="Laravel 的 find () 方法，比只传一个 ID 更多的选择"></a>Laravel 的 find () 方法，比只传一个 ID 更多的选择</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 find($id) 方法中第二个参数可以是返回字段</span></span><br><span class="line"><span class="title class_">Studdents</span>::<span class="title function_ invoke__">find</span>(<span class="number">1</span>, [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;father_name&#x27;</span>]);</span><br><span class="line"><span class="comment">// 这样我们可以查询 ID 为 &#x27;1&#x27; 并返回 name , father_name 字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们可以用数组的方式传递更多的 ID</span></span><br><span class="line"><span class="title class_">Studdents</span>::<span class="title function_ invoke__">find</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;father_name&#x27;</span>]);</span><br><span class="line"><span class="comment">// 输出: ID 为 1,2,3 并返回他们的 name , father_name 字段</span></span><br></pre></td></tr></table></figure><h3 id="在-Laravel-中有两种常见的方法来确定一个表是否为空表"><a href="#在-Laravel-中有两种常见的方法来确定一个表是否为空表" class="headerlink" title="在 Laravel 中有两种常见的方法来确定一个表是否为空表"></a>在 Laravel 中有两种常见的方法来确定一个表是否为空表</h3><p>在 Laravel 中，有两种常见的方法来确定一个表是否为空表。 直接在模型上使用 <code>exists()</code> 或者 <code>count()</code><br>不等于一个返回严格的布尔值，另一个返回一个整数，你都可以在条件语句中使用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">\App\Models\User</span>::<span class="title function_ invoke__">exists</span>()) &#123;</span><br><span class="line">        <span class="comment">// returns boolean true or false if the table has any saved rows</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">\App\Models\User</span>::<span class="title function_ invoke__">count</span>()) &#123;</span><br><span class="line">        <span class="comment">// returns the count of rows in the table</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/aschmelyun/status/1440641525998764041">@aschmelyun</a>提供</p><h3 id="如何避免-property-of-non-object-错误"><a href="#如何避免-property-of-non-object-错误" class="headerlink" title="如何避免 property of non-object 错误"></a>如何避免 property of non-object 错误</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设定默认模型</span></span><br><span class="line"><span class="comment">// 假设你有一篇 Post （帖子） 属于一个 Author （作者），代码如下:</span></span><br><span class="line"><span class="variable">$post</span>-&gt;author-&gt;name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然你可以像这样阻止错误:</span></span><br><span class="line"><span class="variable">$post</span>-&gt;author-&gt;name ?? <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">@<span class="variable">$post</span>-&gt;author-&gt;name</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但你可以在Eloquent关系层面上做到这一点。</span></span><br><span class="line"><span class="comment">// 如果没有作者关联帖子，这种关系将返回一个空的App/Author模型。</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">author</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">belongsTo</span>(<span class="string">&#x27;App\Author&#x27;</span>)-&gt;<span class="title function_ invoke__">withDefault</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">author</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">belongsTo</span>(<span class="string">&#x27;App\Author&#x27;</span>)-&gt;<span class="title function_ invoke__">withDefault</span>([</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Guest Author&#x27;</span></span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/coderahuljat/status/1440556610837876741">@coderahuljat</a>提供</p><h3 id="Eloquent-数据改变后获取原始数据"><a href="#Eloquent-数据改变后获取原始数据" class="headerlink" title="Eloquent 数据改变后获取原始数据"></a>Eloquent 数据改变后获取原始数据</h3><p>Eloquent 模型数据改变后，你可以使用 getOriginal () 方法来获取原始数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = <span class="title class_">App\User</span>::<span class="title function_ invoke__">first</span>();</span><br><span class="line"><span class="variable">$user</span>-&gt;name; <span class="comment">// John</span></span><br><span class="line"><span class="variable">$user</span>-&gt;name = <span class="string">&quot;Peter&quot;</span>; <span class="comment">// Peter</span></span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">getOriginal</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// John</span></span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">getOriginal</span>(); <span class="comment">// Original $user record</span></span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/devThaer/status/1442133797223403521">@devThaer</a>提供</p><h3 id="一种更简单创建数据库的方法"><a href="#一种更简单创建数据库的方法" class="headerlink" title="一种更简单创建数据库的方法"></a>一种更简单创建数据库的方法</h3><p>Laravel 还可以使用 .sql 文件来更简单的创建数据库</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DB::<span class="title function_ invoke__">unprepared</span>(</span><br><span class="line">    <span class="title function_ invoke__">file_get_contents</span>(<span class="keyword">__DIR__</span> . <span class="string">&#x27;./dump.sql&#x27;</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/w3Nicolas/status/1447902369388249091">@w3Nicolas</a>提供</p><h3 id="Query构造器的crossJoinSub方法"><a href="#Query构造器的crossJoinSub方法" class="headerlink" title="Query构造器的crossJoinSub方法"></a>Query构造器的crossJoinSub方法</h3><p>使用CROSS JOIN交叉连接</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">DB</span>;</span><br><span class="line"><span class="variable">$totalQuery</span> = DB::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;orders&#x27;</span>)-&gt;<span class="title function_ invoke__">selectRaw</span>(<span class="string">&#x27;SUM(price) as total&#x27;</span>);</span><br><span class="line">DB::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;orders&#x27;</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">select</span>(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">crossJoinSub</span>(<span class="variable">$totalQuery</span>, <span class="string">&#x27;overall&#x27;</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">selectRaw</span>(<span class="string">&#x27;(price / overall.total) * 100 AS percent_of_total&#x27;</span>)</span><br><span class="line">    -&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/pascalbaljet">@PascalBaljet</a>提供</p><h3 id="belongsToMany的中间表命名"><a href="#belongsToMany的中间表命名" class="headerlink" title="belongsToMany的中间表命名"></a>belongsToMany的中间表命名</h3><p>为了决定 关系表的中间表, Eloquent将按字母顺序连接两个相关的型号名称。</p><p>这意味着可以这样添加“Post”和“Tag”之间的连接：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$table</span> = <span class="string">&#x27;posts&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tags</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">belongsToMany</span>(<span class="title class_">Tag</span>::<span class="variable language_">class</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，您可以自由重写此约定，并且需要在第二个参数中指定联接表。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$table</span> = <span class="string">&#x27;posts&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tags</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">belongsToMany</span>(<span class="title class_">Tag</span>::<span class="variable language_">class</span>, <span class="string">&#x27;posts_tags&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果希望明确说明主键，还可以将其作为第三个和第四个参数提供。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$table</span> = <span class="string">&#x27;posts&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tags</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">belongsToMany</span>(<span class="title class_">Tag</span>::<span class="variable language_">class</span>, <span class="string">&#x27;post_tag&#x27;</span>, <span class="string">&#x27;post_id&#x27;</span>, <span class="string">&#x27;tag_id&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/iammikek">@iammikek</a>提供</p><h3 id="根据Pivot字段排序"><a href="#根据Pivot字段排序" class="headerlink" title="根据Pivot字段排序"></a>根据Pivot字段排序</h3><p><code>BelongsToMany::orderByPivot()</code> 允许你直接对<code>BelongsToMany </code>关系查询的结果集进行排序。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tag</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$table</span> = <span class="string">&#x27;tags&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Post</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$table</span> = <span class="string">&#x27;posts&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tags</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">belongsToMany</span>(<span class="title class_">Tag</span>::<span class="variable language_">class</span>, <span class="string">&#x27;posts_tags&#x27;</span>, <span class="string">&#x27;post_id&#x27;</span>, <span class="string">&#x27;tag_id&#x27;</span>)</span><br><span class="line">            -&gt;<span class="title function_ invoke__">using</span>(<span class="title class_">PostTagPivot</span>::<span class="variable language_">class</span>)</span><br><span class="line">            -&gt;<span class="title function_ invoke__">withTimestamps</span>()</span><br><span class="line">            -&gt;<span class="title function_ invoke__">withPivot</span>(<span class="string">&#x27;flag&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostTagPivot</span> <span class="keyword">extends</span> <span class="title">Pivot</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$table</span> = <span class="string">&#x27;posts_tags&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Somewhere in the Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPostTags</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Post</span>::<span class="title function_ invoke__">findOrFail</span>(<span class="variable">$id</span>)-&gt;<span class="title function_ invoke__">tags</span>()-&gt;<span class="title function_ invoke__">orderByPivot</span>(<span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/pascalbaljet">@PascalBaljet</a>提供</p><h3 id="从数据库中查询一条记录"><a href="#从数据库中查询一条记录" class="headerlink" title="从数据库中查询一条记录"></a>从数据库中查询一条记录</h3><p><code>sole()</code>方法将会只返回一条匹配标准的记录。如果没找到，将会抛出<code>NoRecordsFoundException</code> 异常。如果发现了多条记录，抛出<code>MultipleRecordsFoundException</code> 异常</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DB::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;products&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;ref&#x27;</span>, <span class="string">&#x27;#123&#x27;</span>)-&gt;<span class="title function_ invoke__">sole</span>();</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/pascalbaljet">@PascalBaljet</a>提供</p><h3 id="记录自动分块"><a href="#记录自动分块" class="headerlink" title="记录自动分块"></a>记录自动分块</h3><p>与<code>each()</code>相同，但是更简单使用。<code>chunks</code>自动将记录分成多块。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title class_">User</span>::<span class="title function_ invoke__">orderBy</span>(<span class="string">&#x27;name&#x27;</span>)-&gt;<span class="title function_ invoke__">chunkMap</span>(fn (<span class="variable">$user</span>) =&gt; [</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span> =&gt; <span class="variable">$user</span>-&gt;id,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="variable">$user</span>-&gt;name,</span><br><span class="line">]), <span class="number">25</span>);</span><br></pre></td></tr></table></figure><p>由<a href="https://twitter.com/pascalbaljet">@PascalBaljet</a>提供</p><h3 id="定时清理过期记录中的模型"><a href="#定时清理过期记录中的模型" class="headerlink" title="定时清理过期记录中的模型"></a>定时清理过期记录中的模型</h3><p>定期清理过时记录的模型。有了这个特性，Laravel将自动完成这项工作，只需调整内核类中<code>model:prune</code>命令的频率</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Prunable</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flight</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Prunable</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the prunable model query.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Database\Eloquent\Builder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">prunable</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">static</span>::<span class="title function_ invoke__">where</span>(<span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;&lt;=&#x27;</span>, <span class="title function_ invoke__">now</span>()-&gt;<span class="title function_ invoke__">subMonth</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，在修剪方法中，可以设置删除模型之前必须执行的操作：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">pruning</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Removing additional resources,</span></span><br><span class="line">    <span class="comment">// associated with the model. For example, files.</span></span><br><span class="line">    <span class="title class_">Storage</span>::<span class="title function_ invoke__">disk</span>(<span class="string">&#x27;s3&#x27;</span>)-&gt;<span class="title function_ invoke__">delete</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/pascalbaljet">@PascalBaljet</a>提供</p><h3 id="不变的日期和对它们的强制转换"><a href="#不变的日期和对它们的强制转换" class="headerlink" title="不变的日期和对它们的强制转换"></a>不变的日期和对它们的强制转换</h3><p>Laravel 8.53 介绍了<code>immutable_date</code> 和<code>immutable_datetime</code> 将日期转换为Immutable&#96;.</p><p>转换成<code>CarbonImmutable </code>，而不是常规的<code>Carbon </code>实例。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$casts</span> = [</span><br><span class="line">        <span class="string">&#x27;date_field&#x27;</span>     =&gt; <span class="string">&#x27;immutable_date&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;datetime_field&#x27;</span> =&gt; <span class="string">&#x27;immutable_datetime&#x27;</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/pascalbaljet">@PascalBaljet</a>提供</p><h3 id="findorfail方法也接收ids数组"><a href="#findorfail方法也接收ids数组" class="headerlink" title="findorfail方法也接收ids数组"></a>findorfail方法也接收ids数组</h3><p>findorfail方法也接收ids数组。若无ids被找到 则失败。</p><p>若你想拿到一个模型的集合 并不想检测返回数量为你想得到的数量时很好用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">create</span>([<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">1</span>]);</span><br><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">create</span>([<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">2</span>);</span><br><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">create</span>([<span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// Retrives the user...</span></span><br><span class="line"><span class="variable">$user</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">findOrFail</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// Throws a 404 because the user doesn&#x27;t exist...</span></span><br><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">findOrFail</span>(<span class="number">99</span>);</span><br><span class="line"><span class="comment">// Retrives all 3 users...</span></span><br><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">findOrFail</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// Throws because it is unable to find *all* of the users</span></span><br><span class="line"><span class="title class_">User</span>::<span class="title function_ invoke__">findOrFail</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">99</span>]);</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/timacdonald87/status/1457499557684604930">@timacdonald87</a> 提供</p><h3 id="从你的数据库中自动移除模型prunableTrait"><a href="#从你的数据库中自动移除模型prunableTrait" class="headerlink" title="从你的数据库中自动移除模型prunableTrait"></a>从你的数据库中自动移除模型prunableTrait</h3><p>Laravel 8.50新特性:</p><p>你可以使用<code>prunable trait</code>从你的数据库中自动移除模型。举例:你可以在几天后永久移除软删除的模型。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">SoftDeletes</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Add Prunable trait</span></span><br><span class="line">    <span class="keyword">use</span> <span class="title">Prunable</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">prunable</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Files matching this query will be pruned</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">static</span>::<span class="title function_ invoke__">query</span>()-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;deleted_at&#x27;</span>, <span class="string">&#x27;&lt;=&#x27;</span>, <span class="title function_ invoke__">now</span>()-&gt;<span class="title function_ invoke__">subDays</span>(<span class="number">14</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">pruning</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Remove the file from s3 before deleting the model</span></span><br><span class="line">        <span class="title class_">Storage</span>::<span class="title function_ invoke__">disk</span>(<span class="string">&#x27;s3&#x27;</span>)-&gt;<span class="title function_ invoke__">delete</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Add PruneCommand to your shedule (app/Console/Kernel.php)</span></span><br><span class="line"><span class="variable">$schedule</span>-&gt;<span class="title function_ invoke__">command</span>(<span class="title class_">PruneCommand</span>::<span class="variable language_">class</span>)-&gt;<span class="title function_ invoke__">daily</span>();</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/Philo01/status/1457626443782008834">@Philo01</a>提供</p><h3 id="日期转换"><a href="#日期转换" class="headerlink" title="日期转换"></a>日期转换</h3><p>当标记改变时 原来用布尔值来控制模型的可见性，现在可以使用&#96;&#96;something_at<code> </code>替换。比如 一个产品变成可见:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Migration</span></span><br><span class="line"><span class="title class_">Schema</span>::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;products&#x27;</span>, function (Blueprint <span class="variable">$table</span>) &#123;</span><br><span class="line">    <span class="variable">$table</span>-&gt;<span class="title function_ invoke__">datetime</span>(<span class="string">&#x27;live_at&#x27;</span>)-&gt;<span class="title function_ invoke__">nullable</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// In your model</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">live</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="title function_ invoke__">is_null</span>(<span class="variable">$this</span>-&gt;live_at);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Also in your model</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$dates</span> = [</span><br><span class="line">    <span class="string">&#x27;live_at&#x27;</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/alexjgarrett/status/1459174062132019212">@alexjgarrett</a>提供</p><h3 id="多模型更新插入"><a href="#多模型更新插入" class="headerlink" title="多模型更新插入"></a>多模型更新插入</h3><p><code>upsert()</code>方法将插入&#x2F;更新多个记录。</p><ul><li>第一个参数数组:要更新&#x2F;插入的值</li><li>第二个:查询表达式中使用的唯一标识列</li><li>第三个:若记录存在 你想要更新的列</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Flight</span>::<span class="title function_ invoke__">upsert</span>([</span><br><span class="line">    [<span class="string">&#x27;departure&#x27;</span> =&gt; <span class="string">&#x27;Oakland&#x27;</span>, <span class="string">&#x27;destination&#x27;</span> =&gt; <span class="string">&#x27;San Diego&#x27;</span>, <span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">99</span>],</span><br><span class="line">    [<span class="string">&#x27;departure&#x27;</span> =&gt; <span class="string">&#x27;Chicago&#x27;</span>, <span class="string">&#x27;destination&#x27;</span> =&gt; <span class="string">&#x27;New York&#x27;</span>, <span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">150</span>],</span><br><span class="line">], [<span class="string">&#x27;departure&#x27;</span>, <span class="string">&#x27;destination&#x27;</span>], [<span class="string">&#x27;price&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/mmartin_joo/status/1461591319516647426">@mmartin_joo</a>提供</p><h3 id="过滤结果集之后获取查询构造器"><a href="#过滤结果集之后获取查询构造器" class="headerlink" title="过滤结果集之后获取查询构造器"></a>过滤结果集之后获取查询构造器</h3><p>你可以使用 <code>toQuery()</code> 在过滤结果集之后获取查询构造器。</p><p>该方法在内部使用集合的第一个模型 并使用集合模型上的“whereKey”比较器。(此处翻译拗口 存疑。但是使用方法很明确。)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Retrieve all logged_in users</span></span><br><span class="line"><span class="variable">$loggedInUsers</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">where</span>(<span class="string">&#x27;logged_in&#x27;</span>, <span class="literal">true</span>)-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line"><span class="comment">// Filter them using a Collection method or php filtering</span></span><br><span class="line"><span class="variable">$nthUsers</span> = <span class="variable">$loggedInUsers</span>-&gt;<span class="title function_ invoke__">nth</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// You can&#x27;t do this on the collection</span></span><br><span class="line"><span class="variable">$nthUsers</span>-&gt;<span class="title function_ invoke__">update</span>(<span class="comment">/* ... */</span>);</span><br><span class="line"><span class="comment">// But you can retrieve the Builder using -&gt;toQuery()</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$nthUsers</span>-&gt;<span class="title function_ invoke__">isNotEmpty</span>()) &#123;</span><br><span class="line">    <span class="variable">$nthUsers</span>-&gt;<span class="title function_ invoke__">toQuery</span>()-&gt;<span class="title function_ invoke__">update</span>(<span class="comment">/* ... */</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/RBilloir/status/1462529494917566465">@RBilloir</a>提供</p><h3 id="选择聚合计算相关模型"><a href="#选择聚合计算相关模型" class="headerlink" title="选择聚合计算相关模型"></a>选择聚合计算相关模型</h3><p>选择聚合计算相关模型。</p><p>需要指出的是在一组相关模型上使用<code>count</code>方法要慢一点。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// In your controller</span></span><br><span class="line"><span class="variable">$user</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">withCount</span>(<span class="string">&#x27;articles&#x27;</span>);</span><br><span class="line"><span class="comment">// Or, to add a constraint to the aggregate</span></span><br><span class="line"><span class="variable">$user</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">withCount</span>([</span><br><span class="line">    <span class="string">&#x27;articles&#x27;</span> =&gt; fn (<span class="variable">$query</span>) =&gt; <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">live</span>();</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// In your view</span></span><br><span class="line"><span class="variable">$user</span>-&gt;articles_count</span><br><span class="line"><span class="comment">// Instead of</span></span><br><span class="line"><span class="variable">$user</span>-&gt;articles-&gt;<span class="title function_ invoke__">count</span>();</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/alexjgarrett/status/1462753602385108995">@alexjgarrett</a>提供</p><h3 id="自定义强制转换"><a href="#自定义强制转换" class="headerlink" title="自定义强制转换"></a>自定义强制转换</h3><p>你可以自定义强制转换来让<code>Laravel</code>自动格式化你的模型数据。</p><p>下面是一个在检索或更改用户名时将其大写的示例。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CapitalizeWordsCast</span> <span class="keyword">implements</span> <span class="title">CastsAttributes</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$model</span>, <span class="keyword">string</span> <span class="variable">$key</span>, <span class="variable">$value</span>, <span class="keyword">array</span> <span class="variable">$attributes</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">ucwords</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params"><span class="variable">$model</span>, <span class="keyword">string</span> <span class="variable">$key</span>, <span class="variable">$value</span>, <span class="keyword">array</span> <span class="variable">$attributes</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">ucwords</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$casts</span> = [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>  =&gt; <span class="title class_">CapitalizeWordsCast</span>::<span class="variable language_">class</span>,</span><br><span class="line">        <span class="string">&#x27;email&#x27;</span> =&gt; <span class="string">&#x27;string&#x27;</span>,</span><br><span class="line">    ]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/mattkingshott/status/1462828232206659586">@mattkingshott</a>提供</p><h3 id="保存中不要触发事件"><a href="#保存中不要触发事件" class="headerlink" title="保存中不要触发事件"></a>保存中不要触发事件</h3><p>若你不想触发模型事件 使用<code>saveQuietly()</code>方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">quietly</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">findOrFail</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="variable">$user</span>-&gt;name = <span class="string">&#x27;Martin Joo&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Will not trigger any model event</span></span><br><span class="line">    <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">saveQuietly</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/mmartin_joo/status/1465289689154265091">@mmartin_joo</a>提供</p><h3 id="基于相关模型的平均值或总数排序"><a href="#基于相关模型的平均值或总数排序" class="headerlink" title="基于相关模型的平均值或总数排序"></a>基于相关模型的平均值或总数排序</h3><p>你是否曾需要基于关系模型的平均值或总数来排序？</p><p>这很简单</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bestBooks</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title class_">Book</span>::<span class="title function_ invoke__">query</span>()</span><br><span class="line">        -&gt;<span class="title function_ invoke__">withAvg</span>(<span class="string">&#x27;ratings as average_rating&#x27;</span>, <span class="string">&#x27;rating&#x27;</span>)</span><br><span class="line">        -&gt;<span class="title function_ invoke__">orderByDesc</span>(<span class="string">&#x27;average_rating&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/mmartin_joo/status/1466769691385335815">@mmartin_joo</a>提供</p><h3 id="返回事务结果"><a href="#返回事务结果" class="headerlink" title="返回事务结果"></a>返回事务结果</h3><p>若你有一个<code>DB</code>事务 并且你想返回它的结果 至少有两种方法:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. You can pass the parameter by reference</span></span><br><span class="line"><span class="variable">$invoice</span> = <span class="literal">NULL</span>;</span><br><span class="line">DB::<span class="title function_ invoke__">transaction</span>(function () <span class="keyword">use</span> (&amp;$<span class="title">invoice</span>) &#123;</span><br><span class="line">    $<span class="title">invoice</span> = <span class="title">Invoice</span>::<span class="title">create</span>(...);</span><br><span class="line">    <span class="variable">$invoice</span>-&gt;<span class="title function_ invoke__">items</span>()-&gt;<span class="title function_ invoke__">attach</span>(...);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 2. Or shorter: just return trasaction result</span></span><br><span class="line"><span class="variable">$invoice</span> = DB::<span class="title function_ invoke__">transaction</span>(function () &#123;</span><br><span class="line">    <span class="variable">$invoice</span> = <span class="title class_">Invoice</span>::<span class="title function_ invoke__">create</span>(...);</span><br><span class="line">    <span class="variable">$invoice</span>-&gt;<span class="title function_ invoke__">items</span>()-&gt;<span class="title function_ invoke__">attach</span>(...);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$invoice</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="从query中移除多个公共scope"><a href="#从query中移除多个公共scope" class="headerlink" title="从query中移除多个公共scope"></a>从query中移除多个公共scope</h3><p>当使用<code>Global Scopes</code>时 你不仅可以使用多个 <code>scope</code> 而且可以在不需要的时候通过提供的&#96;&#96;withoutGlobalScopes&#96;方法移除他们</p><p><a href="https://laravel.com/docs/8.x/eloquent#global-scopes">Link to docs</a></p><h3 id="JSON列属性排序"><a href="#JSON列属性排序" class="headerlink" title="JSON列属性排序"></a>JSON列属性排序</h3><p>你可以使用JSON列属性排序</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSON column example:</span></span><br><span class="line"><span class="comment">// bikes.settings = &#123;&quot;is_retired&quot;: false&#125;</span></span><br><span class="line"><span class="variable">$bikes</span> = <span class="title class_">Bike</span>::<span class="title function_ invoke__">where</span>(<span class="string">&#x27;athlete_id&#x27;</span>, <span class="variable">$this</span>-&gt;athleteId)</span><br><span class="line">        -&gt;<span class="title function_ invoke__">orderBy</span>(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">        -&gt;<span class="title function_ invoke__">orderByDesc</span>(<span class="string">&#x27;settings-&gt;is_retired&#x27;</span>)</span><br><span class="line">        -&gt;<span class="title function_ invoke__">get</span>();</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/brbcoding/status/1473353537983856643">@brbcoding</a>提供</p><h3 id="从第一个结果中获取单列的值"><a href="#从第一个结果中获取单列的值" class="headerlink" title="从第一个结果中获取单列的值"></a>从第一个结果中获取单列的值</h3><p>你可以使用<code>value</code>方法从第一个结果中获取单列的值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Instead of</span></span><br><span class="line"><span class="title class_">Integration</span>::<span class="title function_ invoke__">where</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>)-&gt;<span class="title function_ invoke__">first</span>()-&gt;active;</span><br><span class="line"><span class="comment">// You can use</span></span><br><span class="line"><span class="title class_">Integration</span>::<span class="title function_ invoke__">where</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>)-&gt;<span class="title function_ invoke__">value</span>(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line"><span class="comment">// or this to throw an exception if no records found</span></span><br><span class="line"><span class="title class_">Integration</span>::<span class="title function_ invoke__">where</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>)-&gt;<span class="title function_ invoke__">valueOrFail</span>(<span class="string">&#x27;active&#x27;</span>)<span class="string">&#x27;;</span></span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/justsanjit/status/1475572530215796744">@justsanjit</a>提供</p><h3 id="检测模型属性是否被修改"><a href="#检测模型属性是否被修改" class="headerlink" title="检测模型属性是否被修改"></a>检测模型属性是否被修改</h3><p>想知道您对模型所做的更改是否改变了键的值吗？没问题，只需<code>originalIsEquivalent</code>方法即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">first</span>(); <span class="comment">// [&#x27;name&#x27; =&gt; &quot;John&#x27;]</span></span><br><span class="line"><span class="variable">$user</span>-&gt;name = <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">originalIsEquivalent</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable">$user</span>-&gt;name = <span class="string">&#x27;David&#x27;</span>; <span class="comment">// Set directly</span></span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">fill</span>([<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;David&#x27;</span>]); <span class="comment">// Or set via fill</span></span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">originalIsEquivalent</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>由 [@mattkingshott]提供</p><h3 id="定义访问器与修改器的新方法"><a href="#定义访问器与修改器的新方法" class="headerlink" title="定义访问器与修改器的新方法"></a>定义访问器与修改器的新方法</h3><p>Laravel 8.77:定义访问器与修改器的新方法 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Before, two-method approach</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setTitleAttribute</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;attributes[<span class="string">&#x27;title&#x27;</span>] = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTitleAttribute</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">strtoupper</span>(<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// New approach</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">title</span>(<span class="params"></span>): <span class="title">Attribute</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Attribute</span>(</span><br><span class="line">        get: <span class="function"><span class="keyword">fn</span> (<span class="params"><span class="variable">$value</span></span>) =&gt;</span> <span class="title function_ invoke__">strtoupper</span>(<span class="variable">$value</span>),</span><br><span class="line">        set: <span class="function"><span class="keyword">fn</span> (<span class="params"><span class="variable">$value</span></span>) =&gt;</span> <span class="title function_ invoke__">strtolower</span>(<span class="variable">$value</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tip given by <a href="https://twitter.com/Teacoders/status/1473697808456851466">@Teacoders</a></p><h3 id="另外一种定义访问器与修改器的方法"><a href="#另外一种定义访问器与修改器的方法" class="headerlink" title="另外一种定义访问器与修改器的方法"></a>另外一种定义访问器与修改器的方法</h3><p>在一些模型中想用同样的修改器 访问器 可以自定义转换。</p><p>只需要创建一个类 实现 &#96;&#96;CastsAttributes&#96; 实现两个方法</p><ul><li>get 标识模型应当从数据库如何拿到</li><li>set 标识数据应当如何存储到数据库</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Casts</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">CastsAttributes</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimestampsCast</span> <span class="keyword">implements</span> <span class="title">CastsAttributes</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$model</span>, <span class="keyword">string</span> <span class="variable">$key</span>, <span class="variable">$value</span>, <span class="keyword">array</span> <span class="variable">$attributes</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Carbon</span>::<span class="title function_ invoke__">parse</span>(<span class="variable">$value</span>)-&gt;<span class="title function_ invoke__">diffForHumans</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params"><span class="variable">$model</span>, <span class="keyword">string</span> <span class="variable">$key</span>, <span class="variable">$value</span>, <span class="keyword">array</span> <span class="variable">$attributes</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Carbon</span>::<span class="title function_ invoke__">parse</span>(<span class="variable">$value</span>)-&gt;<span class="title function_ invoke__">format</span>(<span class="string">&#x27;Y-m-d h:i:s&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后你可以在模型中实现这个转换</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Models</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Auth</span>\<span class="title">User</span> <span class="keyword">as</span> <span class="title">Authenticatable</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Casts</span>\<span class="title">TimestampsCast</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Carbon</span>\<span class="title">Carbon</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Authenticatable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The attributes that should be cast.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$casts</span> = [</span><br><span class="line">        <span class="string">&#x27;updated_at&#x27;</span> =&gt; <span class="title class_">TimestampsCast</span>::<span class="variable language_">class</span>,</span><br><span class="line">        <span class="string">&#x27;created_at&#x27;</span> =&gt; <span class="title class_">TimestampsCast</span>::<span class="variable language_">class</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[@AhmedRezk]提供</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="laravel" scheme="http://example.com/categories/laravel/"/>
    
    
    <category term="laravel" scheme="http://example.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>API</title>
    <link href="http://example.com/2024/03/07/laravel/API/"/>
    <id>http://example.com/2024/03/07/laravel/API/</id>
    <published>2024-03-07T09:34:16.873Z</published>
    <updated>2024-03-07T09:49:34.459Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ol><li><a href="#API-%E8%BF%94%E5%9B%9E%E4%B8%80%E5%88%87%E6%AD%A3%E5%B8%B8">API 返回一切正常</a></li><li><a href="#%E5%8E%BB%E6%8E%89%E9%A2%9D%E5%A4%96%E7%9A%84%E5%86%85%E9%83%A8%E6%95%B0%E6%8D%AE%E5%8C%85%E8%A3%85">去掉额外的内部数据包装</a></li><li><a href="#%E9%81%BF%E5%85%8DN+1%E6%9F%A5%E8%AF%A2">API resource中避免N+1查询</a></li><li><a href="#%E4%BB%8EAuthorizationheader%E4%B8%AD%E8%8E%B7%E5%8F%96BearerToken">从Authorizationheader中获取BearerToken</a></li><li><a href="#%E6%8E%92%E5%BA%8FAPI%E7%BB%93%E6%9E%9C">排序API结果</a></li></ol><p>由 <a href="https://twitter.com/phillipmwaniki/status/1445230637544321029">@phillipmwaniki</a>提供</p><h3 id="API-返回一切正常"><a href="#API-返回一切正常" class="headerlink" title="API 返回一切正常"></a>API 返回一切正常</h3><p>如果你有 API 端口执行某些操作但是没有响应，那么您只想返回 “一切正常”, 您可以返回 204 状态代码 “No content”。在 Laravel 中，很简单: <code>return response()-&gt;noContent();</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">reorder</span>(<span class="params">Request <span class="variable">$request</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$request</span>-&gt;<span class="title function_ invoke__">input</span>(<span class="string">&#x27;rows&#x27;</span>, []) <span class="keyword">as</span> <span class="variable">$row</span>) &#123;</span><br><span class="line">        <span class="title class_">Country</span>::<span class="title function_ invoke__">find</span>(<span class="variable">$row</span>[<span class="string">&#x27;id&#x27;</span>])-&gt;<span class="title function_ invoke__">update</span>([<span class="string">&#x27;position&#x27;</span> =&gt; <span class="variable">$row</span>[<span class="string">&#x27;position&#x27;</span>]]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">response</span>()-&gt;<span class="title function_ invoke__">noContent</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="去掉额外的内部数据包装"><a href="#去掉额外的内部数据包装" class="headerlink" title="去掉额外的内部数据包装"></a>去掉额外的内部数据包装</h3><p>当创建一个 <code>Laravel Resource</code> 集合 你可以去除数据外层包装, 通过在 <code>AppServiceProvider</code>中添加</p><p><code>JsonResource::withoutWrapping()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="title class_">JsonResource</span>::<span class="title function_ invoke__">withoutWrapping</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="避免N-1查询"><a href="#避免N-1查询" class="headerlink" title="避免N+1查询"></a>避免N+1查询</h3><p>在<code>API resource</code>资源中你可以使用<code>whenLoaded</code>方法避免<code>N+1</code>查询。</p><p>如果<code>Employee </code>模型准备好了加载的时候 才会被加载。<br>如果没有<code>whenLoaded</code> <code>department</code>每次都会执行查询。<br>Without <code>whenLoaded()</code> there is always a query for the department</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmplyeeResource</span> <span class="keyword">extends</span> <span class="title">JsonResource</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">toArray</span>(<span class="params"><span class="variable">$request</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span> =&gt; <span class="variable language_">$this</span>-&gt;uuid,</span><br><span class="line">            <span class="string">&#x27;fullName&#x27;</span> =&gt; <span class="variable language_">$this</span>-&gt;full_name,</span><br><span class="line">            <span class="string">&#x27;email&#x27;</span> =&gt; <span class="variable language_">$this</span>-&gt;email,</span><br><span class="line">            <span class="string">&#x27;jobTitle&#x27;</span> =&gt; <span class="variable language_">$this</span>-&gt;job_title,</span><br><span class="line">            <span class="string">&#x27;department&#x27;</span> =&gt; <span class="title class_">DepartmentResource</span>::<span class="title function_ invoke__">make</span>(<span class="variable">$this</span>-&gt;<span class="title function_ invoke__">whenLoaded</span>(<span class="string">&#x27;department&#x27;</span>)),</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tip given by <a href="https://twitter.com/mmartin_joo/status/1473987501501071362">@mmartin_joo</a></p><h3 id="从Authorizationheader中获取BearerToken"><a href="#从Authorizationheader中获取BearerToken" class="headerlink" title="从Authorizationheader中获取BearerToken"></a>从Authorizationheader中获取BearerToken</h3><p>当你使用api并想访问bearerToken时<code>bearerToken</code>方法很方便.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Don&#x27;t parse API headers manually like this:</span></span><br><span class="line"><span class="variable">$tokenWithBearer</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">header</span>(<span class="string">&#x27;Authorization&#x27;</span>);</span><br><span class="line"><span class="variable">$token</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$tokenWithBearer</span>, <span class="number">7</span>);</span><br><span class="line"><span class="comment">//Do this instead:</span></span><br><span class="line"><span class="variable">$token</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">bearerToken</span>();</span><br></pre></td></tr></table></figure><p>由 <a href="https://twitter.com/iamharis010/status/1488413755826327553">@iamharis010</a>提供</p><h3 id="排序APi结果"><a href="#排序APi结果" class="headerlink" title="排序APi结果"></a>排序APi结果</h3><p>单行API排序 使用方向控制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Handles /dogs?sort=name and /dogs?sort=-name</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;dogs&#x27;</span>, function (Request <span class="variable">$request</span>) &#123;</span><br><span class="line">    <span class="comment">// Get the sort query parameter (or fall back to default sort &quot;name&quot;)</span></span><br><span class="line">    <span class="variable">$sortColumn</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">input</span>(<span class="string">&#x27;sort&#x27;</span>, <span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">    <span class="comment">// Set the sort direction based on whether the key starts with -</span></span><br><span class="line">    <span class="comment">// using Laravel&#x27;s Str::startsWith() helper function</span></span><br><span class="line">    <span class="variable">$sortDirection</span> = <span class="title class_">Str</span>::<span class="title function_ invoke__">startsWith</span>(<span class="variable">$sortColumn</span>, <span class="string">&#x27;-&#x27;</span>) ? <span class="string">&#x27;desc&#x27;</span> : <span class="string">&#x27;asc&#x27;</span>;</span><br><span class="line">    <span class="variable">$sortColumn</span> = <span class="title function_ invoke__">ltrim</span>(<span class="variable">$sortColumn</span>, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Dog</span>::<span class="title function_ invoke__">orderBy</span>(<span class="variable">$sortColumn</span>, <span class="variable">$sortDirection</span>)</span><br><span class="line">        -&gt;<span class="title function_ invoke__">paginate</span>(<span class="number">20</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们可以为多行实现同样的效果 如?sort&#x3D;name,-weight</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Handles ?sort=name,-weight</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;dogs&#x27;</span>, function (Request <span class="variable">$request</span>) &#123;</span><br><span class="line">    <span class="comment">// Grab the query parameter and turn it into an array exploded by ,</span></span><br><span class="line">    <span class="variable">$sorts</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">input</span>(<span class="string">&#x27;sort&#x27;</span>, <span class="string">&#x27;&#x27;</span>));</span><br><span class="line">    <span class="comment">// Create a query</span></span><br><span class="line">    <span class="variable">$query</span> = <span class="title class_">Dog</span>::<span class="title function_ invoke__">query</span>();</span><br><span class="line">    <span class="comment">// Add the sorts one by one</span></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$sorts</span> <span class="keyword">as</span> <span class="variable">$sortColumn</span>) &#123;</span><br><span class="line">        <span class="variable">$sortDirection</span> = <span class="title class_">Str</span>::<span class="title function_ invoke__">startsWith</span>(<span class="variable">$sortColumn</span>, <span class="string">&#x27;-&#x27;</span>) ? <span class="string">&#x27;desc&#x27;</span> : <span class="string">&#x27;asc&#x27;</span>;</span><br><span class="line">        <span class="variable">$sortColumn</span> = <span class="title function_ invoke__">ltrim</span>(<span class="variable">$sortColumn</span>, <span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">orderBy</span>(<span class="variable">$sortColumn</span>, <span class="variable">$sortDirection</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Return</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">paginate</span>(<span class="number">20</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="laravel" scheme="http://example.com/categories/laravel/"/>
    
    
    <category term="laravel" scheme="http://example.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>Artisan</title>
    <link href="http://example.com/2024/03/07/laravel/Artisan/"/>
    <id>http://example.com/2024/03/07/laravel/Artisan/</id>
    <published>2024-03-07T09:34:16.873Z</published>
    <updated>2024-03-07T09:39:35.164Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Artisan"><a href="#Artisan" class="headerlink" title="Artisan"></a>Artisan</h2><p>⬆️ <a href="../README-zh.md">回到顶部</a> ⬅️ <a href="./Mail.md">上一个 (邮件)</a> ➡️ <a href="./Factories.md">下一个 (工厂)</a></p><ol><li><a href="#Artisan-%E5%91%BD%E4%BB%A4%E5%8F%82%E6%95%B0">Artisan 命令参数</a></li><li><a href="#%E7%BB%B4%E6%8A%A4%E6%A8%A1%E5%BC%8F">维护模式</a></li><li><a href="#Artisan-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B8%AE%E5%8A%A9">Artisan 命令行帮助</a></li><li><a href="#%E7%A1%AE%E8%AE%A4-Laravel-%E7%9A%84%E7%89%88%E6%9C%AC">确认 Laravel 的版本</a></li><li><a href="#%E4%BB%8E%E4%BB%BB%E6%84%8F%E5%A4%84%E4%BD%BF%E7%94%A8-Artisan-%E5%91%BD%E4%BB%A4">从任意处使用 Artisan 命令</a></li></ol><h3 id="Artisan-命令参数"><a href="#Artisan-命令参数" class="headerlink" title="Artisan 命令参数"></a>Artisan 命令参数</h3><p>创建 Artisan 命令时，您可以各种方式询问输入：<code>$this-&gt;confirm()</code> （确认），<code>$this-&gt;perialipate()</code> (预期输入)，<code>$this-&gt;choice()</code>(选择)。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Yes or no?</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">confirm</span>(<span class="string">&#x27;Do you wish to continue?&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open question with auto-complete options</span></span><br><span class="line"><span class="variable">$name</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">anticipate</span>(<span class="string">&#x27;What is your name?&#x27;</span>, [<span class="string">&#x27;Taylor&#x27;</span>, <span class="string">&#x27;Dayle&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// One of the listed options with default index</span></span><br><span class="line"><span class="variable">$name</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">choice</span>(<span class="string">&#x27;What is your name?&#x27;</span>, [<span class="string">&#x27;Taylor&#x27;</span>, <span class="string">&#x27;Dayle&#x27;</span>], <span class="variable">$defaultIndex</span>);</span><br></pre></td></tr></table></figure><h3 id="维护模式"><a href="#维护模式" class="headerlink" title="维护模式"></a>维护模式</h3><p>如果你想要在页面上启用维护模式，执行下面的 Artisan 命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan down</span><br></pre></td></tr></table></figure><p>然后人们会看到默认的 503 页面。<br>在 Laravel 8 里，你还可以提供的标识：</p><p>用户将会重定向的路径地址<br>预渲染的维护模式视图页面<br>绕过维护模式的秘钥<br>维护模式返回的状态吗<br>每 X 秒重新加载页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan down --redirect=<span class="string">&quot;/&quot;</span> --render=<span class="string">&quot;errors::503&quot;</span> --secret=<span class="string">&quot;1630542a-246b-4b66-afa1-dd72a4c43515&quot;</span> --status=200 --retry=60</span><br></pre></td></tr></table></figure><p>在 Laravel 8 之前有：</p><ul><li>维护模式显示的消息</li><li>每 X 秒重新加载页面</li><li>允许访问的 IP 地址</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan down --message=<span class="string">&quot;Upgrading Database&quot;</span> --retry=60 --allow=127.0.0.1</span><br></pre></td></tr></table></figure><p>当你完成了维护工作，只需要运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan up</span><br></pre></td></tr></table></figure><h3 id="Artisan-命令行帮助"><a href="#Artisan-命令行帮助" class="headerlink" title="Artisan 命令行帮助"></a>Artisan 命令行帮助</h3><p>要查看 <code>Artisan</code> 命令的相关选项，可以运行 <code>Artisan</code> 命令带上 <code>--help</code> 标识参数，比如 <code>php artisan make:model --help</code> 然后就可以看到你可以用到的诸多选项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line">  -a, --all             Generate a migration, seeder, factory, and resource controller for the model</span><br><span class="line">  -c, --controller      Create a new controller for the model</span><br><span class="line">  -f, --factory         Create a new factory for the model</span><br><span class="line">      --force           Create the class even if the model already exists</span><br><span class="line">  -m, --migration       Create a new migration file for the model</span><br><span class="line">  -s, --seed            Create a new seeder file for the model</span><br><span class="line">  -p, --pivot           Indicates if the generated model should be a custom intermediate table model</span><br><span class="line">  -r, --resource        Indicates if the generated controller should be a resource controller</span><br><span class="line">      --api             Indicates if the generated controller should be an API controller</span><br><span class="line">  -h, --help            Display this help message</span><br><span class="line">  -q, --quiet           Do not output any message</span><br><span class="line">  -V, --version         Display this application version</span><br><span class="line">      --ansi            Force ANSI output</span><br><span class="line">      --no-ansi         Disable ANSI output</span><br><span class="line">  -n, --no-interaction  Do not ask any interactive question</span><br><span class="line">      --env[=ENV]       The environment the command should run under</span><br><span class="line">  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug</span><br></pre></td></tr></table></figure><h3 id="确认-Laravel-的版本"><a href="#确认-Laravel-的版本" class="headerlink" title="确认 Laravel 的版本"></a>确认 Laravel 的版本</h3><p>通过以下命令行，可以查看并确认你的应用所使用 Lavavel 版本<br><code>php artisan --version</code></p><h3 id="从任意处使用-Artisan-命令"><a href="#从任意处使用-Artisan-命令" class="headerlink" title="从任意处使用 Artisan 命令"></a>从任意处使用 Artisan 命令</h3><p>你不仅可以在命令行中启动<code>Artisan</code> 命令，还可以携带参数地在代码中启动它，使用&#96;Artisan::call()· 方法即可：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;/foo&#x27;</span>, function () &#123;</span><br><span class="line">    <span class="variable">$exitCode</span> = <span class="title class_">Artisan</span>::<span class="title function_ invoke__">call</span>(<span class="string">&#x27;email:send&#x27;</span>, [</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;--queue&#x27;</span> =&gt; <span class="string">&#x27;default&#x27;</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="laravel" scheme="http://example.com/categories/laravel/"/>
    
    
    <category term="laravel" scheme="http://example.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>集合</title>
    <link href="http://example.com/2024/03/07/laravel/Collections/"/>
    <id>http://example.com/2024/03/07/laravel/Collections/</id>
    <published>2024-03-07T09:34:16.873Z</published>
    <updated>2024-03-07T09:39:51.798Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>⬆️ <a href="../README-zh.md">回到顶部</a> ⬅️ <a href="./Validation.md">上一个 (验证)</a> ➡️ <a href="./Auth.md">下一个 (授权)</a></p><ol><li><a href="#%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8NULL%E8%BF%87%E6%BB%A4%E9%9B%86%E5%90%88">不要使用NULL过滤集合</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%AF%B9%E9%9B%86%E5%90%88%E5%88%86%E7%BB%84">使用自定义的回调函数对集合分组</a></li><li><a href="#%E9%92%88%E5%AF%B9%E8%A1%8C%E7%9A%84%E9%9B%86%E5%90%88%E6%96%B9%E6%B3%95">针对行的集合方法</a></li><li><a href="#%E5%AF%B9%E5%88%86%E9%A1%B5%E9%9B%86%E5%90%88%E6%B1%82%E5%92%8C">对分页集合求和</a></li><li><a href="#%E5%88%86%E9%A1%B5%E7%BB%84%E4%BB%B6%E4%B8%AD%E7%9A%84%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86">分页组件中的唯一标识</a></li><li><a href="#%E9%AB%98%E9%98%B6%E9%9B%86%E5%90%88%E6%96%B9%E6%B3%95">高阶集合方法</a></li><li><a href="#higher-order-collection-message">Higher order collection message</a></li></ol><h3 id="不要使用NULL过滤集合"><a href="#不要使用NULL过滤集合" class="headerlink" title="不要使用NULL过滤集合"></a>不要使用NULL过滤集合</h3><p>你可以在 Eloquent 中使用 <code>NULL</code> 过滤，但是你不能用 <code>NULL</code> 过滤 集合 - 你应该换成空字符串过滤，字段中已经没有 “null”。(意思是全字符串的形式的过滤不能使用 NULL，因为会被格式化为 [“field is null”, “&#x3D;”, true])</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This works</span></span><br><span class="line"><span class="variable">$messages</span> = <span class="title class_">Message</span>::<span class="title function_ invoke__">where</span>(<span class="string">&#x27;read_at is null&#x27;</span>)-&gt;<span class="title function_ invoke__">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Won’t work - will return 0 messages</span></span><br><span class="line"><span class="variable">$messages</span> = <span class="title class_">Message</span>::<span class="title function_ invoke__">all</span>();</span><br><span class="line"><span class="variable">$unread_messages</span> = <span class="variable">$messages</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;read_at is null&#x27;</span>)-&gt;<span class="title function_ invoke__">count</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Will work</span></span><br><span class="line"><span class="variable">$unread_messages</span> = <span class="variable">$messages</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;read_at&#x27;</span>, <span class="string">&#x27;&#x27;</span>)-&gt;<span class="title function_ invoke__">count</span>();</span><br></pre></td></tr></table></figure><h3 id="使用自定义的回调函数对集合分组"><a href="#使用自定义的回调函数对集合分组" class="headerlink" title="使用自定义的回调函数对集合分组"></a>使用自定义的回调函数对集合分组</h3><p>如果你想对结果分组，且分组字段不对应数据库中的字段，你可以提供一个回调函数来返回自定义的分组字段。<br>例如，通过用户的注册日分组，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">all</span>()-&gt;<span class="title function_ invoke__">groupBy</span>(function(<span class="variable">$item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$item</span>-&gt;created_at-&gt;<span class="title function_ invoke__">format</span>(<span class="string">&#x27;Y-m-d&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注意：这个方法是在 <code>Collection </code>类上的，所以将会在数据库的返回结果上执行。(意思不会在数据库 sql 层面分组)</p><h3 id="针对行的集合方法"><a href="#针对行的集合方法" class="headerlink" title="针对行的集合方法"></a>针对行的集合方法</h3><p>你可以用 <code>-&gt;all(</code>) ,<code> -&gt;get()</code> 方法查询数据，然后在这个返回的集合上执行各种集合方法，执行集合操作不会每次都查询数据库。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = <span class="title class_">User</span>::<span class="title function_ invoke__">all</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Max ID: &#x27;</span> . <span class="variable">$users</span>-&gt;<span class="title function_ invoke__">max</span>(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Average age: &#x27;</span> . <span class="variable">$users</span>-&gt;<span class="title function_ invoke__">avg</span>(<span class="string">&#x27;age&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Total budget: &#x27;</span> . <span class="variable">$users</span>-&gt;<span class="title function_ invoke__">sum</span>(<span class="string">&#x27;budget&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="对分页集合求和"><a href="#对分页集合求和" class="headerlink" title="对分页集合求和"></a>对分页集合求和</h3><p>如何对分页返回的结果集求和？使用相同的查询构建器，在分页查询之前执行求和操作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// How to get sum of post_views with pagination?</span></span><br><span class="line"><span class="variable">$posts</span> = <span class="title class_">Post</span>::<span class="title function_ invoke__">paginate</span>(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// This will be only for page 1, not ALL posts</span></span><br><span class="line"><span class="variable">$sum</span> = <span class="variable">$posts</span>-&gt;<span class="title function_ invoke__">sum</span>(<span class="string">&#x27;post_views&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Do this with Query Builder</span></span><br><span class="line"><span class="variable">$query</span> = <span class="title class_">Post</span>::<span class="title function_ invoke__">query</span>();</span><br><span class="line"><span class="comment">// Calculate sum</span></span><br><span class="line"><span class="variable">$sum</span> = <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">sum</span>(<span class="string">&#x27;post_views&#x27;</span>);</span><br><span class="line"><span class="comment">// And then do the pagination from the same query</span></span><br><span class="line"><span class="variable">$posts</span> = <span class="variable">$query</span>-&gt;<span class="title function_ invoke__">paginate</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="分页组件中的唯一标识"><a href="#分页组件中的唯一标识" class="headerlink" title="分页组件中的唯一标识"></a>分页组件中的唯一标识</h3><p>我们可以在分页组件中像序列号那样使用每趟循环中的索引 <code>index </code>，作为分页组件的唯一标识。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;th&gt;Serial&lt;/th&gt;</span><br><span class="line"> ...</span><br><span class="line"> @<span class="keyword">foreach</span> (<span class="variable">$products</span> <span class="keyword">as</span> <span class="variable">$product</span>)</span><br><span class="line"> &lt;tr&gt;</span><br><span class="line">     &lt;td&gt;&#123;&#123; <span class="variable">$loop</span>-&gt;index + <span class="variable">$product</span>-&gt;<span class="title function_ invoke__">firstItem</span>() &#125;&#125;&lt;/td&gt;</span><br><span class="line">     ...</span><br><span class="line"> @<span class="keyword">endforeach</span></span><br></pre></td></tr></table></figure><p>这可以解决下一页（?page&#x3D;2&amp;…）索引的计数问题。</p><h3 id="高阶集合方法"><a href="#高阶集合方法" class="headerlink" title="高阶集合方法"></a>高阶集合方法</h3><p>集合具有更高阶的可以链式调用的方法，例如 <code>groupBy()</code> <code>map()</code> 等，给你流畅的语法体验。下面的例子计算了一个需求单中每组产品的价格。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$offer</span> = [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>  =&gt; <span class="string">&#x27;offer1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;lines&#x27;</span> =&gt; [</span><br><span class="line">            [<span class="string">&#x27;group&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">10</span>],</span><br><span class="line">            [<span class="string">&#x27;group&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">20</span>],</span><br><span class="line">            [<span class="string">&#x27;group&#x27;</span> =&gt; <span class="number">2</span>, <span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">30</span>],</span><br><span class="line">            [<span class="string">&#x27;group&#x27;</span> =&gt; <span class="number">2</span>, <span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">40</span>],</span><br><span class="line">            [<span class="string">&#x27;group&#x27;</span> =&gt; <span class="number">3</span>, <span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">50</span>],</span><br><span class="line">            [<span class="string">&#x27;group&#x27;</span> =&gt; <span class="number">3</span>, <span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">60</span>]</span><br><span class="line">        ]</span><br><span class="line">];</span><br><span class="line">                </span><br><span class="line"><span class="variable">$totalPerGroup</span> = <span class="title function_ invoke__">collect</span>(<span class="variable">$offer</span>-&gt;lines)-&gt;<span class="title function_ invoke__">groupBy</span>(<span class="string">&#x27;group&#x27;</span>)-&gt;<span class="title function_ invoke__">map</span>(fn(<span class="variable">$group</span>) =&gt; <span class="variable">$group</span>-&gt;<span class="title function_ invoke__">sum</span>(<span class="string">&#x27;price&#x27;</span>)); </span><br></pre></td></tr></table></figure><h3 id="高阶集合排序"><a href="#高阶集合排序" class="headerlink" title="高阶集合排序"></a>高阶集合排序</h3><p>集合还支持“高阶排序”，这是对集合执行常见操作的捷径。</p><p>此示例计算报价中每组产品的价格。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$offer</span> = [</span><br><span class="line">        <span class="string">&#x27;name&#x27;</span>  =&gt; <span class="string">&#x27;offer1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;lines&#x27;</span> =&gt; [</span><br><span class="line">            [<span class="string">&#x27;group&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">10</span>],</span><br><span class="line">            [<span class="string">&#x27;group&#x27;</span> =&gt; <span class="number">1</span>, <span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">20</span>],</span><br><span class="line">            [<span class="string">&#x27;group&#x27;</span> =&gt; <span class="number">2</span>, <span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">30</span>],</span><br><span class="line">            [<span class="string">&#x27;group&#x27;</span> =&gt; <span class="number">2</span>, <span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">40</span>],</span><br><span class="line">            [<span class="string">&#x27;group&#x27;</span> =&gt; <span class="number">3</span>, <span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">50</span>],</span><br><span class="line">            [<span class="string">&#x27;group&#x27;</span> =&gt; <span class="number">3</span>, <span class="string">&#x27;price&#x27;</span> =&gt; <span class="number">60</span>]</span><br><span class="line">        ]</span><br><span class="line">];</span><br><span class="line">                </span><br><span class="line"><span class="variable">$totalPerGroup</span> = <span class="title function_ invoke__">collect</span>(<span class="variable">$offer</span>[<span class="string">&#x27;lines&#x27;</span>])-&gt;groupBy-&gt;group-&gt;map-&gt;<span class="title function_ invoke__">sum</span>(<span class="string">&#x27;price&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="laravel" scheme="http://example.com/categories/laravel/"/>
    
    
    <category term="laravel" scheme="http://example.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>授权</title>
    <link href="http://example.com/2024/03/07/laravel/Auth/"/>
    <id>http://example.com/2024/03/07/laravel/Auth/</id>
    <published>2024-03-07T09:34:16.873Z</published>
    <updated>2024-03-07T09:39:28.619Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><p>⬆️ <a href="../README-zh.md">回到顶部</a> ⬅️ <a href="./Collections.md">上一个 (集合)</a> ➡️ <a href="./Mail.md">下一个 (邮件)</a></p><ol><li><a href="#%E4%B8%80%E6%AC%A1%E6%A3%80%E6%9F%A5%E5%A4%9A%E4%B8%AA%E6%9D%83%E9%99%90">一次检查多个权限</a></li><li><a href="#%E6%9B%B4%E5%A4%9A%E5%85%B3%E4%BA%8E%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E7%9A%84%E4%BA%8B%E4%BB%B6">更多关于用户注册的事件</a></li><li><a href="#%E4%BD%A0%E7%9F%A5%E9%81%93Authonce%E5%90%97">你知道Auth::once()吗</a></li><li><a href="#%E6%9B%B4%E6%94%B9%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81%E6%9B%B4%E6%96%B0%E7%9A%84API%E4%BB%A4%E7%89%8C">更改用户密码更新的API令牌</a></li><li><a href="#%E8%A6%86%E7%9B%96%E8%B6%85%E7%BA%A7%E7%AE%A1%E7%90%86%E5%91%98%E7%9A%84%E6%9D%83%E9%99%90">覆盖超级管理员的权限</a></li></ol><h3 id="一次检查多个权限"><a href="#一次检查多个权限" class="headerlink" title="一次检查多个权限"></a>一次检查多个权限</h3><p>除了 <code>@can Blade</code> 指令外，你知道可以用 <code>@canany</code> 指令一次检查多个权限吗？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@canany([&#x27;update&#x27;, &#x27;view&#x27;, &#x27;delete&#x27;], $post)</span><br><span class="line">    // The current user can update, view, or delete the post</span><br><span class="line">@elsecanany([&#x27;create&#x27;], \App\Post::class)</span><br><span class="line">    // The current user can create a post</span><br><span class="line">@endcanany</span><br></pre></td></tr></table></figure><h3 id="更多关于用户注册的事件"><a href="#更多关于用户注册的事件" class="headerlink" title="更多关于用户注册的事件"></a>更多关于用户注册的事件</h3><p>希望在新用户注册后执行一些操作？ 转到 <code>app/Providers/EventServiceProvider.php</code> 和 添加更多的监听类，然后在 <code>$event-&gt;user</code> 对象中实现 <code>handle()</code> 方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$listen</span> = [</span><br><span class="line">        <span class="title class_">Registered</span>::<span class="variable language_">class</span> =&gt; [</span><br><span class="line">            <span class="title class_">SendEmailVerificationNotification</span>::<span class="variable language_">class</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// You can add any Listener class here</span></span><br><span class="line">            <span class="comment">// With handle() method inside of that class</span></span><br><span class="line">        ],</span><br><span class="line">    ];</span><br></pre></td></tr></table></figure><h3 id="你知道Authonce吗"><a href="#你知道Authonce吗" class="headerlink" title="你知道Authonce吗"></a>你知道Authonce吗</h3><p>你可以用用户登录一个请求，使用方法 <code>Auth::once()</code>。<br>不会使用任何会话或 cookie，这意味着该方法在构建无状态 API 时可能很有帮助。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title class_">Auth</span>::<span class="title function_ invoke__">once</span>(<span class="variable">$credentials</span>)) &#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更改用户密码更新的API令牌"><a href="#更改用户密码更新的API令牌" class="headerlink" title="更改用户密码更新的API令牌"></a>更改用户密码更新的API令牌</h3><p>当用户的密码更改时，可以方便地更改用户的 API 令牌。<br>模型：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setPasswordAttribute</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;attributes[<span class="string">&#x27;password&#x27;</span>] = <span class="variable">$value</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;attributes[<span class="string">&#x27;api_token&#x27;</span>] = <span class="title class_">Str</span>::<span class="title function_ invoke__">random</span>(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="覆盖超级管理员的权限"><a href="#覆盖超级管理员的权限" class="headerlink" title="覆盖超级管理员的权限"></a>覆盖超级管理员的权限</h3><p>如果你已经定义了网关（Gates）但是又想要覆盖超级管理员的所有权限。 给超级管理员所有权限，你可以在  <code>AuthServiceProvider.php</code> 文件中用 <code>Gate::before()</code> 语句拦截网关（Gates）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Intercept any Gate and check if it&#x27;s super admin</span></span><br><span class="line"><span class="title class_">Gate</span>::<span class="title function_ invoke__">before</span>(function(<span class="variable">$user</span>, <span class="variable">$ability</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$user</span>-&gt;is_super_admin == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Or if you use some permissions package...</span></span><br><span class="line"><span class="title class_">Gate</span>::<span class="title function_ invoke__">before</span>(function(<span class="variable">$user</span>, <span class="variable">$ability</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">hasPermission</span>(<span class="string">&#x27;root&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="laravel" scheme="http://example.com/categories/laravel/"/>
    
    
    <category term="laravel" scheme="http://example.com/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>yii2-admin</title>
    <link href="http://example.com/2023/10/08/yii/yii2-admin/"/>
    <id>http://example.com/2023/10/08/yii/yii2-admin/</id>
    <published>2023-10-08T08:15:51.000Z</published>
    <updated>2023-10-12T02:41:48.856Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在 Yii2 中，你可以使用 RBAC（Role-Based Access Control）来控制菜单权限按钮。以下是基本步骤：</p><ol><li><p><strong>安装 Yii2 RBAC 扩展</strong>：</p><p>首先，你需要安装 Yii2 的 RBAC 扩展，可以使用 Yii2 的官方扩展 <code>yii2-admin</code>，它提供了一套强大的 RBAC 管理功能。</p><p>你可以通过 Composer 安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require mdmsoft/yii2-admin <span class="string">&quot;~2.0&quot;</span></span><br></pre></td></tr></table></figure><p>安装完成后，你可以按照文档配置和初始化 RBAC。</p></li><li><p><strong>创建角色和权限</strong>：</p><p>在 Yii2 RBAC 中，你需要创建角色和权限，然后将它们关联起来。你可以使用 <code>yii\rbac\DbManager</code> 或者其他适合你项目的 RBAC 组件来管理角色和权限。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个角色</span></span><br><span class="line"><span class="variable">$role</span> = <span class="variable">$auth</span>-&gt;<span class="title function_ invoke__">createRole</span>(<span class="string">&#x27;admin&#x27;</span>);</span><br><span class="line"><span class="variable">$auth</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="variable">$role</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个权限</span></span><br><span class="line"><span class="variable">$permission</span> = <span class="variable">$auth</span>-&gt;<span class="title function_ invoke__">createPermission</span>(<span class="string">&#x27;createPost&#x27;</span>);</span><br><span class="line"><span class="variable">$auth</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="variable">$permission</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关联权限到角色</span></span><br><span class="line"><span class="variable">$auth</span>-&gt;<span class="title function_ invoke__">addChild</span>(<span class="variable">$role</span>, <span class="variable">$permission</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>在 Controller 中验证权限</strong>：</p><p>在你的控制器中，可以使用 <code>beforeAction</code> 方法来检查用户是否具有执行该操作的权限。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beforeAction</span>(<span class="params"><span class="variable">$action</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">parent</span>::<span class="title function_ invoke__">beforeAction</span>(<span class="variable">$action</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查当前用户是否有权限执行该操作</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Yii</span>::<span class="variable">$app</span>-&gt;user-&gt;<span class="title function_ invoke__">can</span>(<span class="string">&#x27;createPost&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ForbiddenHttpException</span>(<span class="string">&#x27;你没有权限执行该操作&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>在视图中显示按钮</strong>：</p><p>在视图文件中，可以使用 <code>yii\rbac\CheckAccessWidget</code> 小部件来根据用户的权限显示或隐藏按钮。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">rbac</span>\<span class="title">CheckAccessWidget</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示按钮，如果用户有 &#x27;createPost&#x27; 权限</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title class_">CheckAccessWidget</span>::<span class="title function_ invoke__">widget</span>([</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;createPost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;yes&#x27;</span> =&gt; <span class="title class_">Html</span>::<span class="title function_ invoke__">a</span>(<span class="string">&#x27;Create Post&#x27;</span>, [<span class="string">&#x27;post/create&#x27;</span>]),</span><br><span class="line">]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>在视图中控制菜单显示</strong>：</p><p>你可以使用 <code>Yii::$app-&gt;user-&gt;can()</code> 方法来在视图中根据用户的权限来控制菜单的显示或隐藏。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title class_">Yii</span>::<span class="variable">$app</span>-&gt;user-&gt;<span class="title function_ invoke__">can</span>(<span class="string">&#x27;createPost&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title class_">Html</span>::<span class="title function_ invoke__">a</span>(<span class="string">&#x27;Create Post&#x27;</span>, [<span class="string">&#x27;post/create&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>以上步骤提供了一个基本的 Yii2 RBAC 权限控制方案。通过创建角色、权限以及在控制器和视图中验证权限，你可以实现对菜单按钮的权限控制。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="php" scheme="http://example.com/categories/php/"/>
    
    <category term="yii" scheme="http://example.com/categories/php/yii/"/>
    
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
    <category term="yii" scheme="http://example.com/tags/yii/"/>
    
  </entry>
  
  <entry>
    <title>linux</title>
    <link href="http://example.com/2023/09/27/%E5%B7%A5%E5%85%B7/linux/"/>
    <id>http://example.com/2023/09/27/%E5%B7%A5%E5%85%B7/linux/</id>
    <published>2023-09-27T06:24:55.000Z</published>
    <updated>2023-09-27T06:31:50.139Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>你可以使用 <code>grep</code> 命令来查询文件中的关键内容，并结合 <code>head</code> 和 <code>tail</code> 命令来显示前后的行数。以下是具体的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&#x27;关键词&#x27;</span> 文件名 | <span class="built_in">head</span> -n 100 &amp;&amp; grep <span class="string">&#x27;关键词&#x27;</span> 文件名 | <span class="built_in">tail</span> -n 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">grep <span class="string">&#x27;MY20230923090G4T03&#x27;</span> sjq_org_c23-pro238.log | <span class="built_in">head</span> -n 100 &amp;&amp; grep <span class="string">&#x27;MY20230923090G4T03&#x27;</span> sjq_org_c23-pro238.log | <span class="built_in">tail</span> -n 100</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>grep &#39;关键词&#39; 文件名</code> 会在指定的文件中搜索包含关键词的行。</li><li><code>head -n 100</code> 会显示前100行。</li><li><code>tail -n 100</code> 会显示最后100行。</li></ul><p>如果你想在一个命令中实现，可以使用 <code>awk</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;/MY20230923090G4T03/&#123;a=NR+100&#125; a&amp;&amp;NR&lt;=a&#x27;</span> sjq_org_c23-pro238.log</span><br></pre></td></tr></table></figure><p>这个命令会在文件中查找包含关键词的行，并显示每个匹配行的前后100行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="工具" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>Yii2 行为类</title>
    <link href="http://example.com/2023/08/28/yii/yii3/"/>
    <id>http://example.com/2023/08/28/yii/yii3/</id>
    <published>2023-08-28T08:00:04.000Z</published>
    <updated>2023-08-30T03:03:17.525Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="yii2-Behavior-行为的使用，代码示例"><a href="#yii2-Behavior-行为的使用，代码示例" class="headerlink" title="yii2 Behavior 行为的使用，代码示例"></a>yii2 Behavior 行为的使用，代码示例</h3><p>1.定义一个类继承行为基础类<br>2.实现event方法触发事件重写</p><p>如下是扩展模型Model的类方法 进行程序的解耦设计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">common</span>\<span class="title class_">behaviors</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">Behavior</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">BaseActiveRecord</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">UploadedFile</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 行为事件 测试类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> app\common\behaviors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@class</span> AttachmentsBehavior</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023-08-30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AttachmentsBehavior</span> <span class="keyword">extends</span> <span class="title">Behavior</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_files</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要上传的文件属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$uploadFiles</span> = <span class="string">&#x27;uploadfiles&#x27;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已经上传了的文件属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$uploadedFiles</span> = <span class="string">&#x27;uploadedfiles&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$savePath</span> = <span class="string">&#x27;@common/upload&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$saveUrl</span> = <span class="string">&#x27;@common/uploads&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">events</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="title class_">BaseActiveRecord</span>::<span class="variable constant_">EVENT_BEFORE_VALIDATE</span> =&gt; <span class="string">&#x27;beforeValidate&#x27;</span>,</span><br><span class="line">            <span class="title class_">BaseActiveRecord</span>::<span class="variable constant_">EVENT_AFTER_VALIDATE</span> =&gt; <span class="string">&#x27;beforeValidate1&#x27;</span>,</span><br><span class="line">            <span class="title class_">BaseActiveRecord</span>::<span class="variable constant_">EVENT_AFTER_INSERT</span> =&gt; <span class="string">&#x27;afterSave&#x27;</span>,</span><br><span class="line">            <span class="title class_">BaseActiveRecord</span>::<span class="variable constant_">EVENT_AFTER_UPDATE</span> =&gt; <span class="string">&#x27;afterSave&#x27;</span>,</span><br><span class="line">            <span class="title class_">BaseActiveRecord</span>::<span class="variable constant_">EVENT_BEFORE_DELETE</span> =&gt; <span class="string">&#x27;beforeDelete&#x27;</span>,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is invoked before validation starts.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beforeValidate1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_files = <span class="title class_">UploadedFile</span>::<span class="title function_ invoke__">getInstances</span>(<span class="variable">$this</span>-&gt;owner, <span class="variable">$this</span>-&gt;uploadFiles);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回拥有者的唯一Id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getIdentityId</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;owner-&gt;<span class="title function_ invoke__">className</span>() . <span class="string">&#x27;.&#x27;</span> . <span class="variable language_">$this</span>-&gt;owner-&gt;id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 明确拥有者与附件的关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAttachments</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;owner-&gt;<span class="title function_ invoke__">hasMany</span>(<span class="title class_">Attachments</span>::<span class="title function_ invoke__">className</span>(), [<span class="string">&#x27;ownerId&#x27;</span> =&gt; <span class="string">&#x27;identityId&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在主模型保存后挨个保存附件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">afterSave</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;_files <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">            <span class="variable">$model</span> = <span class="keyword">new</span> <span class="title class_">Attachments</span>();</span><br><span class="line">            <span class="variable">$model</span>-&gt;fileName = <span class="variable">$file</span>-&gt;name;</span><br><span class="line">            <span class="variable">$model</span>-&gt;url = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Ymd&#x27;</span>) . <span class="title class_">\Yii</span>::<span class="variable">$app</span>-&gt;<span class="title function_ invoke__">getSecurity</span>()-&gt;<span class="title function_ invoke__">generateRandomString</span>(<span class="number">8</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>-&gt;extension;</span><br><span class="line">            <span class="variable">$model</span>-&gt;ownerId = <span class="variable language_">$this</span>-&gt;owner-&gt;identityId;</span><br><span class="line">            <span class="variable">$model</span>-&gt;savePath = <span class="title class_">\Yii</span>::<span class="title function_ invoke__">getAlias</span>(<span class="variable">$this</span>-&gt;savePath);</span><br><span class="line">            <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">saveAs</span>(<span class="title class_">\Yii</span>::<span class="title function_ invoke__">getAlias</span>(<span class="variable">$this</span>-&gt;savePath) . DIRECTORY_SEPARATOR . <span class="variable">$model</span>-&gt;url);</span><br><span class="line">            <span class="variable">$model</span>-&gt;<span class="title function_ invoke__">save</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在主模型删除之前删除所有附件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beforeDelete</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;owner-&gt;&#123;<span class="variable language_">$this</span>-&gt;uploadedFiles&#125; <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">            <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">delete</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2023-08-30</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFilesUrl</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">\Yii</span>::<span class="title function_ invoke__">getAlias</span>(<span class="variable">$this</span>-&gt;saveUrl) . DIRECTORY_SEPARATOR . <span class="variable">$url</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="php" scheme="http://example.com/categories/php/"/>
    
    <category term="yii" scheme="http://example.com/categories/php/yii/"/>
    
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
    <category term="yii" scheme="http://example.com/tags/yii/"/>
    
  </entry>
  
  <entry>
    <title>备忘录</title>
    <link href="http://example.com/2023/08/24/test/pass/"/>
    <id>http://example.com/2023/08/24/test/pass/</id>
    <published>2023-08-24T01:24:14.000Z</published>
    <updated>2023-08-24T01:26:59.944Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>备份记录<br><code>oopdingtalk.com &#39;Jinx525617 #123&#39;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="备忘录" scheme="http://example.com/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>博客构建同步仓库</title>
    <link href="http://example.com/2023/08/16/%E5%B7%A5%E5%85%B7/hexo/"/>
    <id>http://example.com/2023/08/16/%E5%B7%A5%E5%85%B7/hexo/</id>
    <published>2023-08-16T00:53:39.000Z</published>
    <updated>2023-08-16T00:58:23.819Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>使用国内访问源快速 vercel静态托管</code></p><hr><p>1.仓库地址<a href="https://vercel.com/jianqiangsong/blog">https://vercel.com/jianqiangsong/blog</a></p><hr><p>2.访问地址<a href="https://blog-jianqiangsong.vercel.app/">同步博客地址 https://blog-jianqiangsong.vercel.app</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="hexo" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/hexo/"/>
    
    
    <category term="博客构建" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>openai 图片使用demo</title>
    <link href="http://example.com/2023/08/16/%E5%B7%A5%E5%85%B7/openai/"/>
    <id>http://example.com/2023/08/16/%E5%B7%A5%E5%85%B7/openai/</id>
    <published>2023-08-16T00:44:03.000Z</published>
    <updated>2023-08-16T00:58:51.837Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>openiakey: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</code></p><p><code>生成图片，使用代理访问的openai</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl https://api.openai-proxy.com/v1/images/generations \</span><br><span class="line"> -H &quot;Content-Type: application/json&quot; \</span><br><span class="line"> -H &quot;Authorization: Bearer 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&quot; \</span><br><span class="line"> -d &#x27;&#123;</span><br><span class="line">   &quot;prompt&quot;: &quot;生成一张小王八的照片&quot;,</span><br><span class="line">   &quot;n&quot;: 2,</span><br><span class="line">   &quot;size&quot;: &quot;256x256&quot;</span><br><span class="line"> &#125;&#x27;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="openai" scheme="http://example.com/categories/openai/"/>
    
    <category term="大语言模型" scheme="http://example.com/categories/openai/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/"/>
    
    
    <category term="openai" scheme="http://example.com/tags/openai/"/>
    
  </entry>
  
  <entry>
    <title>函数</title>
    <link href="http://example.com/2023/08/08/php/%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2023/08/08/php/%E5%87%BD%E6%95%B0/</id>
    <published>2023-08-08T01:37:23.000Z</published>
    <updated>2023-10-17T01:50:46.774Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>发现一个比较好用容易忽略的函数</code></p><p><code>get_headers</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断一个地址是否可以访问 </span></span><br><span class="line"><span class="comment">//302 状态码代表重定向</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$arr</span> = <span class="title function_ invoke__">get_headers</span>(<span class="string">&#x27;https://test-open.zking.com/dz/1Msvv137&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//响应结果，可以通过content-length 判断 </span></span><br><span class="line"> <span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; HTTP/<span class="number">1.1</span> <span class="number">302</span> Found</span><br><span class="line">    [Server] =&gt; <span class="title function_ invoke__">Array</span></span><br><span class="line">        (</span><br><span class="line">            [<span class="number">0</span>] =&gt; ******</span><br><span class="line">            [<span class="number">1</span>] =&gt; ******</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [Content-Length] =&gt; <span class="number">0</span></span><br><span class="line">    [Connection] =&gt; <span class="title function_ invoke__">Array</span></span><br><span class="line">        (</span><br><span class="line">            [<span class="number">0</span>] =&gt; close</span><br><span class="line">            [<span class="number">1</span>] =&gt; close</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [location] =&gt; <span class="attr">https</span>://test-open.zking.com/api/v1/insurance/nonAutoMobile/getpolicyDownload/<span class="number">21122253410023000009</span></span><br><span class="line">    [date] =&gt; <span class="title function_ invoke__">Array</span></span><br><span class="line">        (</span><br><span class="line">            [<span class="number">0</span>] =&gt; Tue, <span class="number">08</span> Aug <span class="number">2023</span> <span class="number">01</span>:<span class="number">52</span>:<span class="number">24</span> GMT</span><br><span class="line">            [<span class="number">1</span>] =&gt; Tue, <span class="number">08</span> Aug <span class="number">2023</span> <span class="number">01</span>:<span class="number">52</span>:<span class="number">25</span> GMT</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [x-envoy-upstream-service-time] =&gt; <span class="title function_ invoke__">Array</span></span><br><span class="line">        (</span><br><span class="line">            [<span class="number">0</span>] =&gt; <span class="number">81</span></span><br><span class="line">            [<span class="number">1</span>] =&gt; <span class="number">1442</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [Set-Cookie] =&gt; <span class="title function_ invoke__">Array</span></span><br><span class="line">        (</span><br><span class="line">            [<span class="number">0</span>] =&gt; hvAJjymUYBa3O=<span class="number">60</span>Tt1N123.awkhkof7ofH3MhYWigGg6G0q12mi2Pc4QhKnBw5gWoZvGiQd5pxELY81iyYE6YcTHQ8LLwiyHCHkVA; Path=/; expires=Fri, <span class="number">05</span> Aug <span class="number">2033</span> <span class="number">01</span>:<span class="number">52</span>:<span class="number">19</span> GMT; Secure; HttpOnly</span><br><span class="line">            [<span class="number">1</span>] =&gt; hvAJjymUYBa3O=<span class="number">60</span>Kb23jk82hM1gsG2k2MF54_7K.PDdJPJTGBuC7VHqCO_tps6JCbWBAvIx7x_FPDw9gbkXICkvy9qlYQWrTP2Jva; Path=/; expires=Fri, <span class="number">05</span> Aug <span class="number">2033</span> <span class="number">01</span>:<span class="number">52</span>:<span class="number">20</span> GMT; Secure; HttpOnly</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [<span class="number">1</span>] =&gt; HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">    [Content-Type] =&gt; application/octet-stream;charset=UTF-<span class="number">8</span></span><br><span class="line">    [pragma] =&gt; <span class="keyword">public</span></span><br><span class="line">    [expires] =&gt; <span class="number">0</span></span><br><span class="line">    [cache-control] =&gt; must-revalidate, post-check=<span class="number">0</span>, pre-check=<span class="number">0</span></span><br><span class="line">    [content-disposition] =&gt; attachment;filename=<span class="number">21122253410023000009</span>.pdf</span><br><span class="line">    [x-kong-upstream-latency] =&gt; <span class="number">1437</span></span><br><span class="line">    [x-kong-proxy-latency] =&gt; <span class="number">5</span></span><br><span class="line">    [via] =&gt; kong/<span class="number">2.5</span>.<span class="number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="PHP获取本周日期"><a href="#PHP获取本周日期" class="headerlink" title="PHP获取本周日期"></a>PHP获取本周日期</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 获取今天的日期</span></span><br><span class="line"><span class="variable">$today</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 strtotime 函数获取本周的起始日期</span></span><br><span class="line"><span class="variable">$start_of_week</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d&#x27;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&#x27;this week&#x27;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="variable">$today</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 strtotime 函数获取本周的结束日期</span></span><br><span class="line"><span class="variable">$end_of_week</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d&#x27;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&#x27;this week +6 days&#x27;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="variable">$start_of_week</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;本周起始日期是：&quot;</span> . <span class="variable">$start_of_week</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;本周结束日期是：&quot;</span> . <span class="variable">$end_of_week</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="php" scheme="http://example.com/categories/php/"/>
    
    <category term="基础" scheme="http://example.com/categories/php/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
    <category term="函数 get_headers" scheme="http://example.com/tags/%E5%87%BD%E6%95%B0-get-headers/"/>
    
  </entry>
  
</feed>
