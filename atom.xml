<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gemini`s wiki</title>
  
  <subtitle>Gemini</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-12T02:41:48.856Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Gemini</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>yii2-admin</title>
    <link href="http://example.com/2023/10/08/yii/yii2-admin/"/>
    <id>http://example.com/2023/10/08/yii/yii2-admin/</id>
    <published>2023-10-08T08:15:51.000Z</published>
    <updated>2023-10-12T02:41:48.856Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在 Yii2 中，你可以使用 RBAC（Role-Based Access Control）来控制菜单权限按钮。以下是基本步骤：</p><ol><li><p><strong>安装 Yii2 RBAC 扩展</strong>：</p><p>首先，你需要安装 Yii2 的 RBAC 扩展，可以使用 Yii2 的官方扩展 <code>yii2-admin</code>，它提供了一套强大的 RBAC 管理功能。</p><p>你可以通过 Composer 安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require mdmsoft/yii2-admin <span class="string">&quot;~2.0&quot;</span></span><br></pre></td></tr></table></figure><p>安装完成后，你可以按照文档配置和初始化 RBAC。</p></li><li><p><strong>创建角色和权限</strong>：</p><p>在 Yii2 RBAC 中，你需要创建角色和权限，然后将它们关联起来。你可以使用 <code>yii\rbac\DbManager</code> 或者其他适合你项目的 RBAC 组件来管理角色和权限。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个角色</span></span><br><span class="line"><span class="variable">$role</span> = <span class="variable">$auth</span>-&gt;<span class="title function_ invoke__">createRole</span>(<span class="string">&#x27;admin&#x27;</span>);</span><br><span class="line"><span class="variable">$auth</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="variable">$role</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个权限</span></span><br><span class="line"><span class="variable">$permission</span> = <span class="variable">$auth</span>-&gt;<span class="title function_ invoke__">createPermission</span>(<span class="string">&#x27;createPost&#x27;</span>);</span><br><span class="line"><span class="variable">$auth</span>-&gt;<span class="title function_ invoke__">add</span>(<span class="variable">$permission</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关联权限到角色</span></span><br><span class="line"><span class="variable">$auth</span>-&gt;<span class="title function_ invoke__">addChild</span>(<span class="variable">$role</span>, <span class="variable">$permission</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>在 Controller 中验证权限</strong>：</p><p>在你的控制器中，可以使用 <code>beforeAction</code> 方法来检查用户是否具有执行该操作的权限。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beforeAction</span>(<span class="params"><span class="variable">$action</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">parent</span>::<span class="title function_ invoke__">beforeAction</span>(<span class="variable">$action</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查当前用户是否有权限执行该操作</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Yii</span>::<span class="variable">$app</span>-&gt;user-&gt;<span class="title function_ invoke__">can</span>(<span class="string">&#x27;createPost&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ForbiddenHttpException</span>(<span class="string">&#x27;你没有权限执行该操作&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>在视图中显示按钮</strong>：</p><p>在视图文件中，可以使用 <code>yii\rbac\CheckAccessWidget</code> 小部件来根据用户的权限显示或隐藏按钮。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">rbac</span>\<span class="title">CheckAccessWidget</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示按钮，如果用户有 &#x27;createPost&#x27; 权限</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title class_">CheckAccessWidget</span>::<span class="title function_ invoke__">widget</span>([</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;createPost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;yes&#x27;</span> =&gt; <span class="title class_">Html</span>::<span class="title function_ invoke__">a</span>(<span class="string">&#x27;Create Post&#x27;</span>, [<span class="string">&#x27;post/create&#x27;</span>]),</span><br><span class="line">]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>在视图中控制菜单显示</strong>：</p><p>你可以使用 <code>Yii::$app-&gt;user-&gt;can()</code> 方法来在视图中根据用户的权限来控制菜单的显示或隐藏。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title class_">Yii</span>::<span class="variable">$app</span>-&gt;user-&gt;<span class="title function_ invoke__">can</span>(<span class="string">&#x27;createPost&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title class_">Html</span>::<span class="title function_ invoke__">a</span>(<span class="string">&#x27;Create Post&#x27;</span>, [<span class="string">&#x27;post/create&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>以上步骤提供了一个基本的 Yii2 RBAC 权限控制方案。通过创建角色、权限以及在控制器和视图中验证权限，你可以实现对菜单按钮的权限控制。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="php" scheme="http://example.com/categories/php/"/>
    
    <category term="yii" scheme="http://example.com/categories/php/yii/"/>
    
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
    <category term="yii" scheme="http://example.com/tags/yii/"/>
    
  </entry>
  
  <entry>
    <title>linux</title>
    <link href="http://example.com/2023/09/27/%E5%B7%A5%E5%85%B7/linux/"/>
    <id>http://example.com/2023/09/27/%E5%B7%A5%E5%85%B7/linux/</id>
    <published>2023-09-27T06:24:55.000Z</published>
    <updated>2023-09-27T06:31:50.139Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>你可以使用 <code>grep</code> 命令来查询文件中的关键内容，并结合 <code>head</code> 和 <code>tail</code> 命令来显示前后的行数。以下是具体的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&#x27;关键词&#x27;</span> 文件名 | <span class="built_in">head</span> -n 100 &amp;&amp; grep <span class="string">&#x27;关键词&#x27;</span> 文件名 | <span class="built_in">tail</span> -n 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">grep <span class="string">&#x27;MY20230923090G4T03&#x27;</span> sjq_org_c23-pro238.log | <span class="built_in">head</span> -n 100 &amp;&amp; grep <span class="string">&#x27;MY20230923090G4T03&#x27;</span> sjq_org_c23-pro238.log | <span class="built_in">tail</span> -n 100</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解释：</p><ul><li><code>grep &#39;关键词&#39; 文件名</code> 会在指定的文件中搜索包含关键词的行。</li><li><code>head -n 100</code> 会显示前100行。</li><li><code>tail -n 100</code> 会显示最后100行。</li></ul><p>如果你想在一个命令中实现，可以使用 <code>awk</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;/MY20230923090G4T03/&#123;a=NR+100&#125; a&amp;&amp;NR&lt;=a&#x27;</span> sjq_org_c23-pro238.log</span><br></pre></td></tr></table></figure><p>这个命令会在文件中查找包含关键词的行，并显示每个匹配行的前后100行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="工具" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>Yii2 行为类</title>
    <link href="http://example.com/2023/08/28/yii/yii3/"/>
    <id>http://example.com/2023/08/28/yii/yii3/</id>
    <published>2023-08-28T08:00:04.000Z</published>
    <updated>2023-08-30T03:03:17.525Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="yii2-Behavior-行为的使用，代码示例"><a href="#yii2-Behavior-行为的使用，代码示例" class="headerlink" title="yii2 Behavior 行为的使用，代码示例"></a>yii2 Behavior 行为的使用，代码示例</h3><p>1.定义一个类继承行为基础类<br>2.实现event方法触发事件重写</p><p>如下是扩展模型Model的类方法 进行程序的解耦设计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">common</span>\<span class="title class_">behaviors</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">Behavior</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">BaseActiveRecord</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">UploadedFile</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 行为事件 测试类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> app\common\behaviors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@class</span> AttachmentsBehavior</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023-08-30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AttachmentsBehavior</span> <span class="keyword">extends</span> <span class="title">Behavior</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_files</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要上传的文件属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$uploadFiles</span> = <span class="string">&#x27;uploadfiles&#x27;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已经上传了的文件属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$uploadedFiles</span> = <span class="string">&#x27;uploadedfiles&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$savePath</span> = <span class="string">&#x27;@common/upload&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$saveUrl</span> = <span class="string">&#x27;@common/uploads&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">events</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="title class_">BaseActiveRecord</span>::<span class="variable constant_">EVENT_BEFORE_VALIDATE</span> =&gt; <span class="string">&#x27;beforeValidate&#x27;</span>,</span><br><span class="line">            <span class="title class_">BaseActiveRecord</span>::<span class="variable constant_">EVENT_AFTER_VALIDATE</span> =&gt; <span class="string">&#x27;beforeValidate1&#x27;</span>,</span><br><span class="line">            <span class="title class_">BaseActiveRecord</span>::<span class="variable constant_">EVENT_AFTER_INSERT</span> =&gt; <span class="string">&#x27;afterSave&#x27;</span>,</span><br><span class="line">            <span class="title class_">BaseActiveRecord</span>::<span class="variable constant_">EVENT_AFTER_UPDATE</span> =&gt; <span class="string">&#x27;afterSave&#x27;</span>,</span><br><span class="line">            <span class="title class_">BaseActiveRecord</span>::<span class="variable constant_">EVENT_BEFORE_DELETE</span> =&gt; <span class="string">&#x27;beforeDelete&#x27;</span>,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is invoked before validation starts.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beforeValidate1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_files = <span class="title class_">UploadedFile</span>::<span class="title function_ invoke__">getInstances</span>(<span class="variable">$this</span>-&gt;owner, <span class="variable">$this</span>-&gt;uploadFiles);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回拥有者的唯一Id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getIdentityId</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;owner-&gt;<span class="title function_ invoke__">className</span>() . <span class="string">&#x27;.&#x27;</span> . <span class="variable language_">$this</span>-&gt;owner-&gt;id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 明确拥有者与附件的关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAttachments</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;owner-&gt;<span class="title function_ invoke__">hasMany</span>(<span class="title class_">Attachments</span>::<span class="title function_ invoke__">className</span>(), [<span class="string">&#x27;ownerId&#x27;</span> =&gt; <span class="string">&#x27;identityId&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在主模型保存后挨个保存附件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">afterSave</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;_files <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">            <span class="variable">$model</span> = <span class="keyword">new</span> <span class="title class_">Attachments</span>();</span><br><span class="line">            <span class="variable">$model</span>-&gt;fileName = <span class="variable">$file</span>-&gt;name;</span><br><span class="line">            <span class="variable">$model</span>-&gt;url = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Ymd&#x27;</span>) . <span class="title class_">\Yii</span>::<span class="variable">$app</span>-&gt;<span class="title function_ invoke__">getSecurity</span>()-&gt;<span class="title function_ invoke__">generateRandomString</span>(<span class="number">8</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>-&gt;extension;</span><br><span class="line">            <span class="variable">$model</span>-&gt;ownerId = <span class="variable language_">$this</span>-&gt;owner-&gt;identityId;</span><br><span class="line">            <span class="variable">$model</span>-&gt;savePath = <span class="title class_">\Yii</span>::<span class="title function_ invoke__">getAlias</span>(<span class="variable">$this</span>-&gt;savePath);</span><br><span class="line">            <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">saveAs</span>(<span class="title class_">\Yii</span>::<span class="title function_ invoke__">getAlias</span>(<span class="variable">$this</span>-&gt;savePath) . DIRECTORY_SEPARATOR . <span class="variable">$model</span>-&gt;url);</span><br><span class="line">            <span class="variable">$model</span>-&gt;<span class="title function_ invoke__">save</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在主模型删除之前删除所有附件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">beforeDelete</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;owner-&gt;&#123;<span class="variable language_">$this</span>-&gt;uploadedFiles&#125; <span class="keyword">as</span> <span class="variable">$file</span>) &#123;</span><br><span class="line">            <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">delete</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2023-08-30</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFilesUrl</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">\Yii</span>::<span class="title function_ invoke__">getAlias</span>(<span class="variable">$this</span>-&gt;saveUrl) . DIRECTORY_SEPARATOR . <span class="variable">$url</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="php" scheme="http://example.com/categories/php/"/>
    
    <category term="yii" scheme="http://example.com/categories/php/yii/"/>
    
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
    <category term="yii" scheme="http://example.com/tags/yii/"/>
    
  </entry>
  
  <entry>
    <title>备忘录</title>
    <link href="http://example.com/2023/08/24/test/pass/"/>
    <id>http://example.com/2023/08/24/test/pass/</id>
    <published>2023-08-24T01:24:14.000Z</published>
    <updated>2023-08-24T01:26:59.944Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>备份记录<br><code>oopdingtalk.com &#39;Jinx525617 #123&#39;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="备忘录" scheme="http://example.com/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>博客构建同步仓库</title>
    <link href="http://example.com/2023/08/16/%E5%B7%A5%E5%85%B7/hexo/"/>
    <id>http://example.com/2023/08/16/%E5%B7%A5%E5%85%B7/hexo/</id>
    <published>2023-08-16T00:53:39.000Z</published>
    <updated>2023-08-16T00:58:23.819Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>使用国内访问源快速 vercel静态托管</code></p><hr><p>1.仓库地址<a href="https://vercel.com/jianqiangsong/blog">https://vercel.com/jianqiangsong/blog</a></p><hr><p>2.访问地址<a href="https://blog-jianqiangsong.vercel.app/">同步博客地址 https://blog-jianqiangsong.vercel.app</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="hexo" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/hexo/"/>
    
    
    <category term="博客构建" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2%E6%9E%84%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>openai 图片使用demo</title>
    <link href="http://example.com/2023/08/16/%E5%B7%A5%E5%85%B7/openai/"/>
    <id>http://example.com/2023/08/16/%E5%B7%A5%E5%85%B7/openai/</id>
    <published>2023-08-16T00:44:03.000Z</published>
    <updated>2023-08-16T00:58:51.837Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>openiakey: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</code></p><p><code>生成图片，使用代理访问的openai</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl https://api.openai-proxy.com/v1/images/generations \</span><br><span class="line"> -H &quot;Content-Type: application/json&quot; \</span><br><span class="line"> -H &quot;Authorization: Bearer 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&quot; \</span><br><span class="line"> -d &#x27;&#123;</span><br><span class="line">   &quot;prompt&quot;: &quot;生成一张小王八的照片&quot;,</span><br><span class="line">   &quot;n&quot;: 2,</span><br><span class="line">   &quot;size&quot;: &quot;256x256&quot;</span><br><span class="line"> &#125;&#x27;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="openai" scheme="http://example.com/categories/openai/"/>
    
    <category term="大语言模型" scheme="http://example.com/categories/openai/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/"/>
    
    
    <category term="openai" scheme="http://example.com/tags/openai/"/>
    
  </entry>
  
  <entry>
    <title>函数</title>
    <link href="http://example.com/2023/08/08/php/%E5%87%BD%E6%95%B0/"/>
    <id>http://example.com/2023/08/08/php/%E5%87%BD%E6%95%B0/</id>
    <published>2023-08-08T01:37:23.000Z</published>
    <updated>2023-10-17T01:50:46.774Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>发现一个比较好用容易忽略的函数</code></p><p><code>get_headers</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断一个地址是否可以访问 </span></span><br><span class="line"><span class="comment">//302 状态码代表重定向</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$arr</span> = <span class="title function_ invoke__">get_headers</span>(<span class="string">&#x27;https://test-open.zking.com/dz/1Msvv137&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//响应结果，可以通过content-length 判断 </span></span><br><span class="line"> <span class="title function_ invoke__">Array</span></span><br><span class="line">(</span><br><span class="line">    [<span class="number">0</span>] =&gt; HTTP/<span class="number">1.1</span> <span class="number">302</span> Found</span><br><span class="line">    [Server] =&gt; <span class="title function_ invoke__">Array</span></span><br><span class="line">        (</span><br><span class="line">            [<span class="number">0</span>] =&gt; ******</span><br><span class="line">            [<span class="number">1</span>] =&gt; ******</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [Content-Length] =&gt; <span class="number">0</span></span><br><span class="line">    [Connection] =&gt; <span class="title function_ invoke__">Array</span></span><br><span class="line">        (</span><br><span class="line">            [<span class="number">0</span>] =&gt; close</span><br><span class="line">            [<span class="number">1</span>] =&gt; close</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [location] =&gt; <span class="attr">https</span>://test-open.zking.com/api/v1/insurance/nonAutoMobile/getpolicyDownload/<span class="number">21122253410023000009</span></span><br><span class="line">    [date] =&gt; <span class="title function_ invoke__">Array</span></span><br><span class="line">        (</span><br><span class="line">            [<span class="number">0</span>] =&gt; Tue, <span class="number">08</span> Aug <span class="number">2023</span> <span class="number">01</span>:<span class="number">52</span>:<span class="number">24</span> GMT</span><br><span class="line">            [<span class="number">1</span>] =&gt; Tue, <span class="number">08</span> Aug <span class="number">2023</span> <span class="number">01</span>:<span class="number">52</span>:<span class="number">25</span> GMT</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [x-envoy-upstream-service-time] =&gt; <span class="title function_ invoke__">Array</span></span><br><span class="line">        (</span><br><span class="line">            [<span class="number">0</span>] =&gt; <span class="number">81</span></span><br><span class="line">            [<span class="number">1</span>] =&gt; <span class="number">1442</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [Set-Cookie] =&gt; <span class="title function_ invoke__">Array</span></span><br><span class="line">        (</span><br><span class="line">            [<span class="number">0</span>] =&gt; hvAJjymUYBa3O=<span class="number">60</span>Tt1N123.awkhkof7ofH3MhYWigGg6G0q12mi2Pc4QhKnBw5gWoZvGiQd5pxELY81iyYE6YcTHQ8LLwiyHCHkVA; Path=/; expires=Fri, <span class="number">05</span> Aug <span class="number">2033</span> <span class="number">01</span>:<span class="number">52</span>:<span class="number">19</span> GMT; Secure; HttpOnly</span><br><span class="line">            [<span class="number">1</span>] =&gt; hvAJjymUYBa3O=<span class="number">60</span>Kb23jk82hM1gsG2k2MF54_7K.PDdJPJTGBuC7VHqCO_tps6JCbWBAvIx7x_FPDw9gbkXICkvy9qlYQWrTP2Jva; Path=/; expires=Fri, <span class="number">05</span> Aug <span class="number">2033</span> <span class="number">01</span>:<span class="number">52</span>:<span class="number">20</span> GMT; Secure; HttpOnly</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    [<span class="number">1</span>] =&gt; HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">    [Content-Type] =&gt; application/octet-stream;charset=UTF-<span class="number">8</span></span><br><span class="line">    [pragma] =&gt; <span class="keyword">public</span></span><br><span class="line">    [expires] =&gt; <span class="number">0</span></span><br><span class="line">    [cache-control] =&gt; must-revalidate, post-check=<span class="number">0</span>, pre-check=<span class="number">0</span></span><br><span class="line">    [content-disposition] =&gt; attachment;filename=<span class="number">21122253410023000009</span>.pdf</span><br><span class="line">    [x-kong-upstream-latency] =&gt; <span class="number">1437</span></span><br><span class="line">    [x-kong-proxy-latency] =&gt; <span class="number">5</span></span><br><span class="line">    [via] =&gt; kong/<span class="number">2.5</span>.<span class="number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="PHP获取本周日期"><a href="#PHP获取本周日期" class="headerlink" title="PHP获取本周日期"></a>PHP获取本周日期</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 获取今天的日期</span></span><br><span class="line"><span class="variable">$today</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 strtotime 函数获取本周的起始日期</span></span><br><span class="line"><span class="variable">$start_of_week</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d&#x27;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&#x27;this week&#x27;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="variable">$today</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 strtotime 函数获取本周的结束日期</span></span><br><span class="line"><span class="variable">$end_of_week</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d&#x27;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="string">&#x27;this week +6 days&#x27;</span>, <span class="title function_ invoke__">strtotime</span>(<span class="variable">$start_of_week</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;本周起始日期是：&quot;</span> . <span class="variable">$start_of_week</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;本周结束日期是：&quot;</span> . <span class="variable">$end_of_week</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="php" scheme="http://example.com/categories/php/"/>
    
    <category term="基础" scheme="http://example.com/categories/php/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
    <category term="函数 get_headers" scheme="http://example.com/tags/%E5%87%BD%E6%95%B0-get-headers/"/>
    
  </entry>
  
  <entry>
    <title>yii2</title>
    <link href="http://example.com/2023/07/28/yii/yii2/"/>
    <id>http://example.com/2023/07/28/yii/yii2/</id>
    <published>2023-07-28T08:00:04.000Z</published>
    <updated>2023-08-30T01:49:10.326Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>yii2 干货知识集合</p><p><code>https://github.com/forecho/awesome-yii2</code></p><p><a href="https://github.com/forecho/awesome-yii2">链接地址</a></p><p>件一共有15个与加密解密（&amp;编码）相关的公共方法</p></p><ol><li>encryptByPassword</li><li>encryptByKey</li><li>decryptByPassword</li><li>decryptByKey</li><li>hkdf</li><li>pbkdf2</li><li>hashData</li><li>validateData</li><li>generateRandomKey</li><li>generateRandomString</li><li>generatePasswordHash</li><li>validatePassword</li><li>compareString</li><li>maskToken</li><li>unmaskToken</li></ol><p>我想有一些你一定没见过，没关系，我们一一去了解。</p><h2>generateRandomString</h2><p>之所以先说<strong>generateRandomString</strong>是因为它最常用，起码我是这样。</p><pre><code class="php">public function generateRandomString($length = 32)&#123;...&#125;</code></pre><p>生成一个随机的字符串，参数$length代表这个字符串的长度，默认32位。值得说明的是这个字符串的取值为范围是[A-Za-z0-9_-]。</p><h2>generatePasswordHash &amp; validatePassword</h2><p>generatePasswordHash &amp; validatePassword经常被用来加密用户密码以及对密码是否正确的验证，自从MD5可能被碰撞后，我们用yii2开发应用的时候，generatePasswordHash函数对密码进行加密就成为首选了，它调用了crypt函数。</p><p>一般用法如下</p><pre><code class="php">// 使用generatePasswordHash为用户的密码加密，$hash存储到库中$hash = Yii::$app-&gt;getSecurity()-&gt;generatePasswordHash($password);<p>&#x2F;&#x2F; 使用validatePassword对密码进行验证<br>if(Yii::$app-&gt;getSecurity()-&gt;validatePassword($password, $hash))&#123;<br>&#x2F;&#x2F; 密码正确<br>&#125;else&#123;<br>&#x2F;&#x2F; 密码错误<br>&#125;</code></pre></p><h2>generateRandomKey</h2><p>和<strong>generateRandomString</strong>类似，生成一个随机的串，参数为长度，默认为32位，区别在于<strong>generateRandomKey</strong>生成的不是ASCII。</p><p>简单的说 <strong>generateRandomString</strong> 约等于 base64_encode(<strong>generateRandomKey</strong>)。</p><h2>encryptByPassword &amp; decryptByPassword</h2><p>编码和解码函数，使用一个秘钥对数据进行编码，然后通过此秘钥在对编码后的数据进行解码。</p><p>例子</p><pre><code class="php">$dat = Yii::$app-&gt;security-&gt;encryptByPassword("hello","3166886");echo Yii::$app-&gt;security-&gt;encryptByPassword($dat,"3166886");// hello</code></pre><p><strong>要注意，通过上面得到的编码后的数据不是ASCII，可以通过base64_encode和base64_decode在外层包装下。</strong></p><h2>encryptByKey &amp;  decryptByKey</h2><p>同样是一组编码和解码函数，比通过密码的方式要快。函数声明为</p><pre><code class="php">public function encryptByKey($data, $inputKey, $info = null)&#123;&#125;<p>public function decryptByKey($data, $inputKey, $info &#x3D; null)&#123;&#125;</code></pre></p><p>encryptByKey &amp;  decryptByKey 存在着第三个参数，比如我们可以传递会员的ID等，这样此信息将和$inputKey一起作为加密解密的钥匙。</p><h2>hkdf</h2><p><strong>使用标准的 HKDF 算法从给定的输入键中导出一个键。</strong>在PHP7+使用的是hash_hkdf方法，小于PHP7使用hash_hmac方法。</p><h2>pbkdf2</h2><p>使用标准的 PBKDF2 算法从给定的密码导出一个密钥。该方法可以用来进行密码加密，不过yii2有更好的密码加密方案 <strong>generatePasswordHash</strong>。</p><h2>hashData和validateData</h2><p>有的时候为了防止内容被篡改，我们需要对数据进行一些标记，hashData和validateData就是完成这个任务的组合。</p><p><strong>hashData</strong> 用来对原始数据进行<strong>加数据前缀</strong>，比如如下代码</p><pre><code class="php">$result = Yii::$app-&gt;security-&gt;hashData("hello",'123456',false);// ac28d602c767424d0c809edebf73828bed5ce99ce1556f4df8e223faeec60eddhello</code></pre><p>你看到了在hello的前面多了一组字符，这组字符会随着原始数据的不同而变化。这样我们就对数据进行了特殊的防止篡改标记，接下来是validateData上场了。</p><p>注意：hashData的第三个参数代表生成的哈希值是否为原始二进制格式. 如果为<code>false</code>, 则会生成小写十六进制数字.</p><p><strong>validateData</strong> 对已经加了数据前缀的数据进行检测，如下代码</p><pre><code class="php">$result = Yii::$app-&gt;security-&gt;validateData("ac28d602c767424d0c809edebf73828bed5ce99ce1556f4df8e223faeec60eddhello",'123456',false);// hello</code></pre><p>如果返回了原始的字符串则表示验证通过，否则会返回假。</p><p>validateData 函数的第三个参数应该与使用  <strong>hashData()</strong> 生成数据时的值相同. 它指示数据中的散列值是否是二进制格式. 如果为<code>false</code>, 则表示散列值仅由小写十六进制数字组成. 将生成十六进制数字.</p><h2>compareString</h2><p>可防止时序攻击的字符串比较，用法非常简单。</p><pre><code class="php">Yii::$app-&gt;security-&gt;compareString("abc",'abc');</code></pre><p>结果为真则相等，否则不相等。</p><p>那么什么是时序攻击那？我来举一个简单的例子。</p><pre><code class="php">if($code == Yii::$app-&gt;request-&gt;get('code'))&#123;<p>&#125;</code></pre></p><p>上面的比较逻辑，两个字符串是从第一位开始逐一进行比较的，发现不同就立即返回 false，那么通过计算返回的速度就知道了大概是哪一位开始不同的，这样就实现了电影中经常出现的按位破解密码的场景。</p><p>而使用 compareString 比较两个字符串，无论字符串是否相等，函数的时间消耗是恒定的，这样可以有效的防止时序攻击。</p><h2>maskToken &amp;&amp; unmaskToken</h2><p>maskToken用于掩盖真实token且不可以压缩，同一个token最后生成了不同的随机令牌，在yii2的csrf功能上就使用了maskToken，原理并不复杂，我们看下源码。</p><pre><code class="php">public function maskToken($token)&#123;    $mask = $this-&gt;generateRandomKey(StringHelper::byteLength($token));    return StringHelper::base64UrlEncode($mask . ($mask ^ $token));&#125;</code></pre><p>而unmaskToken目的也很明确，用于得到被maskToken掩盖的token。</p><p>接下来我们看一个例子代码</p><pre><code class="php">$token = Yii::$app-&gt;security-&gt;maskToken("123456");echo Yii::$app-&gt;security-&gt;unmaskToken($token);// 结果为 123456</code></pre><p>最后我们总结下</p><ul><li>加密/解密: encryptByKey()、decryptByKey()、 encryptByPassword() 和 decryptByPassword()；</li><li>使用标准算法的密钥推导: pbkdf2() 和 hkdf();</li><li>防止数据篡改: hashData() 和 validateData();</li><li>密码验证: generatePasswordHash() 和 validatePassword()</li>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="php" scheme="http://example.com/categories/php/"/>
    
    <category term="yii" scheme="http://example.com/categories/php/yii/"/>
    
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
    <category term="yii" scheme="http://example.com/tags/yii/"/>
    
  </entry>
  
  <entry>
    <title>IOC/DI</title>
    <link href="http://example.com/2023/07/21/php/ioc/"/>
    <id>http://example.com/2023/07/21/php/ioc/</id>
    <published>2023-07-21T01:29:46.000Z</published>
    <updated>2024-03-06T08:59:16.801Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-一句话说明依赖注入"><a href="#1-一句话说明依赖注入" class="headerlink" title="1.一句话说明依赖注入"></a>1.一句话说明依赖注入</h3><p>因为大多数应用程序都是由两个或者更多的类通过彼此合作来实现业务逻辑，这使得每个对象都需要获取与其合作的对象（也就是它所依赖的对象）的引用。如果这个获取过程要靠自身实现，那么将导致代码高度耦合并且难以维护和调试</p><p>不是我自身的，却是我需要的，都是我所依赖的。一切需要外部提供的，都是需要进行依赖注入的。</p><h3 id="2-上面俩种方法代码很清晰，但是当我们需要注入很多个依赖时，意味着又要增加很多行，会比较难以管理。"><a href="#2-上面俩种方法代码很清晰，但是当我们需要注入很多个依赖时，意味着又要增加很多行，会比较难以管理。" class="headerlink" title="2.上面俩种方法代码很清晰，但是当我们需要注入很多个依赖时，意味着又要增加很多行，会比较难以管理。"></a>2.上面俩种方法代码很清晰，但是当我们需要注入很多个依赖时，意味着又要增加很多行，会比较难以管理。</h3><p>比较好的解决办法是 建立一个class作为所有依赖关系的container，在这个class中可以存放、创建、获取、查找需要的依赖关系。先来了解一下IOC的概念</p><h3 id="3-控制反转-（Inversion-Of-Control-IOC）"><a href="#3-控制反转-（Inversion-Of-Control-IOC）" class="headerlink" title="3.控制反转 （Inversion Of Control, IOC）"></a>3.控制反转 （Inversion Of Control, IOC）</h3><p>控制反转 是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做 依赖注入（Dependency Injection, DI）, 还有一种叫”依赖查找”（Dependency<br>Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ioc</span> </span>&#123;</span><br><span class="line"> <span class="keyword">protected</span> <span class="variable">$db_conn</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">make_book</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="variable">$new_book</span> = <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line"> <span class="variable">$new_book</span>-&gt;<span class="title function_ invoke__">set_db</span>(<span class="built_in">self</span>::<span class="variable">$db_conn</span>);</span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line"> <span class="comment">//...</span></span><br><span class="line"> <span class="comment">//其他的依赖注入</span></span><br><span class="line"> <span class="keyword">return</span> <span class="variable">$new_book</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，如果获取一个book实例，只需要执行$newone &#x3D; Ioc::makebook();</p><p>以上是container的一个具体实例，最好还是不要把具体的某个依赖注入写成方法，采用registry注册，get获取比较好</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制反转类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ioc</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@var</span> array 注册的依赖数组</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="built_in">static</span> <span class="variable">$registry</span> = <span class="keyword">array</span>();</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 添加一个 resolve （匿名函数）到 registry 数组中</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> string $name 依赖标识</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> Closure $resolve 一个匿名函数，用来创建实例</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"><span class="variable">$name</span>, <span class="built_in">Closure</span> <span class="variable">$resolve</span></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">static</span>::<span class="variable">$registry</span>[<span class="variable">$name</span>] = <span class="variable">$resolve</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 返回一个实例</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> string $name 依赖的标识</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@throws</span> \Exception</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params"><span class="variable">$name</span></span>) </span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">static</span>::<span class="title function_ invoke__">registered</span>(<span class="variable">$name</span>)) &#123;</span><br><span class="line">           <span class="variable">$name</span> = <span class="built_in">static</span>::<span class="variable">$registry</span>[<span class="variable">$name</span>];</span><br><span class="line">           <span class="keyword">return</span> <span class="variable">$name</span>();</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">\Exception</span>(<span class="string">&quot;Nothing registered with that name&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 查询某个依赖实例是否存在</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> string $name</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">registered</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="title function_ invoke__">array_key_exists</span>(<span class="variable">$name</span>, <span class="built_in">static</span>::<span class="variable">$registry</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在就可以通过如下方式来注册和注入一个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Ioc</span>::<span class="title function_ invoke__">register</span>(<span class="string">&quot;book&quot;</span>, function () &#123;</span><br><span class="line"> <span class="variable">$book</span> = <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line"> <span class="variable">$book</span>-&gt;<span class="title function_ invoke__">setdb</span>(<span class="string">&#x27;db&#x27;</span>);</span><br><span class="line"> <span class="variable">$book</span>-&gt;<span class="title function_ invoke__">setfile</span>(<span class="string">&#x27;file&#x27;</span>); </span><br><span class="line"> <span class="keyword">return</span> <span class="variable">$book</span>;</span><br><span class="line">&#125;); </span><br><span class="line"><span class="comment">// 注入依赖</span></span><br><span class="line"><span class="variable">$book</span> = <span class="title class_">Ioc</span>::<span class="title function_ invoke__">resolve</span>(<span class="string">&#x27;book&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="4-问题汇总"><a href="#4-问题汇总" class="headerlink" title="4.问题汇总"></a>4.问题汇总</h3><h4 id="参与者都有谁？"><a href="#参与者都有谁？" class="headerlink" title="参与者都有谁？"></a>参与者都有谁？</h4><p>答：一般有三方参与者，一个是某个对象；一个是IoC&#x2F;DI的容器；另一个是某个对象的外部资源。又要名词解释一下，某个对象指的就是任意的、普通的Java对象;<br>IoC&#x2F;DI的容器简单点说就是指用来实现IoC&#x2F;DI功能的一个框架程序；对象的外部资源指的就是对象需要的，但是是从对象外部获取的，都统称资源，比如：对象需要的其它对象、或者是对象需要的文件资源等等。</p><h4 id="依赖：谁依赖于谁？为什么会有依赖？"><a href="#依赖：谁依赖于谁？为什么会有依赖？" class="headerlink" title="依赖：谁依赖于谁？为什么会有依赖？"></a>依赖：谁依赖于谁？为什么会有依赖？</h4><p>答：某个对象依赖于IoC&#x2F;DI的容器。依赖是不可避免的，在一个项目中，各个类之间有各种各样的关系，不可能全部完全独立，这就形成了依赖。传统的开发是使用其他类时直接调用，这会形成强耦合，这是要避免的。依赖注入借用容器转移了被依赖对象实现解耦。</p><h4 id="注入：谁注入于谁？到底注入什么？"><a href="#注入：谁注入于谁？到底注入什么？" class="headerlink" title="注入：谁注入于谁？到底注入什么？"></a>注入：谁注入于谁？到底注入什么？</h4><p>答：通过容器向对象注入其所需要的外部资源</p><h4 id="控制反转：谁控制谁？控制什么？为什么叫反转？"><a href="#控制反转：谁控制谁？控制什么？为什么叫反转？" class="headerlink" title="控制反转：谁控制谁？控制什么？为什么叫反转？"></a>控制反转：谁控制谁？控制什么？为什么叫反转？</h4><p>答：IoC&#x2F;DI的容器控制对象，主要是控制对象实例的创建。反转是相对于正向而言的，那么什么算是正向的呢？考虑一下常规情况下的应用程序，如果要在A里面使用C，你会怎么做呢？当然是直接去创建C的对象，也就是说，是在A类中主动去获取所需要的外部资源C，这种情况被称为正向的。那么什么是反向呢？就是A类不再主动去获取C，而是被动等待，等待IoC&#x2F;DI的容器获取一个C的实例，然后反向的注入到A类中。</p><h4 id="依赖注入和控制反转是同一概念吗？"><a href="#依赖注入和控制反转是同一概念吗？" class="headerlink" title="依赖注入和控制反转是同一概念吗？"></a>依赖注入和控制反转是同一概念吗？</h4><p>答：从上面可以看出：依赖注入是从应用程序的角度在描述，可以把依赖注入描述完整点：应用程序依赖容器创建并注入它所需要的外部资源；而控制反转是从容器的角度在描述，描述完整点：容器控制应用程序，由容器反向的向应用程序注入应用程序所需要的外部资源</p><p><a href="https://learnku.com/articles/65557">参考</a><br><a href="https://www.toutiao.com/article/6737855911936655885/">参考</a><br><a href="https://learnku.com/laravel/t/2104/understanding-dependency-injection-and-inversion-of-control">参考</a></p><p>附上一个di&#x2F;ioc的写法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">db</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlDb</span> <span class="keyword">implements</span> <span class="title">db</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;MysqlDb select&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoDb</span> <span class="keyword">implements</span> <span class="title">db</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;MongoDb  select&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$db</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">db <span class="variable">$db</span></span>) //约束注入类型</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db = <span class="variable">$db</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ioc</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$binding</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params"><span class="variable">$abstract</span>, <span class="variable">$concrete</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//绑定返回一个闭包，这里还不需要执行，仅做绑定</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;binding[<span class="variable">$abstract</span>][<span class="string">&#x27;concrete&#x27;</span>] =  <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$ioc</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$concrete</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$ioc</span>-&gt;<span class="title function_ invoke__">build</span>(<span class="variable">$concrete</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params"><span class="variable">$abstract</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//获取绑定的闭包，并执行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;binding[<span class="variable">$abstract</span>][<span class="string">&#x27;concrete&#x27;</span>](<span class="variable language_">$this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">build</span>(<span class="params"><span class="variable">$concrete</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//ReflectionClass反射（reflection）类报告了一个类的有关信息</span></span><br><span class="line">        <span class="variable">$reflector</span> = <span class="keyword">new</span> <span class="title class_">ReflectionClass</span>(<span class="variable">$concrete</span>);</span><br><span class="line">        <span class="comment">//getConstructor获取类的构造函数</span></span><br><span class="line">        <span class="variable">$constructor</span> = <span class="variable">$reflector</span>-&gt;<span class="title function_ invoke__">getConstructor</span>();</span><br><span class="line">        <span class="keyword">if</span>  (<span class="title function_ invoke__">is_null</span>(<span class="variable">$constructor</span>)) &#123;</span><br><span class="line">            <span class="comment">//实例化对象  newInstance从指定的参数创建一个新的类实例</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$reflector</span>-&gt;<span class="title function_ invoke__">newInstance</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//获取构成函数的参数  getParameters获取参数</span></span><br><span class="line">            <span class="variable">$dependen</span> = <span class="variable">$constructor</span>-&gt;<span class="title function_ invoke__">getParameters</span>();</span><br><span class="line">            <span class="comment">//获取依赖 getDependencies</span></span><br><span class="line">            <span class="variable">$intances</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getDependencies</span>(<span class="variable">$dependen</span>);</span><br><span class="line">            <span class="comment">//newInstanceArgs 从给出的参数创建一个新的类实例</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$reflector</span>-&gt;<span class="title function_ invoke__">newInstanceArgs</span>(<span class="variable">$intances</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取依赖，如果存在依赖就创建依赖</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getDependencies</span>(<span class="params"><span class="variable">$dependen</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$dependencies</span> = [];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$dependen</span> <span class="keyword">as</span> <span class="variable">$paramter</span>)&#123;</span><br><span class="line">            <span class="variable">$dependencies</span>[] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">make</span>(<span class="variable">$paramter</span>-&gt;<span class="title function_ invoke__">getClass</span>()-&gt;name);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$dependencies</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ioc</span> = <span class="keyword">new</span> <span class="title class_">Ioc</span>();</span><br><span class="line"><span class="variable">$ioc</span>-&gt;<span class="title function_ invoke__">bind</span>(<span class="string">&#x27;db&#x27;</span>,<span class="string">&#x27;MysqlDb&#x27;</span>);</span><br><span class="line"><span class="variable">$ioc</span>-&gt;<span class="title function_ invoke__">bind</span>(<span class="string">&#x27;user&#x27;</span>,<span class="string">&#x27;User&#x27;</span>);</span><br><span class="line"><span class="variable">$user</span> = <span class="variable">$ioc</span>-&gt;<span class="title function_ invoke__">make</span>(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$ioc</span>-&gt;<span class="title function_ invoke__">bind</span>(<span class="string">&#x27;db&#x27;</span>,<span class="string">&#x27;MongoDb&#x27;</span>);</span><br><span class="line"><span class="variable">$user</span> = <span class="variable">$ioc</span>-&gt;<span class="title function_ invoke__">make</span>(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$ioc</span>-&gt;<span class="title function_ invoke__">bind</span>(<span class="string">&#x27;db&#x27;</span>,<span class="string">&#x27;MysqlDb&#x27;</span>);</span><br><span class="line"><span class="variable">$user</span> = <span class="variable">$ioc</span>-&gt;<span class="title function_ invoke__">make</span>(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line"><span class="variable">$user</span>-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/w15802080081/article/details/119608563?spm=1001.2014.3001.5502">文本</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="php" scheme="http://example.com/categories/php/"/>
    
    <category term="基础" scheme="http://example.com/categories/php/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="ioc" scheme="http://example.com/tags/ioc/"/>
    
    <category term="di" scheme="http://example.com/tags/di/"/>
    
  </entry>
  
  <entry>
    <title>外链文章</title>
    <link href="http://example.com/2023/07/20/%E5%B7%A5%E5%85%B7/link/"/>
    <id>http://example.com/2023/07/20/%E5%B7%A5%E5%85%B7/link/</id>
    <published>2023-07-20T08:31:45.000Z</published>
    <updated>2023-08-29T09:59:15.024Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>第三方外链</code></p><p><a href="http://easy-tips.tigerb.cn/">easy-tips</a></p><p><a href="https://github.com/samdark">yii2</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="php" scheme="http://example.com/categories/php/"/>
    
    <category term="基础" scheme="http://example.com/categories/php/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="外链" scheme="http://example.com/tags/%E5%A4%96%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>yii 请求头</title>
    <link href="http://example.com/2023/07/19/yii/yii/"/>
    <id>http://example.com/2023/07/19/yii/yii/</id>
    <published>2023-07-19T05:58:15.000Z</published>
    <updated>2023-07-19T06:06:08.165Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>平时不怎么注意到的问题， yii 模拟请求表单提交 数据json字符串 php://input 也能接受参数 实际查看debug传参是当作整个json 当作key内容 代码</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//curl 代码 模拟客户端请求</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"><span class="variable">$data</span> = [<span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;周伯通&#x27;</span>, <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;sign&#x27;</span> =&gt; <span class="string">&#x27;asdfg123456&#x27;</span>];</span><br><span class="line"><span class="variable">$url</span> = <span class="string">&#x27;sjqfront.com/bid_v3/qingjian/apply&#x27;</span>;</span><br><span class="line"><span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>(); <span class="comment">//初始化curl</span></span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);<span class="comment">//设置链接</span></span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);<span class="comment">//设置是否返回信息</span></span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_POST, <span class="number">1</span>);<span class="comment">//设置为POST方式</span></span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="keyword">array</span>(<span class="string">&#x27;Content-type: application/x-www-form-urlencoded;charset=UTF-8&#x27;</span>));<span class="comment">//设置为POST方式</span></span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_POSTFIELDS, <span class="title function_ invoke__">json_encode</span>(<span class="variable">$data</span>));<span class="comment">//POST数据</span></span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_USERAGENT, <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&quot;</span>);</span><br><span class="line"><span class="variable">$response</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);<span class="comment">//接收返回信息</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">curl_errno</span>(<span class="variable">$ch</span>)) &#123;<span class="comment">//出错则显示错误信息</span></span><br><span class="line">    <span class="keyword">print</span> <span class="title function_ invoke__">curl_error</span>(<span class="variable">$ch</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>); <span class="comment">//关闭curl链接</span></span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;1.txt&#x27;</span>,<span class="variable">$response</span>,FILE_APPEND);</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// yii响应头默认 text/html</span></span><br><span class="line"><span class="variable">$r</span> = <span class="title class_">\Yii</span>::<span class="variable">$app</span>-&gt;request-&gt;<span class="title function_ invoke__">getRawBody</span>();</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">json_decode</span>(<span class="variable">$r</span>,<span class="literal">true</span>));</span><br><span class="line"><span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="php" scheme="http://example.com/categories/php/"/>
    
    <category term="yii" scheme="http://example.com/categories/php/yii/"/>
    
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
    <category term="yii" scheme="http://example.com/tags/yii/"/>
    
  </entry>
  
  <entry>
    <title>装修</title>
    <link href="http://example.com/2023/07/18/%E7%94%9F%E6%B4%BB/%E8%A3%85%E4%BF%AE/"/>
    <id>http://example.com/2023/07/18/%E7%94%9F%E6%B4%BB/%E8%A3%85%E4%BF%AE/</id>
    <published>2023-07-18T07:49:03.000Z</published>
    <updated>2023-09-06T09:39:15.816Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><table><thead><tr><th>房贷</th><th>租房</th><th>生活费</th><th>-</th><th>-</th></tr></thead><tbody><tr><td>1900</td><td>2000</td><td>2000</td><td>-</td><td>-</td></tr></tbody></table><h3 id="装修完后-·家具-："><a href="#装修完后-·家具-：" class="headerlink" title="装修完后 ·家具 ："></a>装修完后 ·家具 ：</h3><table><thead><tr><th>家具名称</th><th>家电品牌</th><th>类型</th><th>预算价钱</th><th>实际价钱</th></tr></thead><tbody><tr><td>主卧床</td><td>-</td><td>大床(2*1.8)</td><td>3500</td><td></td></tr><tr><td>次卧床</td><td>-</td><td>大床(1.8*1.8)</td><td>2500</td><td></td></tr><tr><td>窗帘</td><td>-</td><td>三个卧室 + 客厅阳台</td><td>1500</td><td></td></tr><tr><td>空调</td><td>格力&#x2F;美的</td><td>主卧 + 次卧</td><td>4000</td><td></td></tr><tr><td>电视机</td><td>夏普</td><td>客厅</td><td>4000</td><td></td></tr><tr><td>沙发</td><td>-</td><td>客厅</td><td>5000</td><td></td></tr><tr><td>餐桌</td><td>-</td><td>餐厅(8人桌)</td><td>2000</td><td></td></tr><tr><td>冰箱</td><td>-</td><td>厨房</td><td>2000</td><td></td></tr><tr><td>洗衣机</td><td>-</td><td>阳台</td><td>2000</td><td></td></tr><tr><td>网络</td><td>-</td><td>-</td><td>1000</td><td></td></tr><tr><td>饮水机</td><td>-</td><td>-</td><td>200</td><td></td></tr></tbody></table><h3 id="实际-装修完后-·家具-："><a href="#实际-装修完后-·家具-：" class="headerlink" title="实际  装修完后 ·家具 ："></a>实际  装修完后 ·家具 ：</h3><table><thead><tr><th>家具名称</th><th>家电品牌</th><th>类型</th><th>预算价钱</th><th>实际价钱</th></tr></thead><tbody><tr><td>主卧床</td><td>-</td><td>大床(2*1.8)</td><td>5000</td><td></td></tr><tr><td>次卧床</td><td>-</td><td>大床(1.8*1.8)</td><td>1800 + 2500</td><td></td></tr><tr><td>窗帘</td><td>-</td><td>三个卧室 + 客厅阳台</td><td>2000</td><td></td></tr><tr><td>空调</td><td>格力&#x2F;美的</td><td>主卧 + 次卧</td><td>4200</td><td></td></tr><tr><td>电视机</td><td>夏普</td><td>客厅</td><td>3900</td><td></td></tr><tr><td>沙发</td><td>-</td><td>客厅</td><td>5000</td><td></td></tr><tr><td>餐桌</td><td>-</td><td>餐厅(8人桌)</td><td>200</td><td></td></tr><tr><td>冰箱</td><td>-</td><td>厨房</td><td>3500</td><td></td></tr><tr><td>洗衣机</td><td>-</td><td>阳台</td><td>2500</td><td></td></tr><tr><td>网络</td><td>-</td><td>-</td><td>98*12</td><td></td></tr><tr><td>饮水机</td><td>-</td><td>-</td><td>没买</td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="记录" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>汽车投诉车质网</title>
    <link href="http://example.com/2023/07/18/%E7%94%9F%E6%B4%BB/%E8%A3%85%E4%BF%AE-1/"/>
    <id>http://example.com/2023/07/18/%E7%94%9F%E6%B4%BB/%E8%A3%85%E4%BF%AE-1/</id>
    <published>2023-07-18T07:49:03.000Z</published>
    <updated>2023-09-28T03:45:12.399Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>尊敬的车质网：</p><p>我是一名拥有一辆XXX型号汽车的车主，我对我所购买的这辆车的质量和性能感到非常担忧和失望。在我购买这辆车之后，不久便发现了严重的方向盘问题，这让我非常担忧。</p><p>首先，我要反映的问题是方向盘过重。在驾驶过程中，我发现方向盘异常沉重，特别是在低速行驶和停车时。这使得操控变得异常困难，严重影响了驾驶安全性。在繁忙的交通中，我不得不付出更大的力气来转动方向盘，这不仅令我疲惫不堪，也增加了驾驶的风险。我相信这绝非正常状况，也严重违反了一辆车的基本行驶标准。</p><p>其次，与方向盘过重问题密切相关的是转向困难。由于方向盘异常沉重，我在转弯时遇到了严重的困难。在紧急情况下，我甚至无法迅速地正确转向，这极大地威胁了我的行车安全。我曾多次感到惊恐和无助，因为我无法准确地控制我的车辆，这让我非常担忧。</p><p>我购买这辆车的初衷是希望拥有一辆安全可靠的交通工具，但现在我却因为方向盘重、转向困难的严重问题感到十分失望和焦虑。我认为这绝不是一辆符合基本质量标准的汽车，我对这样的产品质量感到极为失望。</p><p>我诚恳地希望车质网能够尽快对我的投诉进行认真审核，并协助我解决这个严重的问题。我迫切需要厂家对这辆车的方向盘问题进行检修或更换，以确保我的行车安全。</p><p>最后，我也希望通过我的投诉，提醒其他消费者对于购买汽车时务必审慎选择，避免遭受类似的质量问题，保障自己和家人的行车安全。</p><p>再次感谢车质网对我的关注与帮助，我期待着尽快得到问题的解决。</p><p>此致，<br>[您的姓名]<br>[联系方式]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="生活" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    <category term="记录" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB/%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="生活" scheme="http://example.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>go语言</title>
    <link href="http://example.com/2023/07/18/golang/go/"/>
    <id>http://example.com/2023/07/18/golang/go/</id>
    <published>2023-07-18T06:32:25.000Z</published>
    <updated>2023-07-20T06:04:32.450Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="row">    <embed src="/pdf/Go并发模型之GMP.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href=""></a></li><li><a href=""></a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="golang" scheme="http://example.com/categories/golang/"/>
    
    <category term="基础" scheme="http://example.com/categories/golang/%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="go" scheme="http://example.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>项目笔记</title>
    <link href="http://example.com/2023/07/18/%E6%97%A5%E5%B8%B8%E9%A1%B9%E7%9B%AE%E5%A4%87%E6%B3%A8/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2023/07/18/%E6%97%A5%E5%B8%B8%E9%A1%B9%E7%9B%AE%E5%A4%87%E6%B3%A8/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</id>
    <published>2023-07-18T06:26:21.000Z</published>
    <updated>2023-07-18T06:27:44.272Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><ul><li><a href="https://learnku.com/articles/21623">促销系统1</a></li><li><a href="https://learnku.com/articles/21461">促销系统2</a></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="项目" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="笔记" scheme="http://example.com/categories/%E9%A1%B9%E7%9B%AE/%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>工具</title>
    <link href="http://example.com/2023/07/18/%E5%B7%A5%E5%85%B7/ps/"/>
    <id>http://example.com/2023/07/18/%E5%B7%A5%E5%85%B7/ps/</id>
    <published>2023-07-18T06:14:55.000Z</published>
    <updated>2023-07-18T07:52:52.946Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="vscode-快捷键"><a href="#vscode-快捷键" class="headerlink" title="vscode 快捷键"></a>vscode 快捷键</h5><p><code>选中一段文字，按shift+alt+i，可以在每行末尾出现光标 批量编辑</code></p><h5 id="phpstrom"><a href="#phpstrom" class="headerlink" title="phpstrom"></a>phpstrom</h5><p><code>一直按Alt+J</code></p><h5 id="apipost-全局设置参数"><a href="#apipost-全局设置参数" class="headerlink" title="apipost 全局设置参数"></a>apipost 全局设置参数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;token&#125;&#125;</span><br><span class="line">&#123;&#123;auth-key&#125;&#125;</span><br><span class="line">apt.<span class="property">variables</span>.<span class="title function_">set</span>(<span class="string">&#x27;token&#x27;</span>,response.<span class="property">json</span>.<span class="property">data</span>.<span class="property">token</span>);</span><br><span class="line">apt.<span class="property">variables</span>.<span class="title function_">set</span>(<span class="string">&#x27;auth-key&#x27;</span>,response.<span class="property">json</span>.<span class="property">data</span>.<span class="property">auth_key</span>);</span><br></pre></td></tr></table></figure><h5 id="chartgpt"><a href="#chartgpt" class="headerlink" title="chartgpt"></a>chartgpt</h5><p><code>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</code></p><h5 id="phpstorm-debug调式"><a href="#phpstorm-debug调式" class="headerlink" title="phpstorm debug调式"></a>phpstorm debug调式</h5><p><code>?XDEBUG_SESSION_START=PHPSTROM</code></p><h5 id="要将两行合并为一行并移除不必要的空格，请按-⌃⇧J。"><a href="#要将两行合并为一行并移除不必要的空格，请按-⌃⇧J。" class="headerlink" title="要将两行合并为一行并移除不必要的空格，请按 ⌃⇧J。"></a>要将两行合并为一行并移除不必要的空格，请按 ⌃⇧J。</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="php" scheme="http://example.com/categories/php/"/>
    
    <category term="phpstrom" scheme="http://example.com/categories/php/phpstrom/"/>
    
    
    <category term="phpstorm" scheme="http://example.com/tags/phpstorm/"/>
    
  </entry>
  
  <entry>
    <title>hyperf</title>
    <link href="http://example.com/2023/07/18/php/hyperf/"/>
    <id>http://example.com/2023/07/18/php/hyperf/</id>
    <published>2023-07-18T06:13:00.000Z</published>
    <updated>2023-07-18T06:30:26.122Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="hyperf-设置根目录静态资源访问"><a href="#hyperf-设置根目录静态资源访问" class="headerlink" title="hyperf 设置根目录静态资源访问"></a>hyperf 设置根目录静态资源访问</h3><p> config&#x2F;server.php  <a href="https://wiki.swoole.com/#/http_server?id=static_handler_locations">swoole server配置</a></p> <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;document_root&#x27;</span>            =&gt; BASE_PATH.<span class="string">&#x27;/web&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;static_handler_locations&#x27;</span> =&gt; [<span class="string">&#x27;/&#x27;</span>],</span><br><span class="line"><span class="string">&#x27;enable_static_handler&#x27;</span>    =&gt; <span class="literal">true</span>,</span><br></pre></td></tr></table></figure><blockquote><p>web目录访问 ： <a href="http://127.0.0.1:9501/index.html">http://127.0.0.1:9501/index.html</a></p></blockquote><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>hyperf 生成控制器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">php bin/hyperf.php gen:controller -N App\Wechat\Controller tt</span><br><span class="line"></span><br><span class="line">php bin/hyperf.php gen:controller -N App\Admin\Controller TalkTag</span><br><span class="line"></span><br><span class="line">php bin/hyperf.php  gen:model  --path=app/SaasModel --pool=saas  -i=BaseModel  goods_order</span><br></pre></td></tr></table></figure><h5 id="导出excel-6w数据分批导出-大概-20s-单次db-1w条数据"><a href="#导出excel-6w数据分批导出-大概-20s-单次db-1w条数据" class="headerlink" title="导出excel, 6w数据分批导出,大概 20s 单次db 1w条数据"></a>导出excel, 6w数据分批导出,大概 20s 单次db 1w条数据</h5><p><code>1.导出excel文件存放storage/xx.xls</code><br><code>2.$this-&gt;response-&gt;download(&#39;filepath&#39;,&#39;filename&#39;)</code></p><p>参考代码 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Wechat</span>\<span class="title class_">WxUtils</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpOffice</span>\<span class="title">PhpSpreadsheet</span>\<span class="title">IOFactory</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">PhpOffice</span>\<span class="title">PhpSpreadsheet</span>\<span class="title">Spreadsheet</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Excel</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sheet</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$spreadsheet</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$row</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;spreadsheet = <span class="keyword">new</span> <span class="title class_">Spreadsheet</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;spreadsheet-&gt;<span class="title function_ invoke__">setActiveSheetIndex</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sheet = <span class="variable language_">$this</span>-&gt;spreadsheet-&gt;<span class="title function_ invoke__">getActiveSheet</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;spreadsheet-&gt;<span class="title function_ invoke__">getActiveSheet</span>()-&gt;<span class="title function_ invoke__">setTitle</span>(<span class="string">&#x27;Sheet1&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setHeader</span>(<span class="params"><span class="variable">$title</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$title</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$item</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;sheet-&gt;<span class="title function_ invoke__">setCellValue</span>(<span class="title function_ invoke__">chr</span>(<span class="variable">$key</span> + <span class="number">65</span>).<span class="string">&#x27;1&#x27;</span>, <span class="variable">$item</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;row = <span class="number">2</span>; <span class="comment">// 从第二行开始</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addData</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$data</span> <span class="keyword">as</span> <span class="variable">$item</span>) &#123;</span><br><span class="line">            <span class="variable">$dataCol</span> = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable">$item</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">                <span class="comment">// 单元格内容写入</span></span><br><span class="line">                <span class="variable language_">$this</span>-&gt;sheet-&gt;<span class="title function_ invoke__">setCellValue</span>(<span class="variable">$dataCol</span>.<span class="variable">$this</span>-&gt;row, <span class="variable">$value</span>);</span><br><span class="line">                <span class="variable">$dataCol</span>++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;row++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"><span class="variable">$fileName</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;spreadsheet-&gt;<span class="title function_ invoke__">setActiveSheetIndex</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$fileName</span>    = <span class="variable">$fileName</span>.<span class="string">&#x27;.xlsx&#x27;</span>;</span><br><span class="line">        <span class="variable">$url</span>         = <span class="string">&#x27;/storage/&#x27;</span>.<span class="variable">$fileName</span>;</span><br><span class="line">        <span class="variable">$outFilename</span> = BASE_PATH.<span class="variable">$url</span>;</span><br><span class="line">        <span class="variable">$writer</span>      = <span class="title class_">IOFactory</span>::<span class="title function_ invoke__">createWriter</span>(<span class="variable">$this</span>-&gt;spreadsheet, <span class="string">&#x27;Xlsx&#x27;</span>);</span><br><span class="line">        <span class="variable">$writer</span>-&gt;<span class="title function_ invoke__">save</span>(<span class="variable">$outFilename</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;spreadsheet-&gt;<span class="title function_ invoke__">disconnectWorksheets</span>();</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;spreadsheet);</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;path&#x27;</span> =&gt; <span class="variable">$outFilename</span>, <span class="string">&#x27;filename&#x27;</span> =&gt; <span class="variable">$fileName</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="缓存-key-mutex-问题"><a href="#缓存-key-mutex-问题" class="headerlink" title="缓存 key mutex 问题"></a>缓存 key mutex 问题</h3><blockquote><p><a href="https://www.cnblogs.com/sunli/archive/2010/07/27/cache_key_mutex.html">key mutex</a></p></blockquote><blockquote><p><a href="https://timyang.net/">微博cache key</a></p></blockquote><p> 目标 ： 尽量少的线程（或者1个线程）来构建换成</p><p> 1.使用 mutex key 使用1个线程来构建缓存<br> ，其他线程等待构建缓存的线程执行完即可 </p><p> <img src="http://dl2.iteye.com/upload/attachment/0114/5770/3756710e-5dff-39e8-95af-93c7cd9bc17a.jpg" alt="image"></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> 参考代码</span><br><span class="line"> </span><br><span class="line"> String get(String key) &#123;  </span><br><span class="line">   String value = redis.get(key);  </span><br><span class="line">   if (value  == null) &#123;  </span><br><span class="line">    if (redis.setnx(key_mutex, &quot;1&quot;)) &#123;  </span><br><span class="line">        // 3 min timeout to avoid mutex holder crash  </span><br><span class="line">        redis.expire(key_mutex, 3 * 60)  </span><br><span class="line">        value = db.get(key);  </span><br><span class="line">        redis.set(key, value);  </span><br><span class="line">        redis.delete(key_mutex);  </span><br><span class="line">    &#125; else &#123;  </span><br><span class="line">        //其他线程休息50毫秒后重试  </span><br><span class="line">        Thread.sleep(50);  </span><br><span class="line">        get(key);  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><ol start="2"><li>“提前”使用互斥锁(mutex key) 在value 中设置1个 time_out 时间戳</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">v = memcache.get(key);  </span><br><span class="line">if (v == null) &#123;  </span><br><span class="line">    if (memcache.add(key_mutex, 3 * 60 * 1000) == true) &#123;  </span><br><span class="line">        value = db.get(key);  </span><br><span class="line">        memcache.set(key, value);  </span><br><span class="line">        memcache.delete(key_mutex);  </span><br><span class="line">    &#125; else &#123;  </span><br><span class="line">        sleep(50);  </span><br><span class="line">        retry();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; else &#123;  </span><br><span class="line">    if (v.timeout &lt;= now()) &#123;  </span><br><span class="line">        if (memcache.add(key_mutex, 3 * 60 * 1000) == true) &#123;  </span><br><span class="line">            // extend the timeout for other threads  </span><br><span class="line">            v.timeout += 3 * 60 * 1000;  </span><br><span class="line">            memcache.set(key, v, KEY_TIMEOUT * 2);  </span><br><span class="line">  </span><br><span class="line">            // load the latest value from db  </span><br><span class="line">            v = db.get(key);  </span><br><span class="line">            v.timeout = KEY_TIMEOUT;  </span><br><span class="line">            memcache.set(key, value, KEY_TIMEOUT * 2);  </span><br><span class="line">            memcache.delete(key_mutex);  </span><br><span class="line">        &#125; else &#123;  </span><br><span class="line">            sleep(50);  </span><br><span class="line">            retry();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>3.永不过期 <a href="https://www.iteye.com/blog/user/carlosfu/">博客</a></p><h3 id="缓存雪崩-："><a href="#缓存雪崩-：" class="headerlink" title="@@ 缓存雪崩 ："></a>@@ 缓存雪崩 ：</h3><ol><li>设置缓存时，key都采用了相同expire </li><li>缓存服务宕机</li></ol><p>实现熔断限流机制，对系统进行负载能力控制,</p><p>在原有失效时间基础上增加一个随机值，比如1~5分钟的随机，这样每个缓存的过期时间重复率就会降低，集体失效概率也会大大降低</p><p>限流或者降级 例如5w个请求,先允许2w 部分请求先进来, 其他3w请求打到写好限流中间件返回空值或者默认值</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/3/27/169bb265aa52e948~tplv-t2oaga2asx-image.image" alt="image"></p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ad0a581b1dc45cca657232cb92701bc~tplv-k3u1fbpfcp-watermark.awebp" alt="image"></p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="@@ 缓存穿透"></a>@@ 缓存穿透</h3><blockquote><p>大量并发查询一个不存在的key 导致数据库流量都打到数据库</p></blockquote><blockquote><p>Bloom过滤或RoaringBitmap 判断KEY是否存在</p></blockquote><p>【 最常见的布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉，从而避免了对底层存储系统的查询压力】</p><p> 怎么理解 ：数据库ID 1-100000 每条插入的时候id 插入到布隆过器里面， 使用布隆过滤器进行过滤</p><p> <img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/3/27/169bb2638b91b339~tplv-t2oaga2asx-image.image" alt="image"></p><p> 缓存空值的KEY，这样第一次不存在也会被加载会记录，下次拿到有这个KEY</p><h3 id="缓存穿透-1"><a href="#缓存穿透-1" class="headerlink" title="@@ 缓存穿透"></a>@@ 缓存穿透</h3><p> 某KEY失效时，正好有大量并发请求访问该KEY</p><p> 缓存 + 过期时间 存储一个value 进行提前重设</p><h3 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h3><p> <img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/3/30/1712b5213446a402~tplv-t2oaga2asx-watermark.awebp" alt="image"></p><h3 id="脏读（dirty-read）"><a href="#脏读（dirty-read）" class="headerlink" title="脏读（dirty read）"></a>脏读（dirty read）</h3><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/2/1713824c77723cd4~tplv-t2oaga2asx-watermark.awebp" alt="image"></p><p>由上图可以发现，事务A、B交替执行，事务A被事务B干扰到了，因为事务A读取到事务B未提交的数据,这就是脏读</p><p>事务A需要读到100的余额</p><h3 id="不可重复读（unrepeatable-read）"><a href="#不可重复读（unrepeatable-read）" class="headerlink" title="不可重复读（unrepeatable read）"></a>不可重复读（unrepeatable read）</h3><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/2/1713829b86401900~tplv-t2oaga2asx-watermark.awebp" alt="image"></p><p><img src="https://cdn.learnku.com/uploads/images/202002/05/32495/YdNemia6wc.png!large" alt="image"></p><p>事务A又被事务B干扰到了！在事务A范围内，两个相同的查询，读取同一条记录，却返回了不同的数据，这就是不可重复读</p><h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/4/2/171382b2bdd28029~tplv-t2oaga2asx-watermark.awebp" alt="image"></p><p>事务A查询一个范围的结果集，另一个并发事务B往这个范围中插入&#x2F;删除了数据，，然后事务A再次查询相同的范围，两次读取得到的结果集不一样了，这就是幻读</p><h3 id="事务四大隔离级别"><a href="#事务四大隔离级别" class="headerlink" title="事务四大隔离级别"></a>事务四大隔离级别</h3><ul><li>读未提交（Read Uncommitted）</li></ul><p>事务读不加锁，不阻塞其他事务的读和写<br>事务写阻塞其他事务写，但不阻塞其他事务读； </p><p> <img src="https://cdn.learnku.com/uploads/images/202002/04/32495/Wcv8DTijTL.png!large" alt="image"></p><ul><li>读已提交（Read Committed）</li><li>可重复读（Repeatable Read）</li><li>串行化（Serializable）</li></ul><h3 id="tcp协议部分-a"><a href="#tcp协议部分-a" class="headerlink" title="tcp协议部分 a"></a>tcp协议部分 <a href="https://hit-alibaba.github.io/interview/basic/network/TCP.html">a</a></h3><h3 id="记录一次swoole-4-8升级安装报错问题"><a href="#记录一次swoole-4-8升级安装报错问题" class="headerlink" title="记录一次swoole 4.8升级安装报错问题"></a>记录一次swoole 4.8升级安装报错问题</h3><p>源码包编译安装 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP Warning: PHP Startup: Unable to load dynamic library &#x27;swoole.so&#x27; (tried: /usr/local/php/lib/php/extensions/no-debug-non-zts-20190902/swoole.so (/usr/local/php/lib/php/extensions/no-debug-non-zts-20190902/swoole.so: undefined symbol: curl_CURLFile_class), /usr/local/php/lib/php/extensions/no-debug-non-zts-20190902/swoole.so.so (/usr/local/php/lib/php/extensions/no-debug-non-zts-20190902/swoole.so.so: cannot open shared object file: No such file or directory)) in Unknown on line 0</span><br></pre></td></tr></table></figure><blockquote><p>在php.ini中先加载curl </p></blockquote><p><code>extension=curl.so</code></p><p><code>extension=swoole.so</code></p><blockquote><p>这样会导致重复加载curl.so ,  在mod_目录中</p></blockquote><blockquote><p>curl.ini中下面加上swoole.so</p></blockquote><p><a href="https://github.com/swoole/swoole-src/issues/4301">swoole版本升级</a></p><h3 id="wsl-内部没有局域网ip-只能通过代理转发"><a href="#wsl-内部没有局域网ip-只能通过代理转发" class="headerlink" title="wsl 内部没有局域网ip 只能通过代理转发"></a>wsl 内部没有局域网ip 只能通过代理转发</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"> netsh interface portproxy add v4tov4 listenport=12000 listenaddress=0.0.0.0 connectport=9999 connectaddress=127.0.0.1  protocol=tcp</span><br><span class="line"></span><br><span class="line">9999：为内部wsl 服务端口</span><br><span class="line"></span><br><span class="line">172.27.240.162 ：为wsl 内部ip</span><br></pre></td></tr></table></figure><h3 id="查看端口转发状态"><a href="#查看端口转发状态" class="headerlink" title="查看端口转发状态"></a>查看端口转发状态</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy show all </span><br></pre></td></tr></table></figure><p>删除端口转发：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy delete v4tov4 listenport=* listenaddress=0.0.0.0</span><br><span class="line"></span><br><span class="line">*代表所有端口，0.0.0.0为所有ip</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="php" scheme="http://example.com/categories/php/"/>
    
    <category term="hyperf" scheme="http://example.com/categories/php/hyperf/"/>
    
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
    <category term="hyperf" scheme="http://example.com/tags/hyperf/"/>
    
  </entry>
  
  <entry>
    <title>laravel 创建Facades门面</title>
    <link href="http://example.com/2023/07/18/php/laravel/"/>
    <id>http://example.com/2023/07/18/php/laravel/</id>
    <published>2023-07-18T06:13:00.000Z</published>
    <updated>2023-10-07T00:38:01.873Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>要自定义门面，你需要遵循以下步骤：</p><ol><li><p><strong>创建门面类</strong>：</p><p>首先，创建一个继承自 <code>Illuminate\Support\Facades\Facade</code> 的门面类。这个类将作为你自定义门面的接口。</p><p>例如，假设你想创建一个名为 <code>CustomFacade</code> 的门面：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Facades</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Facade</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomFacade</span> <span class="keyword">extends</span> <span class="title">Facade</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFacadeAccessor</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;custom&#x27;</span>; <span class="comment">// 对应服务容器中的标识符</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>CustomFacade</code> 的 <code>getFacadeAccessor</code> 方法返回了 <code>&#39;custom&#39;</code>，这个标识符将用于在服务容器中查找相应的实例。</p></li><li><p><strong>创建服务提供者</strong>：</p><p>接下来，你需要创建一个服务提供者，将自定义服务注册到 Laravel 中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:provider CustomServiceProvider</span><br></pre></td></tr></table></figure><p>在生成的 <code>CustomServiceProvider.php</code> 中，你可以在 <code>register</code> 方法中注册自定义服务：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;app-&gt;<span class="title function_ invoke__">bind</span>(<span class="string">&#x27;custom&#x27;</span>, function (<span class="variable">$app</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">\App\Services\CustomService</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，我们将一个名为 <code>custom</code> 的标识符与一个自定义的服务类绑定。</p></li><li><p><strong>在配置文件中注册服务提供者</strong>：</p><p>打开 <code>config/app.php</code> 配置文件，将你的服务提供者添加到 <code>providers</code> 数组中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;providers&#x27;</span> =&gt; [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="title class_">App\Providers\CustomServiceProvider</span>::<span class="variable language_">class</span>,</span><br><span class="line">],</span><br></pre></td></tr></table></figure></li><li><p><strong>创建自定义服务类</strong>：</p><p>创建一个用于提供服务的自定义类，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">App</span>\<span class="title class_">Services</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Doing something!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>使用你的自定义门面</strong>：</p><p>在任何地方都可以使用你的自定义门面来调用服务，而不需要实例化服务类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Facades</span>\<span class="title">CustomFacade</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">CustomFacade</span>::<span class="title function_ invoke__">doSomething</span>(); <span class="comment">// 将调用 CustomService 中的 doSomething 方法</span></span><br></pre></td></tr></table></figure></li></ol><p>这样，你就创建了一个自定义门面并将其与一个自定义服务相关联。在使用门面时，它会代理到相应的服务提供者中注册的服务实例上。这使得你可以以简单直观的方式在应用程序中访问和使用自定义服务。</p><blockquote><p><a href="https://github.com/jianqiangsong/laravel-tips">laravel 常用的250个技巧</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="php" scheme="http://example.com/categories/php/"/>
    
    <category term="hyperf" scheme="http://example.com/categories/php/hyperf/"/>
    
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
    <category term="hyperf" scheme="http://example.com/tags/hyperf/"/>
    
  </entry>
  
  <entry>
    <title>wsl2使用</title>
    <link href="http://example.com/2023/07/18/%E5%B7%A5%E5%85%B7/wsl/"/>
    <id>http://example.com/2023/07/18/%E5%B7%A5%E5%85%B7/wsl/</id>
    <published>2023-07-18T06:05:57.000Z</published>
    <updated>2023-07-18T06:08:22.163Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>设置默认启动</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> ubuntu config --default-user root</span><br><span class="line"></span><br><span class="line"> add-apt-repository  &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br><span class="line"></span><br><span class="line"> service ssh --full-restart</span><br><span class="line"></span><br><span class="line">端口转发</span><br><span class="line">iex &quot;netsh interface portproxy add v4tov4 listenport=12000 listenaddress= 192.168.19.117 connectport=8888 connectaddress=127.0.0.1&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git config --global core.autocrlf false</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    <category term="windows wsl" scheme="http://example.com/categories/linux/windows-wsl/"/>
    
    
    <category term="wsl2" scheme="http://example.com/tags/wsl2/"/>
    
    <category term="windows" scheme="http://example.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>mac</title>
    <link href="http://example.com/2023/07/18/%E5%B7%A5%E5%85%B7/mac/"/>
    <id>http://example.com/2023/07/18/%E5%B7%A5%E5%85%B7/mac/</id>
    <published>2023-07-18T06:05:57.000Z</published>
    <updated>2023-09-21T01:08:22.812Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>mac 电脑的全新下载 下载源</strong></p><p>码云地址： <a href="https://gitee.com/cunkai/HomebrewCN">https://gitee.com/cunkai/HomebrewCN</a></p><p>mac 阿里云源 <a href="https://developer.aliyun.com/mirror/homebrew/?spm=a2c6h.25603864.0.0.4c795129L0K5fb">https://developer.aliyun.com/mirror/homebrew/?spm=a2c6h.25603864.0.0.4c795129L0K5fb</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="mac" scheme="http://example.com/categories/mac/"/>
    
    
    <category term="mac" scheme="http://example.com/tags/mac/"/>
    
  </entry>
  
</feed>
