{"meta":{"title":"Gemini`s wiki","subtitle":"Gemini","description":"Gemini`s wiki","author":"Gemini","url":"http://example.com","root":"/"},"pages":[{"title":"Resume","date":"2023-07-17T14:50:05.746Z","updated":"2023-07-17T14:50:05.746Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"个人简历 概况：8年工作经验 | 男 | 1990年 | 已婚 | 172cm | 群众 电话：15250351357 E-mail： 15250351357@163.com 地址：深圳 公司：深圳xxx科技有限公司 职位：PHP高级工程师 学校：交通学院 学历：本科 专业：航海技术 自我评价 6年PHP工作经验，3年团队管理经验，项目管理经验丰富。熟练掌握 PHP 编程语言及 OOP 思想。在xxx公司工作期间，先后主要负责的项目有效果图、问答、学装修、新闻中心、商城、图满意、设计师报价系统、oa考试系统等十几个系统，由YII从零搭建。多个项目server端采用Java服务。 熟悉 Yii.thinkphp.ci 开源框架的配置方法及使用，YII实战经验三年，了解原理，能写组件，能扩展gii代码生成工具，基本CURD完全自动化生成，显著提高工作效率； 熟悉网站开发中常见功能的开发：js前端验证技术、面向对象技术，无限极分类， Session cookie技术，正则表达式技术，面包屑导航，ajax无刷新技术，jquery技术，smarty模板技术，mvc开发模式等； 熟练掌握SQL语言，熟练运用Mysql关系型数据库以及各种客户端工具；熟悉LINUX基本命令及Apache服务器相关配置，lamp环境搭建；掌握并能应用nosql产品，如memcached、readis、mongodb。 求职意向 到岗时间：随时 工作性质：全职 目标地点：深圳 期望薪资：月薪 20000-24999 目标职能：高级PHP工程师、项目经理 工作经验2013-10 至今：深圳xxx科技有限公司 2000人 3年1个月 职位: PHP高级工程师 部门：技术中心 行业：互联网&#x2F;电子商务 跟产品经理确认需求，按计划完成多个设计与开发； 承担xxx图库及问答两大模块的所有代码开发及维护工作； 带领web组同事，指导技术实现、代码审核。并顺利完成多个项目； 基于 MySQL＋PHP 进行Web产品的设计和开发； 参与完成系统架构设计、数据库结构设计、业务逻辑抽象等编码工作； 配合Java服务组，接入Java服务。 2013-01 – 2013-10：xxx健康科技有限公司 &lt;&#x3D;50人 9个月 职位: PHP工程师 部门：产品研发部 行业：互联网&#x2F;电子商务 开发公司网站新功能； 网站邮件及消息管理功能开发；网站用户注册及数据入口验证 优化网站性能，维护网站bug；数据库维护与备份。 2011-01 – 2012-10：xxx互联科技有限公司 80人 1年9个月 职位: php程序员 部门：技术部门 行业：互联网&#x2F;电子商务 经理的得力助手，帮助他完成一些工作，比如服务器维护，客户网站定时检查和备份； 开发公司项目，收集客户需求，并分配到相应人手中实践； 检验工作成果是否符合要求，并技术实践分析； 指导同事完成项目，探讨新的高效方式去开发网站； 核心代码整理，提高程序的复用性。 项目经验2015-04 至今 xxx商城 软件环境：lnmp 项目描述：xxx商城是2015年上线的以家具建材为主的商城。终端包含pc、h5、app。第一版从设计到开发历时仅一个半月，sku 4000+。 全站使用 yii 框架，前端采用 sea.js，server端采用Java服务进行订单结算和库存管理。在此项目中担任开发项目经理并参与主体功能开发， 商城所完成的主要功能如下： 购物车功能。无登录与登录后，能同步购物车商品； 物流，快递模块。根据不同区域，不同价格策略做设置； 满包邮，满减，满赠送活动功能；专题，秒杀活动管理； sku上下架。及物品快照功能； 用户收货地址管理。 2013-03 至今 xxx装修网 软件环境：lamp 项目描述：xxx效果图和xxx网站的问答 开发、优化升级: 效果图多格式、多规格优化处理，多屏适配；图片的重复检查，水印处理。图片质量压缩及feed文件生成。 xxx业务发展迅猛，网站访问飙升（当前日均300W uv），通过redis，memcache缓存；服务器压力降低50%，访问流畅性、服务器稳定性极大提高； 优化前端代码，实现低耦合，高可用。 xxx网站的问答开发、优化升级 问答的交互代码，回答问题加积分； 问答的管理，及问题批量处理功能； 安全过滤，防止敏感关键词被发布。 责任描述: 带领团队不断成长。在自我驱动、业务驱动的双重动力下，带领的团队紧跟公司节奏，成长迅速； 维护效果图及问吧代码的前后端及版本改造 。 2015-01 – 2015-03 xxx新闻中心 软件环境： lamp 项目描述： 实现xxx新闻的采集及发布，打造权威家居资讯平台。主要包括:新闻、图说、原创视频、人物、活动三大版块。分别以图文，视频，专题等几种形式发布前沿家居信息。此项目以YII为核心技术架构。 责任描述: 带领团队从零开发，历时一个半月设计、开发并顺利上线； 开发方法及质量进度的跟踪，协调产品、测试等资源，保障项目顺利完成； 实现技术难点 如采集，旧版url的兼容，图片处理等。 2013-01 – 2013-10 xxx产品开发 项目描述：xxx项目，是一个健康促进平台。用户可以上传运动数据。知道自己的运动记录。同时可以使用公司指定的器材来上传步行数据。通过这个平台，和其它人PK，获取名次。发动全民健身。该项目基于ECSHOP底层代码二关开发。共划分十三个模块。历时一年半正式上线。 责任描述： 用户注册模块，卡密生成，验证，用户数据分析，勋章获取； 用户消息及邮件通知，参赛报名流程，企业后台管理；数据库优化。 兴趣爱好篮球，爬山"},{"title":"Categories","date":"2023-08-16T01:20:54.656Z","updated":"2023-08-16T01:20:54.656Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"gallery","date":"2020-10-05T04:00:00.000Z","updated":"2023-08-17T09:14:57.351Z","comments":true,"path":"gallery/index.html","permalink":"http://example.com/gallery/index.html","excerpt":"","text":""},{"title":"个人照片","date":"2020-10-02T15:00:17.000Z","updated":"2023-08-18T01:44:27.873Z","comments":true,"path":"gallery/个人照片/index.html","permalink":"http://example.com/gallery/%E4%B8%AA%E4%BA%BA%E7%85%A7%E7%89%87/index.html","excerpt":"","text":""},{"title":"广州","date":"2020-10-02T15:00:17.000Z","updated":"2023-08-18T06:37:50.278Z","comments":true,"path":"gallery/广州/index.html","permalink":"http://example.com/gallery/%E5%B9%BF%E5%B7%9E/index.html","excerpt":"","text":""},{"title":"Tags","date":"2023-07-17T08:38:13.747Z","updated":"2023-07-17T08:38:13.747Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"广州2","date":"2020-10-02T15:00:17.000Z","updated":"2023-08-22T07:51:29.950Z","comments":true,"path":"gallery/广州2/index.html","permalink":"http://example.com/gallery/%E5%B9%BF%E5%B7%9E2/index.html","excerpt":"","text":""},{"title":"广州10","date":"2020-10-02T15:00:17.000Z","updated":"2023-08-23T01:16:25.945Z","comments":true,"path":"gallery/广州10/index.html","permalink":"http://example.com/gallery/%E5%B9%BF%E5%B7%9E10/index.html","excerpt":"","text":""},{"title":"广州7","date":"2020-10-02T15:00:17.000Z","updated":"2023-08-23T01:16:14.895Z","comments":true,"path":"gallery/广州7/index.html","permalink":"http://example.com/gallery/%E5%B9%BF%E5%B7%9E7/index.html","excerpt":"","text":""},{"title":"广州8","date":"2020-10-02T15:00:17.000Z","updated":"2023-08-23T01:16:19.151Z","comments":true,"path":"gallery/广州8/index.html","permalink":"http://example.com/gallery/%E5%B9%BF%E5%B7%9E8/index.html","excerpt":"","text":""},{"title":"广州6","date":"2020-10-02T15:00:17.000Z","updated":"2023-08-23T01:16:11.140Z","comments":true,"path":"gallery/广州6/index.html","permalink":"http://example.com/gallery/%E5%B9%BF%E5%B7%9E6/index.html","excerpt":"","text":""},{"title":"生活记录","date":"2020-10-02T15:00:17.000Z","updated":"2023-08-18T06:06:41.402Z","comments":true,"path":"gallery/生活记录/index.html","permalink":"http://example.com/gallery/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/index.html","excerpt":"","text":""},{"title":"广州3","date":"2020-10-02T15:00:17.000Z","updated":"2023-08-23T01:15:12.697Z","comments":true,"path":"gallery/广州3/index.html","permalink":"http://example.com/gallery/%E5%B9%BF%E5%B7%9E3/index.html","excerpt":"","text":""},{"title":"广州9","date":"2020-10-02T15:00:17.000Z","updated":"2023-08-23T01:16:22.579Z","comments":true,"path":"gallery/广州9/index.html","permalink":"http://example.com/gallery/%E5%B9%BF%E5%B7%9E9/index.html","excerpt":"","text":""},{"title":"广州4","date":"2020-10-02T15:00:17.000Z","updated":"2023-08-23T01:16:02.933Z","comments":true,"path":"gallery/广州4/index.html","permalink":"http://example.com/gallery/%E5%B9%BF%E5%B7%9E4/index.html","excerpt":"","text":""},{"title":"记录","date":"2020-10-02T15:00:17.000Z","updated":"2023-08-18T06:21:31.055Z","comments":true,"path":"gallery/记录/index.html","permalink":"http://example.com/gallery/%E8%AE%B0%E5%BD%95/index.html","excerpt":"","text":""},{"title":"随笔","date":"2020-10-02T15:00:17.000Z","updated":"2023-08-18T06:31:48.282Z","comments":true,"path":"gallery/随笔/index.html","permalink":"http://example.com/gallery/%E9%9A%8F%E7%AC%94/index.html","excerpt":"","text":""},{"title":"随拍","date":"2020-10-02T15:00:17.000Z","updated":"2023-08-18T06:11:03.816Z","comments":true,"path":"gallery/随拍/index.html","permalink":"http://example.com/gallery/%E9%9A%8F%E6%8B%8D/index.html","excerpt":"","text":""},{"title":"广州5","date":"2020-10-02T15:00:17.000Z","updated":"2023-08-23T01:16:07.539Z","comments":true,"path":"gallery/广州5/index.html","permalink":"http://example.com/gallery/%E5%B9%BF%E5%B7%9E5/index.html","excerpt":"","text":""},{"title":"生活","date":"2020-10-02T15:00:17.000Z","updated":"2023-08-18T06:03:21.300Z","comments":true,"path":"gallery/生活/index.html","permalink":"http://example.com/gallery/%E7%94%9F%E6%B4%BB/index.html","excerpt":"","text":""}],"posts":[{"title":"yii2-admin","slug":"yii/yii2-admin","date":"2023-10-08T08:15:51.000Z","updated":"2023-10-12T02:41:48.856Z","comments":true,"path":"2023/10/08/yii/yii2-admin/","link":"","permalink":"http://example.com/2023/10/08/yii/yii2-admin/","excerpt":"","text":"在 Yii2 中，你可以使用 RBAC（Role-Based Access Control）来控制菜单权限按钮。以下是基本步骤： 安装 Yii2 RBAC 扩展： 首先，你需要安装 Yii2 的 RBAC 扩展，可以使用 Yii2 的官方扩展 yii2-admin，它提供了一套强大的 RBAC 管理功能。 你可以通过 Composer 安装： 1composer require mdmsoft/yii2-admin &quot;~2.0&quot; 安装完成后，你可以按照文档配置和初始化 RBAC。 创建角色和权限： 在 Yii2 RBAC 中，你需要创建角色和权限，然后将它们关联起来。你可以使用 yii\\rbac\\DbManager 或者其他适合你项目的 RBAC 组件来管理角色和权限。 12345678910// 创建一个角色$role = $auth-&gt;createRole(&#x27;admin&#x27;);$auth-&gt;add($role);// 创建一个权限$permission = $auth-&gt;createPermission(&#x27;createPost&#x27;);$auth-&gt;add($permission);// 关联权限到角色$auth-&gt;addChild($role, $permission); 在 Controller 中验证权限： 在你的控制器中，可以使用 beforeAction 方法来检查用户是否具有执行该操作的权限。 12345678910111213public function beforeAction($action)&#123; if (!parent::beforeAction($action)) &#123; return false; &#125; // 检查当前用户是否有权限执行该操作 if (!Yii::$app-&gt;user-&gt;can(&#x27;createPost&#x27;)) &#123; throw new ForbiddenHttpException(&#x27;你没有权限执行该操作&#x27;); &#125; return true;&#125; 在视图中显示按钮： 在视图文件中，可以使用 yii\\rbac\\CheckAccessWidget 小部件来根据用户的权限显示或隐藏按钮。 123456789&lt;?phpuse yii\\rbac\\CheckAccessWidget;// 显示按钮，如果用户有 &#x27;createPost&#x27; 权限echo CheckAccessWidget::widget([ &#x27;name&#x27; =&gt; &#x27;createPost&#x27;, &#x27;yes&#x27; =&gt; Html::a(&#x27;Create Post&#x27;, [&#x27;post/create&#x27;]),]);?&gt; 在视图中控制菜单显示： 你可以使用 Yii::$app-&gt;user-&gt;can() 方法来在视图中根据用户的权限来控制菜单的显示或隐藏。 123if (Yii::$app-&gt;user-&gt;can(&#x27;createPost&#x27;)) &#123; echo Html::a(&#x27;Create Post&#x27;, [&#x27;post/create&#x27;]);&#125; 以上步骤提供了一个基本的 Yii2 RBAC 权限控制方案。通过创建角色、权限以及在控制器和视图中验证权限，你可以实现对菜单按钮的权限控制。","categories":[{"name":"php","slug":"php","permalink":"http://example.com/categories/php/"},{"name":"yii","slug":"php/yii","permalink":"http://example.com/categories/php/yii/"}],"tags":[{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"},{"name":"yii","slug":"yii","permalink":"http://example.com/tags/yii/"}]},{"title":"linux","slug":"工具/linux","date":"2023-09-27T06:24:55.000Z","updated":"2023-09-27T06:31:50.139Z","comments":true,"path":"2023/09/27/工具/linux/","link":"","permalink":"http://example.com/2023/09/27/%E5%B7%A5%E5%85%B7/linux/","excerpt":"","text":"你可以使用 grep 命令来查询文件中的关键内容，并结合 head 和 tail 命令来显示前后的行数。以下是具体的命令： 12345grep &#x27;关键词&#x27; 文件名 | head -n 100 &amp;&amp; grep &#x27;关键词&#x27; 文件名 | tail -n 100grep &#x27;MY20230923090G4T03&#x27; sjq_org_c23-pro238.log | head -n 100 &amp;&amp; grep &#x27;MY20230923090G4T03&#x27; sjq_org_c23-pro238.log | tail -n 100 解释： grep &#39;关键词&#39; 文件名 会在指定的文件中搜索包含关键词的行。 head -n 100 会显示前100行。 tail -n 100 会显示最后100行。 如果你想在一个命令中实现，可以使用 awk： 1awk &#x27;/MY20230923090G4T03/&#123;a=NR+100&#125; a&amp;&amp;NR&lt;=a&#x27; sjq_org_c23-pro238.log 这个命令会在文件中查找包含关键词的行，并显示每个匹配行的前后100行。","categories":[{"name":"工具","slug":"工具","permalink":"http://example.com/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[]},{"title":"Yii2 行为类","slug":"yii/yii3","date":"2023-08-28T08:00:04.000Z","updated":"2023-08-30T03:03:17.525Z","comments":true,"path":"2023/08/28/yii/yii3/","link":"","permalink":"http://example.com/2023/08/28/yii/yii3/","excerpt":"","text":"yii2 Behavior 行为的使用，代码示例1.定义一个类继承行为基础类2.实现event方法触发事件重写 如下是扩展模型Model的类方法 进行程序的解耦设计 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119&lt;?phpnamespace app\\common\\behaviors;use yii\\base\\Behavior;use yii\\db\\BaseActiveRecord;use yii\\web\\UploadedFile;/*** * * 行为事件 测试类 * * @package app\\common\\behaviors * @class AttachmentsBehavior * @date 2023-08-30 */class AttachmentsBehavior extends Behavior&#123; private $_files; /** * 需要上传的文件属性 * @var string */ public $uploadFiles = &#x27;uploadfiles&#x27;; /** * 已经上传了的文件属性 * @var string */ public $uploadedFiles = &#x27;uploadedfiles&#x27;; /** * 保存路径 * @var string */ public $savePath = &#x27;@common/upload&#x27;; /** * 访问路径 * @var string */ public $saveUrl = &#x27;@common/uploads&#x27;; public function events() &#123; return [ BaseActiveRecord::EVENT_BEFORE_VALIDATE =&gt; &#x27;beforeValidate&#x27;, BaseActiveRecord::EVENT_AFTER_VALIDATE =&gt; &#x27;beforeValidate1&#x27;, BaseActiveRecord::EVENT_AFTER_INSERT =&gt; &#x27;afterSave&#x27;, BaseActiveRecord::EVENT_AFTER_UPDATE =&gt; &#x27;afterSave&#x27;, BaseActiveRecord::EVENT_BEFORE_DELETE =&gt; &#x27;beforeDelete&#x27;, ]; &#125; /** * This method is invoked before validation starts. */ public function beforeValidate1() &#123; $this-&gt;_files = UploadedFile::getInstances($this-&gt;owner, $this-&gt;uploadFiles); &#125; /** * 返回拥有者的唯一Id * @return string */ public function getIdentityId() &#123; return $this-&gt;owner-&gt;className() . &#x27;.&#x27; . $this-&gt;owner-&gt;id; &#125; /** * 明确拥有者与附件的关系 * @return mixed */ public function getAttachments() &#123; return $this-&gt;owner-&gt;hasMany(Attachments::className(), [&#x27;ownerId&#x27; =&gt; &#x27;identityId&#x27;]); &#125; /** * 在主模型保存后挨个保存附件 */ public function afterSave() &#123; foreach ($this-&gt;_files as $file) &#123; $model = new Attachments(); $model-&gt;fileName = $file-&gt;name; $model-&gt;url = date(&#x27;Ymd&#x27;) . \\Yii::$app-&gt;getSecurity()-&gt;generateRandomString(8) . &#x27;.&#x27; . $file-&gt;extension; $model-&gt;ownerId = $this-&gt;owner-&gt;identityId; $model-&gt;savePath = \\Yii::getAlias($this-&gt;savePath); $file-&gt;saveAs(\\Yii::getAlias($this-&gt;savePath) . DIRECTORY_SEPARATOR . $model-&gt;url); $model-&gt;save(); &#125; &#125; /** * 在主模型删除之前删除所有附件 * @return bool */ public function beforeDelete() &#123; foreach ($this-&gt;owner-&gt;&#123;$this-&gt;uploadedFiles&#125; as $file) &#123; $file-&gt;delete(); &#125; return true; &#125; /** * @param $url * @return string * @date 2023-08-30 */ public function getFilesUrl($url) &#123; return \\Yii::getAlias($this-&gt;saveUrl) . DIRECTORY_SEPARATOR . $url; &#125;&#125; 参考资料","categories":[{"name":"php","slug":"php","permalink":"http://example.com/categories/php/"},{"name":"yii","slug":"php/yii","permalink":"http://example.com/categories/php/yii/"}],"tags":[{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"},{"name":"yii","slug":"yii","permalink":"http://example.com/tags/yii/"}]},{"title":"备忘录","slug":"test/pass","date":"2023-08-24T01:24:14.000Z","updated":"2023-08-24T01:26:59.944Z","comments":true,"path":"2023/08/24/test/pass/","link":"","permalink":"http://example.com/2023/08/24/test/pass/","excerpt":"","text":"备份记录oopdingtalk.com &#39;Jinx525617 #123&#39;","categories":[{"name":"生活","slug":"生活","permalink":"http://example.com/categories/%E7%94%9F%E6%B4%BB/"}],"tags":[{"name":"备忘录","slug":"备忘录","permalink":"http://example.com/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"}]},{"title":"博客构建同步仓库","slug":"工具/hexo","date":"2023-08-16T00:53:39.000Z","updated":"2023-08-16T00:58:23.819Z","comments":true,"path":"2023/08/16/工具/hexo/","link":"","permalink":"http://example.com/2023/08/16/%E5%B7%A5%E5%85%B7/hexo/","excerpt":"","text":"使用国内访问源快速 vercel静态托管 1.仓库地址https://vercel.com/jianqiangsong/blog 2.访问地址同步博客地址 https://blog-jianqiangsong.vercel.app","categories":[{"name":"前端","slug":"前端","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF/"},{"name":"hexo","slug":"前端/hexo","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF/hexo/"}],"tags":[{"name":"博客构建","slug":"博客构建","permalink":"http://example.com/tags/%E5%8D%9A%E5%AE%A2%E6%9E%84%E5%BB%BA/"}]},{"title":"openai 图片使用demo","slug":"工具/openai","date":"2023-08-16T00:44:03.000Z","updated":"2023-08-16T00:58:51.837Z","comments":true,"path":"2023/08/16/工具/openai/","link":"","permalink":"http://example.com/2023/08/16/%E5%B7%A5%E5%85%B7/openai/","excerpt":"","text":"openiakey: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 生成图片，使用代理访问的openai 12345678curl https://api.openai-proxy.com/v1/images/generations \\ -H &quot;Content-Type: application/json&quot; \\ -H &quot;Authorization: Bearer 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&quot; \\ -d &#x27;&#123; &quot;prompt&quot;: &quot;生成一张小王八的照片&quot;, &quot;n&quot;: 2, &quot;size&quot;: &quot;256x256&quot; &#125;&#x27;","categories":[{"name":"openai","slug":"openai","permalink":"http://example.com/categories/openai/"},{"name":"大语言模型","slug":"openai/大语言模型","permalink":"http://example.com/categories/openai/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/"}],"tags":[{"name":"openai","slug":"openai","permalink":"http://example.com/tags/openai/"}]},{"title":"函数","slug":"php/函数","date":"2023-08-08T01:37:23.000Z","updated":"2023-10-17T01:50:46.774Z","comments":true,"path":"2023/08/08/php/函数/","link":"","permalink":"http://example.com/2023/08/08/php/%E5%87%BD%E6%95%B0/","excerpt":"","text":"发现一个比较好用容易忽略的函数 get_headers 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152//判断一个地址是否可以访问 //302 状态码代表重定向 $arr = get_headers(&#x27;https://test-open.zking.com/dz/1Msvv137&#x27;, 1); //响应结果，可以通过content-length 判断 Array( [0] =&gt; HTTP/1.1 302 Found [Server] =&gt; Array ( [0] =&gt; ****** [1] =&gt; ****** ) [Content-Length] =&gt; 0 [Connection] =&gt; Array ( [0] =&gt; close [1] =&gt; close ) [location] =&gt; https://test-open.zking.com/api/v1/insurance/nonAutoMobile/getpolicyDownload/21122253410023000009 [date] =&gt; Array ( [0] =&gt; Tue, 08 Aug 2023 01:52:24 GMT [1] =&gt; Tue, 08 Aug 2023 01:52:25 GMT ) [x-envoy-upstream-service-time] =&gt; Array ( [0] =&gt; 81 [1] =&gt; 1442 ) [Set-Cookie] =&gt; Array ( [0] =&gt; hvAJjymUYBa3O=60Tt1N123.awkhkof7ofH3MhYWigGg6G0q12mi2Pc4QhKnBw5gWoZvGiQd5pxELY81iyYE6YcTHQ8LLwiyHCHkVA; Path=/; expires=Fri, 05 Aug 2033 01:52:19 GMT; Secure; HttpOnly [1] =&gt; hvAJjymUYBa3O=60Kb23jk82hM1gsG2k2MF54_7K.PDdJPJTGBuC7VHqCO_tps6JCbWBAvIx7x_FPDw9gbkXICkvy9qlYQWrTP2Jva; Path=/; expires=Fri, 05 Aug 2033 01:52:20 GMT; Secure; HttpOnly ) [1] =&gt; HTTP/1.1 200 OK [Content-Type] =&gt; application/octet-stream;charset=UTF-8 [pragma] =&gt; public [expires] =&gt; 0 [cache-control] =&gt; must-revalidate, post-check=0, pre-check=0 [content-disposition] =&gt; attachment;filename=21122253410023000009.pdf [x-kong-upstream-latency] =&gt; 1437 [x-kong-proxy-latency] =&gt; 5 [via] =&gt; kong/2.5.2) PHP获取本周日期1234567891011121314&lt;?php// 获取今天的日期$today = date(&#x27;Y-m-d&#x27;);// 使用 strtotime 函数获取本周的起始日期$start_of_week = date(&#x27;Y-m-d&#x27;, strtotime(&#x27;this week&#x27;, strtotime($today)));// 使用 strtotime 函数获取本周的结束日期$end_of_week = date(&#x27;Y-m-d&#x27;, strtotime(&#x27;this week +6 days&#x27;, strtotime($start_of_week)));echo &quot;本周起始日期是：&quot; . $start_of_week . &quot;&lt;br&gt;&quot;;echo &quot;本周结束日期是：&quot; . $end_of_week;","categories":[{"name":"php","slug":"php","permalink":"http://example.com/categories/php/"},{"name":"基础","slug":"php/基础","permalink":"http://example.com/categories/php/%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"},{"name":"函数 get_headers","slug":"函数-get-headers","permalink":"http://example.com/tags/%E5%87%BD%E6%95%B0-get-headers/"}]},{"title":"yii2","slug":"yii/yii2","date":"2023-07-28T08:00:04.000Z","updated":"2023-08-30T01:49:10.326Z","comments":true,"path":"2023/07/28/yii/yii2/","link":"","permalink":"http://example.com/2023/07/28/yii/yii2/","excerpt":"","text":"yii2 干货知识集合 https://github.com/forecho/awesome-yii2 链接地址 件一共有15个与加密解密（&amp;编码）相关的公共方法 encryptByPassword encryptByKey decryptByPassword decryptByKey hkdf pbkdf2 hashData validateData generateRandomKey generateRandomString generatePasswordHash validatePassword compareString maskToken unmaskToken 我想有一些你一定没见过，没关系，我们一一去了解。 generateRandomString 之所以先说generateRandomString是因为它最常用，起码我是这样。 public function generateRandomString($length = 32)&#123;...&#125; 生成一个随机的字符串，参数$length代表这个字符串的长度，默认32位。值得说明的是这个字符串的取值为范围是[A-Za-z0-9_-]。 generatePasswordHash &amp; validatePassword generatePasswordHash &amp; validatePassword经常被用来加密用户密码以及对密码是否正确的验证，自从MD5可能被碰撞后，我们用yii2开发应用的时候，generatePasswordHash函数对密码进行加密就成为首选了，它调用了crypt函数。 一般用法如下 // 使用generatePasswordHash为用户的密码加密，$hash存储到库中 $hash = Yii::$app-&gt;getSecurity()-&gt;generatePasswordHash($password); &#x2F;&#x2F; 使用validatePassword对密码进行验证if(Yii::$app-&gt;getSecurity()-&gt;validatePassword($password, $hash))&#123;&#x2F;&#x2F; 密码正确&#125;else&#123;&#x2F;&#x2F; 密码错误&#125; generateRandomKey 和generateRandomString类似，生成一个随机的串，参数为长度，默认为32位，区别在于generateRandomKey生成的不是ASCII。 简单的说 generateRandomString 约等于 base64_encode(generateRandomKey)。 encryptByPassword &amp; decryptByPassword 编码和解码函数，使用一个秘钥对数据进行编码，然后通过此秘钥在对编码后的数据进行解码。 例子 $dat = Yii::$app-&gt;security-&gt;encryptByPassword(\"hello\",\"3166886\"); echo Yii::$app-&gt;security-&gt;encryptByPassword($dat,\"3166886\");// hello 要注意，通过上面得到的编码后的数据不是ASCII，可以通过base64_encode和base64_decode在外层包装下。 encryptByKey &amp; decryptByKey 同样是一组编码和解码函数，比通过密码的方式要快。函数声明为 public function encryptByKey($data, $inputKey, $info = null)&#123;&#125; public function decryptByKey($data, $inputKey, $info &#x3D; null)&#123;&#125; encryptByKey &amp; decryptByKey 存在着第三个参数，比如我们可以传递会员的ID等，这样此信息将和$inputKey一起作为加密解密的钥匙。 hkdf 使用标准的 HKDF 算法从给定的输入键中导出一个键。在PHP7+使用的是hash_hkdf方法，小于PHP7使用hash_hmac方法。 pbkdf2 使用标准的 PBKDF2 算法从给定的密码导出一个密钥。该方法可以用来进行密码加密，不过yii2有更好的密码加密方案 generatePasswordHash。 hashData和validateData 有的时候为了防止内容被篡改，我们需要对数据进行一些标记，hashData和validateData就是完成这个任务的组合。 hashData 用来对原始数据进行加数据前缀，比如如下代码 $result = Yii::$app-&gt;security-&gt;hashData(\"hello\",'123456',false); // ac28d602c767424d0c809edebf73828bed5ce99ce1556f4df8e223faeec60eddhello 你看到了在hello的前面多了一组字符，这组字符会随着原始数据的不同而变化。这样我们就对数据进行了特殊的防止篡改标记，接下来是validateData上场了。 注意：hashData的第三个参数代表生成的哈希值是否为原始二进制格式. 如果为false, 则会生成小写十六进制数字. validateData 对已经加了数据前缀的数据进行检测，如下代码 $result = Yii::$app-&gt;security-&gt;validateData(\"ac28d602c767424d0c809edebf73828bed5ce99ce1556f4df8e223faeec60eddhello\",'123456',false); // hello 如果返回了原始的字符串则表示验证通过，否则会返回假。 validateData 函数的第三个参数应该与使用 hashData() 生成数据时的值相同. 它指示数据中的散列值是否是二进制格式. 如果为false, 则表示散列值仅由小写十六进制数字组成. 将生成十六进制数字. compareString 可防止时序攻击的字符串比较，用法非常简单。 Yii::$app-&gt;security-&gt;compareString(\"abc\",'abc'); 结果为真则相等，否则不相等。 那么什么是时序攻击那？我来举一个简单的例子。 if($code == Yii::$app-&gt;request-&gt;get('code'))&#123; &#125; 上面的比较逻辑，两个字符串是从第一位开始逐一进行比较的，发现不同就立即返回 false，那么通过计算返回的速度就知道了大概是哪一位开始不同的，这样就实现了电影中经常出现的按位破解密码的场景。 而使用 compareString 比较两个字符串，无论字符串是否相等，函数的时间消耗是恒定的，这样可以有效的防止时序攻击。 maskToken &amp;&amp; unmaskToken maskToken用于掩盖真实token且不可以压缩，同一个token最后生成了不同的随机令牌，在yii2的csrf功能上就使用了maskToken，原理并不复杂，我们看下源码。 public function maskToken($token)&#123; $mask = $this-&gt;generateRandomKey(StringHelper::byteLength($token)); return StringHelper::base64UrlEncode($mask . ($mask ^ $token)); &#125; 而unmaskToken目的也很明确，用于得到被maskToken掩盖的token。 接下来我们看一个例子代码 $token = Yii::$app-&gt;security-&gt;maskToken(\"123456\"); echo Yii::$app-&gt;security-&gt;unmaskToken($token);// 结果为 123456 最后我们总结下 加密/解密: encryptByKey()、decryptByKey()、 encryptByPassword() 和 decryptByPassword()； 使用标准算法的密钥推导: pbkdf2() 和 hkdf(); 防止数据篡改: hashData() 和 validateData(); 密码验证: generatePasswordHash() 和 validatePassword()","categories":[{"name":"php","slug":"php","permalink":"http://example.com/categories/php/"},{"name":"yii","slug":"php/yii","permalink":"http://example.com/categories/php/yii/"}],"tags":[{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"},{"name":"yii","slug":"yii","permalink":"http://example.com/tags/yii/"}]},{"title":"IOC/DI","slug":"php/ioc","date":"2023-07-21T01:29:46.000Z","updated":"2024-03-06T08:59:16.801Z","comments":true,"path":"2023/07/21/php/ioc/","link":"","permalink":"http://example.com/2023/07/21/php/ioc/","excerpt":"","text":"1.一句话说明依赖注入因为大多数应用程序都是由两个或者更多的类通过彼此合作来实现业务逻辑，这使得每个对象都需要获取与其合作的对象（也就是它所依赖的对象）的引用。如果这个获取过程要靠自身实现，那么将导致代码高度耦合并且难以维护和调试 不是我自身的，却是我需要的，都是我所依赖的。一切需要外部提供的，都是需要进行依赖注入的。 2.上面俩种方法代码很清晰，但是当我们需要注入很多个依赖时，意味着又要增加很多行，会比较难以管理。比较好的解决办法是 建立一个class作为所有依赖关系的container，在这个class中可以存放、创建、获取、查找需要的依赖关系。先来了解一下IOC的概念 3.控制反转 （Inversion Of Control, IOC）控制反转 是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做 依赖注入（Dependency Injection, DI）, 还有一种叫”依赖查找”（DependencyLookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。 12345678910111213&lt;?phpclass Ioc &#123; protected $db_conn; public static function make_book() &#123; $new_book = new Book(); $new_book-&gt;set_db(self::$db_conn); //... //... //其他的依赖注入 return $new_book; &#125;&#125; 此时，如果获取一个book实例，只需要执行$newone &#x3D; Ioc::makebook(); 以上是container的一个具体实例，最好还是不要把具体的某个依赖注入写成方法，采用registry注册，get获取比较好 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;?php/** * 控制反转类 */class Ioc &#123; /** * @var array 注册的依赖数组 */ protected static $registry = array(); /** * 添加一个 resolve （匿名函数）到 registry 数组中 * * @param string $name 依赖标识 * @param Closure $resolve 一个匿名函数，用来创建实例 * @return void */ public static function register($name, Closure $resolve) &#123; static::$registry[$name] = $resolve; &#125; /** * 返回一个实例 * * @param string $name 依赖的标识 * @return mixed * @throws \\Exception */ public static function resolve($name) &#123; if (static::registered($name)) &#123; $name = static::$registry[$name]; return $name(); &#125; throw new \\Exception(&quot;Nothing registered with that name&quot;); &#125; /** * 查询某个依赖实例是否存在 * * @param string $name * @return bool */ public static function registered($name) &#123; return array_key_exists($name, static::$registry); &#125;&#125; 现在就可以通过如下方式来注册和注入一个 12345678Ioc::register(&quot;book&quot;, function () &#123; $book = new Book(); $book-&gt;setdb(&#x27;db&#x27;); $book-&gt;setfile(&#x27;file&#x27;); return $book;&#125;); // 注入依赖$book = Ioc::resolve(&#x27;book&#x27;); 4.问题汇总参与者都有谁？答：一般有三方参与者，一个是某个对象；一个是IoC&#x2F;DI的容器；另一个是某个对象的外部资源。又要名词解释一下，某个对象指的就是任意的、普通的Java对象;IoC&#x2F;DI的容器简单点说就是指用来实现IoC&#x2F;DI功能的一个框架程序；对象的外部资源指的就是对象需要的，但是是从对象外部获取的，都统称资源，比如：对象需要的其它对象、或者是对象需要的文件资源等等。 依赖：谁依赖于谁？为什么会有依赖？答：某个对象依赖于IoC&#x2F;DI的容器。依赖是不可避免的，在一个项目中，各个类之间有各种各样的关系，不可能全部完全独立，这就形成了依赖。传统的开发是使用其他类时直接调用，这会形成强耦合，这是要避免的。依赖注入借用容器转移了被依赖对象实现解耦。 注入：谁注入于谁？到底注入什么？答：通过容器向对象注入其所需要的外部资源 控制反转：谁控制谁？控制什么？为什么叫反转？答：IoC&#x2F;DI的容器控制对象，主要是控制对象实例的创建。反转是相对于正向而言的，那么什么算是正向的呢？考虑一下常规情况下的应用程序，如果要在A里面使用C，你会怎么做呢？当然是直接去创建C的对象，也就是说，是在A类中主动去获取所需要的外部资源C，这种情况被称为正向的。那么什么是反向呢？就是A类不再主动去获取C，而是被动等待，等待IoC&#x2F;DI的容器获取一个C的实例，然后反向的注入到A类中。 依赖注入和控制反转是同一概念吗？答：从上面可以看出：依赖注入是从应用程序的角度在描述，可以把依赖注入描述完整点：应用程序依赖容器创建并注入它所需要的外部资源；而控制反转是从容器的角度在描述，描述完整点：容器控制应用程序，由容器反向的向应用程序注入应用程序所需要的外部资源 参考参考参考 附上一个di&#x2F;ioc的写法 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889&lt;?phpinterface db&#123; public function select();&#125;class MysqlDb implements db&#123; public function select()&#123; echo &#x27;MysqlDb select&#x27;; &#125;&#125;class MongoDb implements db&#123; public function select()&#123; echo &#x27;MongoDb select&#x27;; &#125;&#125;class User&#123; protected $db; public function __construct(db $db) //约束注入类型 &#123; $this-&gt;db = $db; &#125; public function select() &#123; $this-&gt;db-&gt;select(); &#125;&#125;class Ioc&#123; public $binding = []; public function bind($abstract, $concrete) &#123; //绑定返回一个闭包，这里还不需要执行，仅做绑定 $this-&gt;binding[$abstract][&#x27;concrete&#x27;] = function ($ioc) use ($concrete) &#123; return $ioc-&gt;build($concrete); &#125;; &#125; public function make($abstract) &#123; //获取绑定的闭包，并执行 return $this-&gt;binding[$abstract][&#x27;concrete&#x27;]($this); &#125; //创建对象 public function build($concrete) &#123; //ReflectionClass反射（reflection）类报告了一个类的有关信息 $reflector = new ReflectionClass($concrete); //getConstructor获取类的构造函数 $constructor = $reflector-&gt;getConstructor(); if (is_null($constructor)) &#123; //实例化对象 newInstance从指定的参数创建一个新的类实例 return $reflector-&gt;newInstance(); &#125;else &#123; //获取构成函数的参数 getParameters获取参数 $dependen = $constructor-&gt;getParameters(); //获取依赖 getDependencies $intances = $this-&gt;getDependencies($dependen); //newInstanceArgs 从给出的参数创建一个新的类实例 return $reflector-&gt;newInstanceArgs($intances); &#125; &#125; //获取依赖，如果存在依赖就创建依赖 protected function getDependencies($dependen) &#123; $dependencies = []; foreach ($dependen as $paramter)&#123; $dependencies[] = $this-&gt;make($paramter-&gt;getClass()-&gt;name); &#125; return $dependencies; &#125;&#125;$ioc = new Ioc();$ioc-&gt;bind(&#x27;db&#x27;,&#x27;MysqlDb&#x27;);$ioc-&gt;bind(&#x27;user&#x27;,&#x27;User&#x27;);$user = $ioc-&gt;make(&#x27;user&#x27;);$user-&gt;select();$ioc-&gt;bind(&#x27;db&#x27;,&#x27;MongoDb&#x27;);$user = $ioc-&gt;make(&#x27;user&#x27;);$user-&gt;select();$ioc-&gt;bind(&#x27;db&#x27;,&#x27;MysqlDb&#x27;);$user = $ioc-&gt;make(&#x27;user&#x27;);$user-&gt;select(); 文本","categories":[{"name":"php","slug":"php","permalink":"http://example.com/categories/php/"},{"name":"基础","slug":"php/基础","permalink":"http://example.com/categories/php/%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"ioc","slug":"ioc","permalink":"http://example.com/tags/ioc/"},{"name":"di","slug":"di","permalink":"http://example.com/tags/di/"}]},{"title":"外链文章","slug":"工具/link","date":"2023-07-20T08:31:45.000Z","updated":"2023-08-29T09:59:15.024Z","comments":true,"path":"2023/07/20/工具/link/","link":"","permalink":"http://example.com/2023/07/20/%E5%B7%A5%E5%85%B7/link/","excerpt":"","text":"第三方外链 easy-tips yii2","categories":[{"name":"php","slug":"php","permalink":"http://example.com/categories/php/"},{"name":"基础","slug":"php/基础","permalink":"http://example.com/categories/php/%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"外链","slug":"外链","permalink":"http://example.com/tags/%E5%A4%96%E9%93%BE/"}]},{"title":"yii 请求头","slug":"yii/yii","date":"2023-07-19T05:58:15.000Z","updated":"2023-07-19T06:06:08.165Z","comments":true,"path":"2023/07/19/yii/yii/","link":"","permalink":"http://example.com/2023/07/19/yii/yii/","excerpt":"","text":"平时不怎么注意到的问题， yii 模拟请求表单提交 数据json字符串 php://input 也能接受参数 实际查看debug传参是当作整个json 当作key内容 代码 1234567891011121314151617181920212223242526//curl 代码 模拟客户端请求$ch = curl_init();$data = [&#x27;username&#x27; =&gt; &#x27;周伯通&#x27;, &#x27;password&#x27; =&gt; &#x27;123456&#x27;, &#x27;sign&#x27; =&gt; &#x27;asdfg123456&#x27;];$url = &#x27;sjqfront.com/bid_v3/qingjian/apply&#x27;;$ch = curl_init(); //初始化curlcurl_setopt($ch, CURLOPT_URL, $url);//设置链接curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);//设置是否返回信息curl_setopt($ch, CURLOPT_POST, 1);//设置为POST方式curl_setopt($ch, CURLOPT_HEADER, array(&#x27;Content-type: application/x-www-form-urlencoded;charset=UTF-8&#x27;));//设置为POST方式curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));//POST数据curl_setopt($ch, CURLOPT_USERAGENT, &quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&quot;);$response = curl_exec($ch);//接收返回信息if (curl_errno($ch)) &#123;//出错则显示错误信息 print curl_error($ch);&#125;curl_close($ch); //关闭curl链接file_put_contents(&#x27;1.txt&#x27;,$response,FILE_APPEND);exit();// yii响应头默认 text/html$r = \\Yii::$app-&gt;request-&gt;getRawBody();print_r(json_decode($r,true));exit();","categories":[{"name":"php","slug":"php","permalink":"http://example.com/categories/php/"},{"name":"yii","slug":"php/yii","permalink":"http://example.com/categories/php/yii/"}],"tags":[{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"},{"name":"yii","slug":"yii","permalink":"http://example.com/tags/yii/"}]},{"title":"装修","slug":"生活/装修","date":"2023-07-18T07:49:03.000Z","updated":"2023-09-06T09:39:15.816Z","comments":true,"path":"2023/07/18/生活/装修/","link":"","permalink":"http://example.com/2023/07/18/%E7%94%9F%E6%B4%BB/%E8%A3%85%E4%BF%AE/","excerpt":"","text":"房贷 租房 生活费 - - 1900 2000 2000 - - 装修完后 ·家具 ： 家具名称 家电品牌 类型 预算价钱 实际价钱 主卧床 - 大床(2*1.8) 3500 次卧床 - 大床(1.8*1.8) 2500 窗帘 - 三个卧室 + 客厅阳台 1500 空调 格力&#x2F;美的 主卧 + 次卧 4000 电视机 夏普 客厅 4000 沙发 - 客厅 5000 餐桌 - 餐厅(8人桌) 2000 冰箱 - 厨房 2000 洗衣机 - 阳台 2000 网络 - - 1000 饮水机 - - 200 实际 装修完后 ·家具 ： 家具名称 家电品牌 类型 预算价钱 实际价钱 主卧床 - 大床(2*1.8) 5000 次卧床 - 大床(1.8*1.8) 1800 + 2500 窗帘 - 三个卧室 + 客厅阳台 2000 空调 格力&#x2F;美的 主卧 + 次卧 4200 电视机 夏普 客厅 3900 沙发 - 客厅 5000 餐桌 - 餐厅(8人桌) 200 冰箱 - 厨房 3500 洗衣机 - 阳台 2500 网络 - - 98*12 饮水机 - - 没买","categories":[{"name":"生活","slug":"生活","permalink":"http://example.com/categories/%E7%94%9F%E6%B4%BB/"},{"name":"记录","slug":"生活/记录","permalink":"http://example.com/categories/%E7%94%9F%E6%B4%BB/%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://example.com/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"汽车投诉车质网","slug":"生活/装修-1","date":"2023-07-18T07:49:03.000Z","updated":"2023-09-28T03:45:12.399Z","comments":true,"path":"2023/07/18/生活/装修-1/","link":"","permalink":"http://example.com/2023/07/18/%E7%94%9F%E6%B4%BB/%E8%A3%85%E4%BF%AE-1/","excerpt":"","text":"尊敬的车质网： 我是一名拥有一辆XXX型号汽车的车主，我对我所购买的这辆车的质量和性能感到非常担忧和失望。在我购买这辆车之后，不久便发现了严重的方向盘问题，这让我非常担忧。 首先，我要反映的问题是方向盘过重。在驾驶过程中，我发现方向盘异常沉重，特别是在低速行驶和停车时。这使得操控变得异常困难，严重影响了驾驶安全性。在繁忙的交通中，我不得不付出更大的力气来转动方向盘，这不仅令我疲惫不堪，也增加了驾驶的风险。我相信这绝非正常状况，也严重违反了一辆车的基本行驶标准。 其次，与方向盘过重问题密切相关的是转向困难。由于方向盘异常沉重，我在转弯时遇到了严重的困难。在紧急情况下，我甚至无法迅速地正确转向，这极大地威胁了我的行车安全。我曾多次感到惊恐和无助，因为我无法准确地控制我的车辆，这让我非常担忧。 我购买这辆车的初衷是希望拥有一辆安全可靠的交通工具，但现在我却因为方向盘重、转向困难的严重问题感到十分失望和焦虑。我认为这绝不是一辆符合基本质量标准的汽车，我对这样的产品质量感到极为失望。 我诚恳地希望车质网能够尽快对我的投诉进行认真审核，并协助我解决这个严重的问题。我迫切需要厂家对这辆车的方向盘问题进行检修或更换，以确保我的行车安全。 最后，我也希望通过我的投诉，提醒其他消费者对于购买汽车时务必审慎选择，避免遭受类似的质量问题，保障自己和家人的行车安全。 再次感谢车质网对我的关注与帮助，我期待着尽快得到问题的解决。 此致，[您的姓名][联系方式]","categories":[{"name":"生活","slug":"生活","permalink":"http://example.com/categories/%E7%94%9F%E6%B4%BB/"},{"name":"记录","slug":"生活/记录","permalink":"http://example.com/categories/%E7%94%9F%E6%B4%BB/%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"生活","slug":"生活","permalink":"http://example.com/tags/%E7%94%9F%E6%B4%BB/"}]},{"title":"go语言","slug":"golang/go","date":"2023-07-18T06:32:25.000Z","updated":"2023-07-20T06:04:32.450Z","comments":true,"path":"2023/07/18/golang/go/","link":"","permalink":"http://example.com/2023/07/18/golang/go/","excerpt":"","text":"参考资料","categories":[{"name":"golang","slug":"golang","permalink":"http://example.com/categories/golang/"},{"name":"基础","slug":"golang/基础","permalink":"http://example.com/categories/golang/%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"go","slug":"go","permalink":"http://example.com/tags/go/"}]},{"title":"项目笔记","slug":"日常项目备注/项目笔记","date":"2023-07-18T06:26:21.000Z","updated":"2023-07-18T06:27:44.272Z","comments":true,"path":"2023/07/18/日常项目备注/项目笔记/","link":"","permalink":"http://example.com/2023/07/18/%E6%97%A5%E5%B8%B8%E9%A1%B9%E7%9B%AE%E5%A4%87%E6%B3%A8/%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/","excerpt":"","text":"参考资料 促销系统1 促销系统2","categories":[{"name":"项目","slug":"项目","permalink":"http://example.com/categories/%E9%A1%B9%E7%9B%AE/"},{"name":"笔记","slug":"项目/笔记","permalink":"http://example.com/categories/%E9%A1%B9%E7%9B%AE/%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"工具","slug":"工具/ps","date":"2023-07-18T06:14:55.000Z","updated":"2023-07-18T07:52:52.946Z","comments":true,"path":"2023/07/18/工具/ps/","link":"","permalink":"http://example.com/2023/07/18/%E5%B7%A5%E5%85%B7/ps/","excerpt":"","text":"vscode 快捷键选中一段文字，按shift+alt+i，可以在每行末尾出现光标 批量编辑 phpstrom一直按Alt+J apipost 全局设置参数1234&#123;&#123;token&#125;&#125;&#123;&#123;auth-key&#125;&#125;apt.variables.set(&#x27;token&#x27;,response.json.data.token);apt.variables.set(&#x27;auth-key&#x27;,response.json.data.auth_key); chartgptsk-jHfsqqBjw6wqozDtRtybT3BlbkFJXrC4fXjhe9Tdgab6JCcx phpstorm debug调式?XDEBUG_SESSION_START=PHPSTROM 要将两行合并为一行并移除不必要的空格，请按 ⌃⇧J。","categories":[{"name":"php","slug":"php","permalink":"http://example.com/categories/php/"},{"name":"phpstrom","slug":"php/phpstrom","permalink":"http://example.com/categories/php/phpstrom/"}],"tags":[{"name":"phpstorm","slug":"phpstorm","permalink":"http://example.com/tags/phpstorm/"}]},{"title":"hyperf","slug":"php/hyperf","date":"2023-07-18T06:13:00.000Z","updated":"2023-07-18T06:30:26.122Z","comments":true,"path":"2023/07/18/php/hyperf/","link":"","permalink":"http://example.com/2023/07/18/php/hyperf/","excerpt":"","text":"hyperf 设置根目录静态资源访问 config&#x2F;server.php swoole server配置 123&#x27;document_root&#x27; =&gt; BASE_PATH.&#x27;/web&#x27;,&#x27;static_handler_locations&#x27; =&gt; [&#x27;/&#x27;],&#x27;enable_static_handler&#x27; =&gt; true, web目录访问 ： http://127.0.0.1:9501/index.html hyperf 生成控制器 12345php bin/hyperf.php gen:controller -N App\\Wechat\\Controller ttphp bin/hyperf.php gen:controller -N App\\Admin\\Controller TalkTagphp bin/hyperf.php gen:model --path=app/SaasModel --pool=saas -i=BaseModel goods_order 导出excel, 6w数据分批导出,大概 20s 单次db 1w条数据1.导出excel文件存放storage/xx.xls2.$this-&gt;response-&gt;download(&#39;filepath&#39;,&#39;filename&#39;) 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859&lt;?phpnamespace App\\Wechat\\WxUtils;use PhpOffice\\PhpSpreadsheet\\IOFactory;use PhpOffice\\PhpSpreadsheet\\Spreadsheet;class Excel&#123; private $sheet; private $spreadsheet; private $row; public function __construct() &#123; $this-&gt;spreadsheet = new Spreadsheet(); $this-&gt;spreadsheet-&gt;setActiveSheetIndex(0); $this-&gt;sheet = $this-&gt;spreadsheet-&gt;getActiveSheet(); $this-&gt;spreadsheet-&gt;getActiveSheet()-&gt;setTitle(&#x27;Sheet1&#x27;); &#125; public function setHeader($title) &#123; foreach ($title as $key =&gt; $item) &#123; $this-&gt;sheet-&gt;setCellValue(chr($key + 65).&#x27;1&#x27;, $item); &#125; $this-&gt;row = 2; // 从第二行开始 return $this; &#125; public function addData($data) &#123; foreach ($data as $item) &#123; $dataCol = &#x27;A&#x27;; foreach ($item as $value) &#123; // 单元格内容写入 $this-&gt;sheet-&gt;setCellValue($dataCol.$this-&gt;row, $value); $dataCol++; &#125; $this-&gt;row++; &#125; return $this; &#125; public function save($fileName) &#123; $this-&gt;spreadsheet-&gt;setActiveSheetIndex(0); $fileName = $fileName.&#x27;.xlsx&#x27;; $url = &#x27;/storage/&#x27;.$fileName; $outFilename = BASE_PATH.$url; $writer = IOFactory::createWriter($this-&gt;spreadsheet, &#x27;Xlsx&#x27;); $writer-&gt;save($outFilename); $this-&gt;spreadsheet-&gt;disconnectWorksheets(); unset($this-&gt;spreadsheet); return [&#x27;path&#x27; =&gt; $outFilename, &#x27;filename&#x27; =&gt; $fileName]; &#125;&#125; 缓存 key mutex 问题 key mutex 微博cache key 目标 ： 尽量少的线程（或者1个线程）来构建换成 1.使用 mutex key 使用1个线程来构建缓存 ，其他线程等待构建缓存的线程执行完即可 123456789101112131415161718 参考代码 String get(String key) &#123; String value = redis.get(key); if (value == null) &#123; if (redis.setnx(key_mutex, &quot;1&quot;)) &#123; // 3 min timeout to avoid mutex holder crash redis.expire(key_mutex, 3 * 60) value = db.get(key); redis.set(key, value); redis.delete(key_mutex); &#125; else &#123; //其他线程休息50毫秒后重试 Thread.sleep(50); get(key); &#125; &#125; &#125; “提前”使用互斥锁(mutex key) 在value 中设置1个 time_out 时间戳 12345678910111213141516171819202122232425262728v = memcache.get(key); if (v == null) &#123; if (memcache.add(key_mutex, 3 * 60 * 1000) == true) &#123; value = db.get(key); memcache.set(key, value); memcache.delete(key_mutex); &#125; else &#123; sleep(50); retry(); &#125; &#125; else &#123; if (v.timeout &lt;= now()) &#123; if (memcache.add(key_mutex, 3 * 60 * 1000) == true) &#123; // extend the timeout for other threads v.timeout += 3 * 60 * 1000; memcache.set(key, v, KEY_TIMEOUT * 2); // load the latest value from db v = db.get(key); v.timeout = KEY_TIMEOUT; memcache.set(key, value, KEY_TIMEOUT * 2); memcache.delete(key_mutex); &#125; else &#123; sleep(50); retry(); &#125; &#125; &#125; 3.永不过期 博客 @@ 缓存雪崩 ： 设置缓存时，key都采用了相同expire 缓存服务宕机 实现熔断限流机制，对系统进行负载能力控制, 在原有失效时间基础上增加一个随机值，比如1~5分钟的随机，这样每个缓存的过期时间重复率就会降低，集体失效概率也会大大降低 限流或者降级 例如5w个请求,先允许2w 部分请求先进来, 其他3w请求打到写好限流中间件返回空值或者默认值 @@ 缓存穿透 大量并发查询一个不存在的key 导致数据库流量都打到数据库 Bloom过滤或RoaringBitmap 判断KEY是否存在 【 最常见的布隆过滤器，将所有可能存在的数据哈希到一个足够大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉，从而避免了对底层存储系统的查询压力】 怎么理解 ：数据库ID 1-100000 每条插入的时候id 插入到布隆过器里面， 使用布隆过滤器进行过滤 缓存空值的KEY，这样第一次不存在也会被加载会记录，下次拿到有这个KEY @@ 缓存穿透 某KEY失效时，正好有大量并发请求访问该KEY 缓存 + 过期时间 存储一个value 进行提前重设 事务隔离级别 脏读（dirty read） 由上图可以发现，事务A、B交替执行，事务A被事务B干扰到了，因为事务A读取到事务B未提交的数据,这就是脏读 事务A需要读到100的余额 不可重复读（unrepeatable read） 事务A又被事务B干扰到了！在事务A范围内，两个相同的查询，读取同一条记录，却返回了不同的数据，这就是不可重复读 幻读 事务A查询一个范围的结果集，另一个并发事务B往这个范围中插入&#x2F;删除了数据，，然后事务A再次查询相同的范围，两次读取得到的结果集不一样了，这就是幻读 事务四大隔离级别 读未提交（Read Uncommitted） 事务读不加锁，不阻塞其他事务的读和写事务写阻塞其他事务写，但不阻塞其他事务读； 读已提交（Read Committed） 可重复读（Repeatable Read） 串行化（Serializable） tcp协议部分 a记录一次swoole 4.8升级安装报错问题源码包编译安装 1PHP Warning: PHP Startup: Unable to load dynamic library &#x27;swoole.so&#x27; (tried: /usr/local/php/lib/php/extensions/no-debug-non-zts-20190902/swoole.so (/usr/local/php/lib/php/extensions/no-debug-non-zts-20190902/swoole.so: undefined symbol: curl_CURLFile_class), /usr/local/php/lib/php/extensions/no-debug-non-zts-20190902/swoole.so.so (/usr/local/php/lib/php/extensions/no-debug-non-zts-20190902/swoole.so.so: cannot open shared object file: No such file or directory)) in Unknown on line 0 在php.ini中先加载curl extension=curl.so extension=swoole.so 这样会导致重复加载curl.so , 在mod_目录中 curl.ini中下面加上swoole.so swoole版本升级 wsl 内部没有局域网ip 只能通过代理转发1234567 netsh interface portproxy add v4tov4 listenport=12000 listenaddress=0.0.0.0 connectport=9999 connectaddress=127.0.0.1 protocol=tcp9999：为内部wsl 服务端口172.27.240.162 ：为wsl 内部ip 查看端口转发状态1netsh interface portproxy show all 删除端口转发： 123netsh interface portproxy delete v4tov4 listenport=* listenaddress=0.0.0.0*代表所有端口，0.0.0.0为所有ip","categories":[{"name":"php","slug":"php","permalink":"http://example.com/categories/php/"},{"name":"hyperf","slug":"php/hyperf","permalink":"http://example.com/categories/php/hyperf/"}],"tags":[{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"},{"name":"hyperf","slug":"hyperf","permalink":"http://example.com/tags/hyperf/"}]},{"title":"laravel 创建Facades门面","slug":"php/laravel","date":"2023-07-18T06:13:00.000Z","updated":"2023-10-07T00:38:01.873Z","comments":true,"path":"2023/07/18/php/laravel/","link":"","permalink":"http://example.com/2023/07/18/php/laravel/","excerpt":"","text":"要自定义门面，你需要遵循以下步骤： 创建门面类： 首先，创建一个继承自 Illuminate\\Support\\Facades\\Facade 的门面类。这个类将作为你自定义门面的接口。 例如，假设你想创建一个名为 CustomFacade 的门面： 12345678910111213&lt;?phpnamespace App\\Facades;use Illuminate\\Support\\Facades\\Facade;class CustomFacade extends Facade&#123; protected static function getFacadeAccessor() &#123; return &#x27;custom&#x27;; // 对应服务容器中的标识符 &#125;&#125; 在这个例子中，CustomFacade 的 getFacadeAccessor 方法返回了 &#39;custom&#39;，这个标识符将用于在服务容器中查找相应的实例。 创建服务提供者： 接下来，你需要创建一个服务提供者，将自定义服务注册到 Laravel 中。 1php artisan make:provider CustomServiceProvider 在生成的 CustomServiceProvider.php 中，你可以在 register 方法中注册自定义服务： 123456public function register()&#123; $this-&gt;app-&gt;bind(&#x27;custom&#x27;, function ($app) &#123; return new \\App\\Services\\CustomService(); &#125;);&#125; 在这个例子中，我们将一个名为 custom 的标识符与一个自定义的服务类绑定。 在配置文件中注册服务提供者： 打开 config/app.php 配置文件，将你的服务提供者添加到 providers 数组中： 1234&#x27;providers&#x27; =&gt; [ // ... App\\Providers\\CustomServiceProvider::class,], 创建自定义服务类： 创建一个用于提供服务的自定义类，例如： 1234567891011&lt;?phpnamespace App\\Services;class CustomService&#123; public function doSomething() &#123; return &quot;Doing something!&quot;; &#125;&#125; 使用你的自定义门面： 在任何地方都可以使用你的自定义门面来调用服务，而不需要实例化服务类： 123use App\\Facades\\CustomFacade;CustomFacade::doSomething(); // 将调用 CustomService 中的 doSomething 方法 这样，你就创建了一个自定义门面并将其与一个自定义服务相关联。在使用门面时，它会代理到相应的服务提供者中注册的服务实例上。这使得你可以以简单直观的方式在应用程序中访问和使用自定义服务。 laravel 常用的250个技巧","categories":[{"name":"php","slug":"php","permalink":"http://example.com/categories/php/"},{"name":"hyperf","slug":"php/hyperf","permalink":"http://example.com/categories/php/hyperf/"}],"tags":[{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"},{"name":"hyperf","slug":"hyperf","permalink":"http://example.com/tags/hyperf/"}]},{"title":"wsl2使用","slug":"工具/wsl","date":"2023-07-18T06:05:57.000Z","updated":"2023-07-18T06:08:22.163Z","comments":true,"path":"2023/07/18/工具/wsl/","link":"","permalink":"http://example.com/2023/07/18/%E5%B7%A5%E5%85%B7/wsl/","excerpt":"","text":"设置默认启动 1234567891011 ubuntu config --default-user root add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; service ssh --full-restart端口转发iex &quot;netsh interface portproxy add v4tov4 listenport=12000 listenaddress= 192.168.19.117 connectport=8888 connectaddress=127.0.0.1&quot;;git config --global core.autocrlf false","categories":[{"name":"linux","slug":"linux","permalink":"http://example.com/categories/linux/"},{"name":"windows wsl","slug":"linux/windows-wsl","permalink":"http://example.com/categories/linux/windows-wsl/"}],"tags":[{"name":"wsl2","slug":"wsl2","permalink":"http://example.com/tags/wsl2/"},{"name":"windows","slug":"windows","permalink":"http://example.com/tags/windows/"}]},{"title":"mac","slug":"工具/mac","date":"2023-07-18T06:05:57.000Z","updated":"2023-09-21T01:08:22.812Z","comments":true,"path":"2023/07/18/工具/mac/","link":"","permalink":"http://example.com/2023/07/18/%E5%B7%A5%E5%85%B7/mac/","excerpt":"","text":"mac 电脑的全新下载 下载源 码云地址： https://gitee.com/cunkai/HomebrewCN mac 阿里云源 https://developer.aliyun.com/mirror/homebrew/?spm=a2c6h.25603864.0.0.4c795129L0K5fb","categories":[{"name":"mac","slug":"mac","permalink":"http://example.com/categories/mac/"}],"tags":[{"name":"mac","slug":"mac","permalink":"http://example.com/tags/mac/"}]},{"title":"vue笔记","slug":"前端/前端","date":"2023-07-18T01:10:56.000Z","updated":"2023-07-18T01:11:49.220Z","comments":true,"path":"2023/07/18/前端/前端/","link":"","permalink":"http://example.com/2023/07/18/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF/","excerpt":"","text":"参考资料","categories":[{"name":"前端","slug":"前端","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF/"},{"name":"vue","slug":"前端/vue","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF/vue/"}],"tags":[]},{"title":"面试总结","slug":"面试/面试","date":"2023-07-18T01:10:02.000Z","updated":"2023-07-18T01:10:28.173Z","comments":true,"path":"2023/07/18/面试/面试/","link":"","permalink":"http://example.com/2023/07/18/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95/","excerpt":"","text":"参考资料","categories":[{"name":"面试","slug":"面试","permalink":"http://example.com/categories/%E9%9D%A2%E8%AF%95/"},{"name":"总结","slug":"面试/总结","permalink":"http://example.com/categories/%E9%9D%A2%E8%AF%95/%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"面试","slug":"面试","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"git笔记","slug":"工具/git","date":"2023-07-18T01:07:28.000Z","updated":"2023-08-04T09:48:54.517Z","comments":true,"path":"2023/07/18/工具/git/","link":"","permalink":"http://example.com/2023/07/18/%E5%B7%A5%E5%85%B7/git/","excerpt":"","text":"git忽略文件权限git config --global core.filemode false 在最后一条记录，可以看到信息为：“ checkout: moving from master to develop”，表示develop分支是从master分支“移动”过去的，也就是develop分支是基于master分支拉取的git reflog show --date=local | grep 当前分支名 一次性推送本地所有标签git push origin --tags git中如何合并某个指定文件分支A_bracn和B_branch，只想将A_branch分支的某个文件f.txt合并到B_branch分支上。 git checkout A_branch git checkout --patch B_branch f.txt第一个命令： 切换到A分支；第二个命令：合并B分支上f文件到A分支上，将B分支上 f 文件追加补丁到A分支上 f文件。你可以接受或者拒绝补丁内容。 如果只是简单的将A_branch分支的文件f.txt copy到B_branch分支上 git checkout B_branchcd path&#x2F;to&#x2F;f.txtgit checkout A_bracn f.txt 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332# 显示详细的修改状态$ git status # 以短格式显示状态,更简洁$ git status -s # 顺便显示当前分支名$ git status -b# 显示忽略的文件$ git status --ignored# 显示工作区与暂存区的差异。$ git diff # 显示暂存区与仓库的差异$ git diff --staged $ git diff --cached# 显示工作区与仓库的差异$ git diff HEAD# 显示两个提交之间的差异$ git diff 02d1a7b d2974d6# 显示两个分支之间的差异。$ git diff dev master# 导出差异文件成压缩包$ git diff --name-only 144d196 188df06a | xargs tar -cvf pacakge.tar.gz# 提交暂存区的修改,并添加提交信息,生成commit id$ git commit -m &quot;message&quot;# 提交工作区和暂存区的所有修改,不包含新建的文件$ git commit -am &quot;message&quot;# 修改最后一次提交的信息$ git commit --amend# 绕过钩子程序$ git commit --no-verify# 允许空白提交,git tag可能会用到$ git commit --allow-empty# 放弃对工作区文件的修改,恢复到仓库HEAD的状态,可用正则匹配$ git restore hello.c $ git restore &#x27;*.c&#x27;$ git restore .# 恢复工作区文件到指定提交的状态$ git restore --source 7d68213 hello.c$ git restore -s 7d68213 hello.c# 仅恢复暂存区的文件到HEAD状态,不影响工作区,相当于撤销git add hello.c操作$ git restore --staged hello.c# 重置HEAD为指定提交,重置暂存区但保留工作区修改$ git reset 7d68213$ git reset --mixed 7d68213# 重置HEAD为指定提交,但保留工作区修改$ git reset --soft 7d68213# 回滚HEAD两个版本,但保留工作区修改$ git reset --soft HEAD~2# 重置HEAD为指定提交,重置暂存区和工作区,丢弃所有修改$ git reset --hard dc7ccb1# 重置时保留未跟踪文件。$ git reset --mixed --keep 2d3a2b9# 删除指定文件,并提交移除操作到暂存区,删除前会检查文件状态,以免误删未提交的修改。$ git rm index.php# 删除指定文件,并提交移除操作到暂存区,删除前不会检查文件状态$ git rm -f index.php# 删除暂存区和仓库中的文件,但保留工作区中的文件$ git rm --cached xx.log# 递归删除整个目录$ git rm -r runtime/# 删除目录中的所有文件的暂存区和仓库版本,但保留工作区中的文件,一般用于.gitignore文件添加.idea文件夹时,把.idea从暂存区和仓库删掉同时保留工作区文件$ git rm -r --cached .idea/# 列出本地所有分支$ git branch# 创建本地新分支$ git branch feature/devlop# 删除本地分支,只能删除已合并的分支,或者HEAD和master一致的分支(还没commit过)$ git branch -d feature/devlop# 删除本地分支,可以删除未合并的分支$ git branch -D feature/devlop# 列出本地分支及其最后一个提交$ git branch -v# 列出本地已经合并到当前分支的分支$ git branch --merged# 列出尚未合并到当前分支的分支$ git branch --no-merged# 列出本地和远程所有分支$ git branch -a# 重命名分支$ git branch -m master main# 复制一个分支到新创建的分支上,拥有前分支完整的历史$ git branch -c new_branch# 将本地分支与指定的远程分支建立追踪关系。$ git branch --set-upstream-to main main# 删除对远程分支的追踪设置。$ git branch --unset-upstream new_branch# 从 c83c925f6 提交处创建新的分支。$ git branch test c83c925f6# 切换到指定分支$ git checkout master:切换到指定分支# 创建新分支并切换到该分支$ git checkout -b develop# 丢弃工作区的修改,恢复与暂存区一致的版本$ git checkout -- index.php# 工作区中文件的版本回滚到仓库指定提交$ git checkout cdc5737 -- index.php# 切换到指定tag所指向的提交,配合rebase使用可以在重要的标记状态继续工作,同时不必担心丢失之前的提交$ git checkout v1.0# 将指定分支 develop 合并到当前分支,如果可以快进则快进,如果不能快进则创建一个新的合并提交,保留完整的分支记录# 快进指的是如果develop HEAD是master HEAD的上游,则可以直接把master HEAD改成develop HEAD$ git merge develop# 禁用快进,创建一个新的合并提交,即使可以进行快进合并,保留完整的分支记录,常用于开发阶段$ git merge --no-ff develop# 仅在可以进行快进合并时才会合并指定分支$ git merge --ff-only develop# 将指定分支 develop 的多个提交压缩到一个提交,合并到当前分支的暂存区,需要手动提交$ git merge --squash develop# 执行合并但不创建提交,需要手动提交$ git merge --no-commit develop# 显示最近两次提交$ git log -2# 显示某个作者的提交日志 $ git log --author=&quot;ben&quot;# 显示某个日期范围内的提交 $ git log --since=1.month --until=&quot;2018-02-28&quot;# 显示包含某个关键词的提交$ git log --grep=&quot;README&quot;# 显示某个文件被修改的历史 $ git log --follow README.md# 一条命令显示简洁日志、分支和版本标签$ git log --oneline --decorate --all --graph# 显示提交统计信息 $ git log --stat# 显示某个tag到当前提交的日志 $ git log v1.0.0..HEAD# 显示某个tag和最后一个tag之间的所有提交git log v1.0.0..v1.2.1# 显示某个分支的日志$ git log master# 显示所有存储的stash,可以使用git stash apply恢复指定的stash。$ git stash list# 显示指定stash的更改信息,不恢复stash。$ git stash show stash@&#123;0&#125;# 以补丁的形式显示更改信息。$ git stash show -p# 恢复指定的stash到一个新分支上。$ git stash branch new_branch# 恢复最近一次的stash,并从stash list中移除它。$ git stash pop# 从stash list中移除一个stash,不会恢复它。$ git stash drop# 清除所有stash。$ git stash clear# 恢复指定的stash,但是不从stash list中移除它,可以用于测试恢复效果。$ git stash apply stash@&#123;0&#125;# 保存当前工作并添加注释,便于之后查找恢复。$ git stash save &quot;some comments&quot;# 交互式地选择要暂存的更改部分,不保存全部的工作进度。$ git stash save --patch# 只暂存已经添加至暂存区的更改,未添加的更改不会被暂存。$ git stash save --keep-index# 打一个轻量级标签$ git tag v1.0# 打一个带注释的标签$ git tag -a v2.0 -m &quot;Release version 2.0&quot;# 给过去的某次提交打标签$ git tag -a v1.1 9fa1799# 查看v1.1的标签信息和提交信息$ git show v1.1# 从标签v1.1创建新分支$ git checkout -b release-v1.1 v1.1# 删除本地标签v1.1$ git tag -d v1.1# 推送单个新标签到远程$ git push origin v1.0# 推送所有新标签到远程$ git push origin --tags# 删除远程标签$ git tag -r &lt;tagname&gt;# 获取所有远程仓库最新提交:$ git fetch --all# 查看本地和远程仓库差异,然后合并$ git log origin/dev..dev$ git diff origin/dev dev$ git merge# 只获取origin远程仓库master分支的最新两个提交$ git fetch origin master --depth 2# 获取origin远程仓库,并清除服务器上已经删除的分支$ git fetch --prune origin# 将一个浅仓库转为完整仓库:$ git fetch --unshallow# 预览将要获取的提交,但不实际获取$ git fetch --dry-run# 从origin远程仓库获取master分支并合并: $ git pull origin master# 使用rebase合并:$ git pull --rebase# 只在可以快速向前合并的情况下进行合并:$ git pull --ff-only# 从所有远程仓库获取数据并合并: $ git pull --all# 删除远程仓库origin并更新引用:$ git pull -d origin# 拉取远程仓库的标签$ git pull --tags# 推送master分支到origin远程仓库: $ git push origin master# 推送全部本地分支到origin:$ git push origin --all# 删除远程仓库origin的dev分支:$ git push origin --delete dev# 强制推送master分支到origin,会覆盖远程分支:$ git push origin master --force# 只有在远程master分支是当前master分支的上游分支时,才强制推送:$ git push origin master --force-with-lease# 推送所有标签到远程仓库$ git push &lt;remote&gt; --tagsgit remote add origin https://github.com/user/repo.gitgit remote add upstream https://gitlab.com/user/repo.git git remote add alias https://bitbucket.org/user/repo.git# 列出当前所有的远程仓库别名$ git remote# 添加一个新的远程仓库origin,URL为https://github.com/user/repo.git$ git remote add origin https://github.com/user/repo.git# 重命名远程仓库upstream为up$ git remote rename upstream up# 移除远程仓库up$ git remote remove up# 修改远程仓库origin的URL$ git remote set-url origin https://gitee.com/user/repo.git# 列出远程仓库origin的详细信息$ git remote show origin# 显示HEAD指向的提交信息$ git show# 显示master分支的最新提交815e1c2的信息$ git show 815e1c2# 仅显示该提交修改的文件列表$ git show 815e1c2 --name-only# 显示该提交的文件差异 $ git show 815e1c2 -p# 以medium格式显示提交信息$ git show 815e1c2 --pretty=medium# 显示要应用提交815e1c2,需要运行的cherry-pick命令$ git show 815e1c2 --cherry-pick# 显示所有提交的简要日志,按提交者排序$ git shortlog# 仅显示最近10次提交$ git shortlog -n 10# 显示提交者和提交次数的汇总,不显示提交摘要$ git shortlog -s# 显示所有提交者的邮箱和提交SHA-1校验和$ git shortlog -e --all# 查找master最近5次变更$ git reflog show master | head - 5750c435 (HEAD -&gt; master) master@&#123;0&#125;: commit: xx2d3a2b9 (tag: v1.0) master@&#123;1&#125;: reset: moving to 2d3a2b9ddc7ccb1 master@&#123;2&#125;: reset: moving to dc7ccb12d3a2b9 (tag: v1.0) master@&#123;3&#125;: reset: moving to 2d3a2b9dc# 回滚到master两次改变之前的commit,git log也会恢复$ git reset --hard master@&#123;2&#125;# 撤销最近一次提交 $ git revert HEAD# 撤销指定的提交 $ git revert 8fd4e43# 编辑revert信息$ git revert -e 8fd4e43# 撤销指定提交,不记录revert到操作$ git revert --no-commit 8fd4e43# 将experiment分支rebase到master分支 $ git checkout experiment $ git rebase master# 交互式rebase,合并最近3次提交 $ git rebase -i HEAD~3# 继续rebase操作 $ git rebase --continue # 终止rebase操作 $ git rebase --abort# 应用0001-fix-bug.patch补丁$ git apply 0001-fix-bug.patch# 仅显示应用该补丁后文件的变化统计:$ git apply --stat 0001-fix-bug.patch# 检查补丁是否可以应用成功:$ git apply --check 0001-fix-bug.patch# 应用补丁,更新索引而非工作树$ git apply --cached 0001-fix-bug.patch# 反转补丁的更改$ git apply --reverse 0001-fix-bug.patch# 在无法应用的部分中创建reject文件$ git apply --reject 0001-fix-bug.patch git 分支笔记 git branch //查看分支 git branch dev //新建分支 git checkout -b dev //创建分支并且切换到分支下 git branch -d dev //删除dev 分支 git merge dev //合并分支 git tag 标签git tag -a v1.0 //给目前提交打上标签 git tag -a v0.9 85fc7e7 //为某一个版本追加标签 git tag //查看标签 git tag -d v1.0 //删除某个标签 git show v1.0 //查看某个版本的修改 查看历史提交git log --oneline //正向查看提交历史一行一行 git log --reverse --oneline // 逆向查看提交历史 git log --oneline --graph //以图表形式展示 git diff 比较git diff master..test //比较两个版本的差异 注意是是版本 文件 git diff master...dev //比较两个分支是否存在差异 三个... git diff //显示在当前的工作目录里的，没有 staged(添加到索引中)，且在下次提交时 不会被提交的修改 git diff --cached //当前的索引和上次提交间的差异；这些内容在不带&quot;-a&quot;参数运行 &quot;git commit&quot;命令时就会被提交 git diff HEAD //工作目录与上次提交时之间的所有差别 git diff dev //比较当前分支和dev 分支 文件差异 git diff HEAD -- ./lib //比较某个分支下面的目录 git stash暂存区git stash //暂时隐藏本地修改的内容 恢复到上次条的版本 git stash apply //恢复暂存区的修改 git stash list //显示暂存区的列表 git stash apply stash@&#123;1&#125;&#39; //使用在队列中的任意一个&#39;储藏&#39;(stashes) git stash clear stash@&#123;0&#125; //清空某个暂存 开发错误提交处理git reset --hard HEAD // 如果你现在的工作目录(work tree)里搞的一团乱麻, 但是你现在还没有把它们提交; 你可以通过下面的命令, 让工作目录回到上次提交时的状态(last committed state): git checkout -- hello.rb // 修改某一个文件 还原到上一次提交 //都是针对尚未提交的版本 //如果是针对已经提交了的 进行版本回退 回退后进行提交git push git revert HEAD git revert HEAD^ gitk --all &amp; //后台进程查看图像花提交图像 git pull origin newbranch //拉取指定分支 因为默认clone 是主分支 也是拉取主分支 //本地分支新建分支 推送到远程仓库中那么 进行 git push origin newbranch git push origin newbranch","categories":[{"name":"git","slug":"git","permalink":"http://example.com/categories/git/"},{"name":"笔记","slug":"git/笔记","permalink":"http://example.com/categories/git/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"}]},{"title":"python笔记","slug":"python/python","date":"2023-07-18T01:07:18.000Z","updated":"2023-07-18T07:41:38.882Z","comments":true,"path":"2023/07/18/python/python/","link":"","permalink":"http://example.com/2023/07/18/python/python/","excerpt":"","text":"元祖 tulpe (1,2,3) list [1,2,3,4] 字典： {“age”:1,’al’:2} from sqlalchemy.dialects import mysql ！！！前提不要fist() all() 实例对象 sql &#x3D; user.statement.compile(dialect&#x3D;mysql.dialect(), compile_kwargs&#x3D;{“literal_binds”: True}) 参考资料","categories":[{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"},{"name":"笔记","slug":"python/笔记","permalink":"http://example.com/categories/python/%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"docker笔记","slug":"docker/docker","date":"2023-07-18T01:07:08.000Z","updated":"2023-07-18T06:11:19.521Z","comments":true,"path":"2023/07/18/docker/docker/","link":"","permalink":"http://example.com/2023/07/18/docker/docker/","excerpt":"","text":"k8s环境搭建docker 常用命令12345678910111213141516171819202122232425262728293031323334353637docker container ls -a 显示全部 docker container start id/namedocker-compose up -d nginx 构建建启动nignx容器 docker-compose exec nginx bash 登录到nginx容器中 docker-compose down 删除所有nginx容器,镜像 docker-compose ps 显示所有容器 docker-compose restart nginx 重新启动nginx容器 docker-compose run --no-deps --rm php-fpm php -v 在php-fpm中不启动关联容器，并容器执行php -v 执行完成后删除容器 docker-compose build nginx 构建镜像 docker-compose build --no-cache nginx 不带缓存的构建。 docker-compose logs nginx 查看nginx的日志 docker-compose logs -f nginx 查看nginx的实时日志 docker-compose config -q 验证（docker-compose.yml）文件配置，当配置正确时，不输出任何内容，当文件配置错误，输出错误信息 docker-compose events --json nginx 以json的形式输出nginx的docker日志 docker-compose pause nginx 暂停nignx容器 docker-compose unpause nginx 恢复ningx容器 docker-compose rm nginx 删除容器（删除前必须关闭容器） docker-compose stop nginx 停止nignx容器 docker-compose start nginx 启动nignx容器","categories":[{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"},{"name":"笔记","slug":"docker/笔记","permalink":"http://example.com/categories/docker/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"redis笔记","slug":"redis/redis","date":"2023-07-18T01:07:04.000Z","updated":"2023-09-13T06:01:12.728Z","comments":true,"path":"2023/07/18/redis/redis/","link":"","permalink":"http://example.com/2023/07/18/redis/redis/","excerpt":"","text":"经典问题 缓存数据库一致性参考资料 掘金文档地址","categories":[{"name":"redis","slug":"redis","permalink":"http://example.com/categories/redis/"},{"name":"笔记","slug":"redis/笔记","permalink":"http://example.com/categories/redis/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"redis","slug":"redis","permalink":"http://example.com/tags/redis/"}]},{"title":"php","slug":"yii/php","date":"2023-07-18T01:07:01.000Z","updated":"2023-07-20T06:06:29.350Z","comments":true,"path":"2023/07/18/yii/php/","link":"","permalink":"http://example.com/2023/07/18/yii/php/","excerpt":"","text":"yii迁移文件php74 yii migrate/up --migrationPath=@migrations/mynobid_db/ --db=db_mynobid 阿里云源composer2 config -g repo.packagist composer https://mirrors.aliyun.com/composer/ option+command+p 显示文件的目录路径 command +i 显示简介","categories":[{"name":"php","slug":"php","permalink":"http://example.com/categories/php/"},{"name":"笔记","slug":"php/笔记","permalink":"http://example.com/categories/php/%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"mysql","slug":"mysql/mysql","date":"2023-07-18T01:06:54.000Z","updated":"2023-09-27T08:51:19.501Z","comments":true,"path":"2023/07/18/mysql/mysql/","link":"","permalink":"http://example.com/2023/07/18/mysql/mysql/","excerpt":"","text":"msyql 实现排名函数123456789101112131415161718SELECT num, be_help_customer_id, row_number ( ) over ( PARTITION BY brand_id ORDER BY num DESC ) AS r FROM (SELECT count( * ) AS num, mt.be_help_customer_id, mt.brand_id FROM `marketing_task_user_invite` AS `mt` INNER JOIN `customer_relation` AS `cr` ON `cr`.`relation_id` = `mt`.`relation_id` WHERE ( `mt`.`task_id` = &#x27;229&#x27; AND `mt`.`brand_id` = &#x27;3&#x27; AND `mt`.`be_help_customer_id` &gt; &#x27;0&#x27; AND `cr`.`status` = &#x27;1&#x27; ) GROUP BY `be_help_customer_id` ) AS t 链表批量更新123UPDATE orders as o LEFT JOIN orders_writeoff as ow on ow.order_id = o.order_id set ow.use_end_time = 1625673599where o.marketing_id = 4350 1UPDATE admin_role set rule_id =(SELECT GROUP_CONCAT(id) from admin_auth) where data_role =1; 12-- 常用日期FROM_UNIXTIME(created_at,&#x27;%Y-%m&#x27;) months 批量修改表名称1234567891011121314151617SELECT CONCAT( &#x27;ALTER TABLE &#x27;, table_name, &#x27; RENAME TO &#x27;, REPLACE ( table_name, &#x27;ACT_&#x27;, -- 要替换的字符串 &#x27;CAMUNDA_ACT_&#x27; -- 替换为新的字符串 ), &#x27;;&#x27; )FROM information_schema. TABLESWHERE TABLE_SCHEMA = &#x27;jeecg-boot&#x27; -- 数据库名称AND table_name LIKE &#x27;ACT_%&#x27;; -- 匹配表（匹配表名以 sys_ 开头的表） 备份数据123456789101112mysqldump -u root -p atm &gt; atm.sql;insert into mysql.user(Host,User,Password) values(&quot;localhost&quot;,&quot;test&quot;,password(&quot;test&quot;));CREATE USER &#x27;test&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;test&#x27;;grant all privileges on *.* to &#x27;test&#x27;@&#x27;%&#x27; identified by &#x27;test&#x27; with grant option;flush privileges;SHOW VARIABLES LIKE &#x27;validate_password%&#x27;; 1234567891011121314151617181920212223242526272829303132333435363738394041-- 今天SELECT DATE_FORMAT(NOW(),&#x27;%Y-%m-%d 00:00:00&#x27;) AS &#x27;今天开始&#x27;;SELECT DATE_FORMAT(NOW(),&#x27;%Y-%m-%d 23:59:59&#x27;) AS &#x27;今天结束&#x27;;-- 昨天SELECT DATE_FORMAT( DATE_SUB(CURDATE(), INTERVAL 1 DAY), &#x27;%Y-%m-%d 00:00:00&#x27;) AS &#x27;昨天开始&#x27;;SELECT DATE_FORMAT( DATE_SUB(CURDATE(), INTERVAL 1 DAY), &#x27;%Y-%m-%d 23:59:59&#x27;) AS &#x27;昨天结束&#x27;;-- 上周SELECT DATE_FORMAT( DATE_SUB( DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE()) DAY), INTERVAL 1 WEEK), &#x27;%Y-%m-%d 00:00:00&#x27;) AS &#x27;上周一&#x27;;SELECT DATE_FORMAT( SUBDATE(CURDATE(), WEEKDAY(CURDATE()) + 1), &#x27;%Y-%m-%d 23:59:59&#x27;) AS &#x27;上周末&#x27;;-- 本周SELECT DATE_FORMAT( SUBDATE(CURDATE(),DATE_FORMAT(CURDATE(),&#x27;%w&#x27;)-1), &#x27;%Y-%m-%d 00:00:00&#x27;) AS &#x27;本周一&#x27;;SELECT DATE_FORMAT( SUBDATE(CURDATE(),DATE_FORMAT(CURDATE(),&#x27;%w&#x27;)-7), &#x27;%Y-%m-%d 23:59:59&#x27;) AS &#x27;本周末&#x27;;-- 上面的本周算法会有问题,因为mysql是按照周日为一周第一天,如果当前是周日的话,会把时间定为到下一周.SELECT DATE_FORMAT( DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE()) DAY), &#x27;%Y-%m-%d 00:00:00&#x27;) AS &#x27;本周一&#x27;;SELECT DATE_FORMAT( DATE_ADD(SUBDATE(CURDATE(), WEEKDAY(CURDATE())), INTERVAL 6 DAY), &#x27;%Y-%m-%d 23:59:59&#x27;) AS &#x27;本周末&#x27;;-- 上月SELECT DATE_FORMAT( DATE_SUB(CURDATE(), INTERVAL 1 MONTH), &#x27;%Y-%m-01 00:00:00&#x27;) AS &#x27;上月初&#x27;;SELECT DATE_FORMAT( LAST_DAY(DATE_SUB(CURDATE(), INTERVAL 1 MONTH)), &#x27;%Y-%m-%d 23:59:59&#x27;) AS &#x27;上月末&#x27;;-- 本月SELECT DATE_FORMAT( CURDATE(), &#x27;%Y-%m-01 00:00:00&#x27;) AS &#x27;本月初&#x27;;SELECT DATE_FORMAT( LAST_DAY(CURDATE()), &#x27;%Y-%m-%d 23:59:59&#x27;) AS &#x27;本月末&#x27;;SELECT COUNT(*) as total , SUM(IFNULL(ccm.customer_id &gt;0,1,0)) as cusomer_count , SUM(IF(ccm.uid &gt;0 and ccm.customer_id = 0 ,1,0)) as user_count , SUM(IFNULL(ccm.type =1,1,0)) as staff_count FROM customer_crowd_member as ccm LEFT JOIN customer_crowd as cc on ccm.crowd_id = cc.crowd_id where cc.crowd_id = 318 时间日期：今天凌点转时间戳 1234SELECT count(*) FROM order_v3 where channel_id=&quot;AOU0002XB3&quot; and status_pay =40 and created_at &gt; UNIX_TIMESTAMP(CURRENT_DATE); 参考资料 msyql原文地址","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"},{"name":"笔记","slug":"mysql/笔记","permalink":"http://example.com/categories/mysql/%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"mysql-用户-权限","slug":"mysql/mysql-1","date":"2023-07-18T01:06:54.000Z","updated":"2023-09-27T03:22:32.397Z","comments":true,"path":"2023/07/18/mysql/mysql-1/","link":"","permalink":"http://example.com/2023/07/18/mysql/mysql-1/","excerpt":"","text":"mysql授权一个已经存在的用户所有权限docker 容器创建mysql 要登陆容器后进行授权允许所有外部ip访问 12345678//如果用户存在则不需要创建CREATE USER &#x27;test&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;test&#x27;;GRANT ALL PRIVILEGES ON *.* TO &#x27;test&#x27;@&#x27;%&#x27;;FLUSH PRIVILEGES;","categories":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"},{"name":"笔记","slug":"mysql/笔记","permalink":"http://example.com/categories/mysql/%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"mysql 用户 权限","slug":"mysql-用户-权限","permalink":"http://example.com/tags/mysql-%E7%94%A8%E6%88%B7-%E6%9D%83%E9%99%90/"}]},{"title":"mongodb笔记","slug":"mongo/mongodb","date":"2023-07-18T01:03:53.000Z","updated":"2023-07-18T07:52:55.233Z","comments":true,"path":"2023/07/18/mongo/mongodb/","link":"","permalink":"http://example.com/2023/07/18/mongo/mongodb/","excerpt":"","text":"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364age &gt; 10 and title = &quot;bbb&quot;db.mycol.find( &#123;$and : [ &#123;&quot;age&quot;:&#123;$gt:10&#125;&#125; , &#123;&quot;title&quot;: &quot;bbb&quot;&#125;]&#125;) or条件db.article.find(&#123;&quot;$or&quot;: [&#123;&quot;title&quot;: &quot;mongodb&quot;&#125;, &#123;&quot;author&quot;: &quot;god&quot;&#125;]&#125;)模糊mysql like title like &quot;%mongodb%&quot;db.article.find(&#123;&quot;title&quot;: &#x27;/mongodb/&#x27;&#125;)排序order by read descdb.article.find(&#123;&quot;type&quot;: &quot;mongodb&quot;&#125;).sort(&#123;&quot;read&quot;: -1&#125;)递增或递减（$inc）db.game.update(&#123;&quot;_id&quot;: 123&#125;, &#123; &quot;$inc&quot;: &#123;&quot;count&quot;: 10&#125;&#125;) // 每次count都加10db.game.update(&#123;&quot;_id&quot;: 123&#125;, &#123; &quot;$push&quot;: &#123;&quot;score&quot;: 123&#125;&#125;)还可以一次追加多个元素：db.game.update(&#123;&quot;_id&quot;: 123&#125;, &#123;&quot;$push&quot;: &#123;&quot;score&quot;: [12,123]&#125;&#125;)一次追加多个元素（$pushAll）：db.game.update(&#123;&quot;_id&quot;: 123&#125;, &#123;&quot;$pushAll&quot;: &#123;&quot;score&quot;: [12,123]&#125;&#125;)追加不重复元素（$addToSet） $addToSet类似集合Set，只有当这个值不在元素内时才增加db.game.update(&#123;&quot;_id&quot;: 123&#125;, &#123;&quot;$addToSet&quot;: &#123;&quot;score&quot;: 123&#125;&#125;)//$pop每次只能删除数组中的一个元素，1表示删除最后一个，-1表示删除第一个。删除最后一个元素db.game.update(&#123;&quot;_id&quot;: 123&#125;, &#123;&quot;$pop&quot;: &#123;&quot;score&quot;: 1&#125;&#125;)删除第一个元素db.game.update(&#123;&quot;_id&quot;: 123&#125;, &#123;&quot;$pop&quot;: &#123;&quot;score&quot;: -1&#125;&#125;)删除特定元素（$pull）db.game.update(&#123;&quot;_id&quot;: 123&#125;, &#123;&quot;$pull&quot;: &#123;&quot;score&quot;: 123&#125;&#125;)db.getCollection(&quot;log_api&quot;).find(&#123;&quot;group&quot;:&quot;none\\\\bid_v3\\\\models\\\\forms\\\\epointupv2\\\\Checkbaohan&quot;&#125;).sort(&#123;&#x27;created_at&#x27;:-1&#125;)//mongodb查询 log_api 渠道请求日志db.getCollection(&quot;log_api&quot;).find(&#123;&quot;apiname&quot;:&quot;Baohanrestore&quot;,&quot;created_at&quot;:&#123;$gt:1671758672&#125;&#125;).sort(&#123;&quot;created_at&quot;:-1&#125;)//模糊查询db.log_api.find(&#123;&quot;accountid&quot;:96,&quot;response&quot;:&quot;无效的key|解密失败&quot;,&quot;request&quot;: /&quot;kaibiaotime&quot;:&quot;2023-04-24 09:30:00&quot;/&#125;).sort(&#123;&quot;created_at&quot;:-1&#125;)//mongodb 查询日志db.log_api.find(&#123; created_at: &#123; $gte: 1664352000, $lte: 1664355600 &#125;, apiname: &quot;InvoiceNotice&quot;, request:&#123;$regex:&quot;1202222190056041154&quot;&#125;&#125;)//正则匹配db.log_api.find(&#123; apiname: mb.regex.contains(&quot;sd&quot;)&#125;) db.getCollection(&quot;log_api&quot;).find(&#123;&quot;apiname&quot;:&quot;Quitapply&quot;,&quot;accountid&quot;:28&#125;).sort(&#123;&quot;created_at&quot;:-1&#125;) 参考资料 mongodb操作数据库 分组聚合mongodb","categories":[{"name":"mongodb","slug":"mongodb","permalink":"http://example.com/categories/mongodb/"},{"name":"常用","slug":"mongodb/常用","permalink":"http://example.com/categories/mongodb/%E5%B8%B8%E7%94%A8/"}],"tags":[{"name":"mongodb","slug":"mongodb","permalink":"http://example.com/tags/mongodb/"}]},{"title":"linux笔记","slug":"docker/linux-1","date":"2023-07-18T01:00:46.000Z","updated":"2023-09-21T02:19:30.922Z","comments":true,"path":"2023/07/18/docker/linux-1/","link":"","permalink":"http://example.com/2023/07/18/docker/linux-1/","excerpt":"","text":"1234567891011121314151617181920212223242526272829function git_branch &#123; branch=&quot;`git branch 2&gt;/dev/null | grep &quot;^\\*&quot; | sed -e &quot;s/^\\*\\ //&quot;`&quot; if [ &quot;$&#123;branch&#125;&quot; != &quot;&quot; ];then if [ &quot;$&#123;branch&#125;&quot; = &quot;(no branch)&quot; ];then branch=&quot;(`git rev-parse --short HEAD`...)&quot; fi echo &quot; ($branch)&quot; fi&#125;export PS1=&#x27;\\u \\[\\033[01;36m\\]\\W\\[\\033[01;32m\\]$(git_branch)\\[\\033[00m\\] \\$ &#x27;编辑环境变量~/.bashrc//刷新配置source ~/.bashrc# uname -a # 查看内核/操作系统/CPU信息# head -n 1 /etc/issue # 查看操作系统版本# cat /proc/cpuinfo # 查看CPU信息# hostname # 查看计算机名# lspci -tv # 列出所有PCI设备（yum install pciutils）# lsusb -tv # 列出所有USB设备# lsmod # 列出加载的内核模块# env # 查看环境变量 正确删除k8s pod容器命令123kubectl delete deployment &lt;deployment名&gt; -n &lt;namespace&gt;例如：kubectl delete deployment nginx-web -n yundoc 在 Kubernetes 中，可以使用 hostPath 来将本地节点上的目录挂载到 Pod 内。这对于需要访问节点文件系统的情况非常有用，但请注意这可能会带来一些安全和可移植性方面的问题。以下是一个基本的示例： 创建一个本地目录： 在你的 Kubernetes 节点上创建一个本地目录，该目录将用于存储你想要挂载到容器内的文件或数据。 1mkdir /path/to/host/dir 创建一个 YAML 文件： 创建一个 YAML 文件，例如 pod-with-hostpath.yaml，并定义 Pod 的配置，将 hostPath 用于挂载目录。 123456789101112131415apiVersion: v1kind: Podmetadata: name: my-podspec: containers: - name: my-container image: &lt;your-image&gt; volumeMounts: - name: hostpath-volume mountPath: /path/inside/container volumes: - name: hostpath-volume hostPath: path: /path/to/host/dir 请将 &lt;your-image&gt; 替换为你实际使用的容器镜像。 在这个示例中，我们创建了一个 Pod，将本地节点上的 /path/to/host/dir 目录挂载到了容器内的 /path/inside/container。 应用配置： 使用 kubectl apply -f 命令来将配置文件应用到集群中： 1kubectl apply -f pod-with-hostpath.yaml Kubernetes 将会创建 Pod，并将本地目录挂载到容器内。 请注意： 使用 hostPath 可能会带来安全风险，因为容器可以访问节点上的任何文件。请谨慎使用并确保限制访问权限。 由于 hostPath 使用本地节点的路径，这将会影响到 Pod 的可移植性。如果需要在不同节点之间迁移 Pod，建议考虑其他持久化存储解决方案，如 NFS、CSI 等。 如果你在 Kubernetes 中运行的容器内部暴露了一个临时端口，你需要一种方法来使这个端口可从物理机访问。有几种方法可以做到这一点，以下是其中一些选项：1. 使用 kubectl port-forward你可以使用 kubectl port-forward 命令来将容器的端口映射到本地机器上，从而可以从物理机访问容器服务。 1kubectl port-forward &lt;pod-name&gt; &lt;local-port&gt;:&lt;container-port&gt; 例如，如果你的容器名称是 my-container，临时服务运行在容器的端口 8080，你可以运行以下命令： 1kubectl port-forward my-container 8080:8080 现在你可以在物理机上使用 localhost:8080 访问容器服务。 2. 使用 NodePort 类型的 Service你可以创建一个 NodePort 类型的 Service，它会将容器内的端口暴露到所有节点的相同端口上。 123456789101112apiVersion: v1kind: Servicemetadata: name: my-temp-servicespec: type: NodePort selector: app: my-app ports: - protocol: TCP port: 80 targetPort: 8080 # 这里指定容器内临时服务的端口 然后通过 kubectl apply -f my-service.yaml 将配置应用到集群中。Kubernetes 将会为 Service 分配一个随机的高端口号（例如：30XXX），你可以使用这个端口来访问容器服务。 3. 使用 LoadBalancer 类型的 Service如果你的集群运行在云环境中（如 AWS、GCP、Azure 等），你可以使用 LoadBalancer 类型的 Service 来将服务暴露到公共互联网。 123456789101112apiVersion: v1kind: Servicemetadata: name: my-temp-servicespec: type: LoadBalancer selector: app: my-app ports: - protocol: TCP port: 80 targetPort: 8080 # 这里指定容器内临时服务的端口 然后通过 kubectl apply -f my-service.yaml 将配置应用到集群中。Kubernetes 将会创建一个云提供商特定的负载均衡器，并将流量转发到服务的端口上。 请注意，这些方法中的每一个都有适用的场景，具体取决于你的部署环境和要求。选择一个方法时，请确保你的网络配置和安全规则允许流量流向暴露的端口。","categories":[{"name":"linux","slug":"linux","permalink":"http://example.com/categories/linux/"},{"name":"基础","slug":"linux/基础","permalink":"http://example.com/categories/linux/%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"}]},{"title":"linux常用基础命令","slug":"docker/linux","date":"2023-07-18T01:00:44.000Z","updated":"2023-10-07T09:55:39.108Z","comments":true,"path":"2023/07/18/docker/linux/","link":"","permalink":"http://example.com/2023/07/18/docker/linux/","excerpt":"","text":"文件大小排序1du -ah | sort -rn 下载指定的文件 解决mac无法lrsz命令1scp root@192.168.1.204:/var/wwwroot/zlyadmin-dev11/console/runtime/huashang_tb/20230712.log ./ linux某个进程查看1cat /proc/25001/cmdline linux进程的详细参数1ll /proc/25001 文件压缩文件夹1zip -q -r html.zip /home/Blinux/html 解压到指定文件目录1unzip test.zip -d /data grep查找关键字1grep -r &quot;test&quot; /data/reports 杀死特定端口号的进程12345kill -9 lsof -i:18100 | awk &#x27;NR==2&#123;print $2&#125;&#x27;kill -9 lsof -i | grep 18100 | awk &#x27;&#123;print $2&#125;&#x27;kill -9 ss -antlup | grep 18100 | awk &#x27;&#123;print $7&#125;&#x27; | awk -F&#x27;[=,]&#x27; &#x27;&#123;print $3&#125;&#x27; 删除文件节点123456ls -ifind -inum 133945 -exec rm -rf &#123;&#125; \\;grep -10 &#x27;123&#x27; test.log grep 是一个在Linux和Unix系统中用于搜索文本的强大命令行工具。它可以用来在文件中查找包含特定模式或关键字的行，并将匹配的行输出到屏幕上。 以下是一些常用的 grep 命令示例： 基本的关键字搜索： 1grep &#x27;关键字&#x27; 文件名 例如，如果要在文件 example.txt 中搜索关键字 “hello”，可以使用以下命令： 1grep &#x27;hello&#x27; example.txt 忽略大小写： 1grep -i &#x27;关键字&#x27; 文件名 例如，如果你希望搜索时忽略大小写，可以使用 -i 选项： 1grep -i &#x27;hello&#x27; example.txt 显示行号： 1grep -n &#x27;关键字&#x27; 文件名 这会显示匹配行的行号： 1grep -n &#x27;hello&#x27; example.txt 显示匹配行之前的行数： 1grep -B 2 &#x27;关键字&#x27; 文件名 这将显示匹配行之前的2行： 1grep -B 2 &#x27;hello&#x27; example.txt 显示匹配行之后的行数： 1grep -A 2 &#x27;关键字&#x27; 文件名 这将显示匹配行之后的2行： 1grep -A 2 &#x27;hello&#x27; example.txt 显示匹配行及其上下文： 1grep -C 2 &#x27;关键字&#x27; 文件名 这将显示匹配行的前后2行： 1grep -C 2 &#x27;hello&#x27; example.txt 递归搜索目录： 1grep -r &#x27;关键字&#x27; 目录名 这将在指定目录及其子目录中递归搜索： 1grep -r &#x27;hello&#x27; /path/to/directory 反向匹配（显示不包含关键字的行）： 1grep -v &#x27;关键字&#x27; 文件名 这将显示不包含关键字的所有行： 1grep -v &#x27;hello&#x27; example.txt 这些只是 grep 的一些基本用法。它提供了许多选项和功能，可以根据具体的需求进行定制。可以通过 man grep 命令来查看 grep 的详细帮助文档，以了解更多选项和用法。","categories":[{"name":"linux","slug":"linux","permalink":"http://example.com/categories/linux/"},{"name":"基础","slug":"linux/基础","permalink":"http://example.com/categories/linux/%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"}]}],"categories":[{"name":"php","slug":"php","permalink":"http://example.com/categories/php/"},{"name":"yii","slug":"php/yii","permalink":"http://example.com/categories/php/yii/"},{"name":"工具","slug":"工具","permalink":"http://example.com/categories/%E5%B7%A5%E5%85%B7/"},{"name":"生活","slug":"生活","permalink":"http://example.com/categories/%E7%94%9F%E6%B4%BB/"},{"name":"前端","slug":"前端","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF/"},{"name":"hexo","slug":"前端/hexo","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF/hexo/"},{"name":"openai","slug":"openai","permalink":"http://example.com/categories/openai/"},{"name":"大语言模型","slug":"openai/大语言模型","permalink":"http://example.com/categories/openai/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B/"},{"name":"基础","slug":"php/基础","permalink":"http://example.com/categories/php/%E5%9F%BA%E7%A1%80/"},{"name":"记录","slug":"生活/记录","permalink":"http://example.com/categories/%E7%94%9F%E6%B4%BB/%E8%AE%B0%E5%BD%95/"},{"name":"golang","slug":"golang","permalink":"http://example.com/categories/golang/"},{"name":"基础","slug":"golang/基础","permalink":"http://example.com/categories/golang/%E5%9F%BA%E7%A1%80/"},{"name":"项目","slug":"项目","permalink":"http://example.com/categories/%E9%A1%B9%E7%9B%AE/"},{"name":"笔记","slug":"项目/笔记","permalink":"http://example.com/categories/%E9%A1%B9%E7%9B%AE/%E7%AC%94%E8%AE%B0/"},{"name":"phpstrom","slug":"php/phpstrom","permalink":"http://example.com/categories/php/phpstrom/"},{"name":"hyperf","slug":"php/hyperf","permalink":"http://example.com/categories/php/hyperf/"},{"name":"linux","slug":"linux","permalink":"http://example.com/categories/linux/"},{"name":"windows wsl","slug":"linux/windows-wsl","permalink":"http://example.com/categories/linux/windows-wsl/"},{"name":"mac","slug":"mac","permalink":"http://example.com/categories/mac/"},{"name":"vue","slug":"前端/vue","permalink":"http://example.com/categories/%E5%89%8D%E7%AB%AF/vue/"},{"name":"面试","slug":"面试","permalink":"http://example.com/categories/%E9%9D%A2%E8%AF%95/"},{"name":"总结","slug":"面试/总结","permalink":"http://example.com/categories/%E9%9D%A2%E8%AF%95/%E6%80%BB%E7%BB%93/"},{"name":"git","slug":"git","permalink":"http://example.com/categories/git/"},{"name":"笔记","slug":"git/笔记","permalink":"http://example.com/categories/git/%E7%AC%94%E8%AE%B0/"},{"name":"python","slug":"python","permalink":"http://example.com/categories/python/"},{"name":"笔记","slug":"python/笔记","permalink":"http://example.com/categories/python/%E7%AC%94%E8%AE%B0/"},{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"},{"name":"笔记","slug":"docker/笔记","permalink":"http://example.com/categories/docker/%E7%AC%94%E8%AE%B0/"},{"name":"redis","slug":"redis","permalink":"http://example.com/categories/redis/"},{"name":"笔记","slug":"redis/笔记","permalink":"http://example.com/categories/redis/%E7%AC%94%E8%AE%B0/"},{"name":"笔记","slug":"php/笔记","permalink":"http://example.com/categories/php/%E7%AC%94%E8%AE%B0/"},{"name":"mysql","slug":"mysql","permalink":"http://example.com/categories/mysql/"},{"name":"笔记","slug":"mysql/笔记","permalink":"http://example.com/categories/mysql/%E7%AC%94%E8%AE%B0/"},{"name":"mongodb","slug":"mongodb","permalink":"http://example.com/categories/mongodb/"},{"name":"常用","slug":"mongodb/常用","permalink":"http://example.com/categories/mongodb/%E5%B8%B8%E7%94%A8/"},{"name":"基础","slug":"linux/基础","permalink":"http://example.com/categories/linux/%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"},{"name":"yii","slug":"yii","permalink":"http://example.com/tags/yii/"},{"name":"备忘录","slug":"备忘录","permalink":"http://example.com/tags/%E5%A4%87%E5%BF%98%E5%BD%95/"},{"name":"博客构建","slug":"博客构建","permalink":"http://example.com/tags/%E5%8D%9A%E5%AE%A2%E6%9E%84%E5%BB%BA/"},{"name":"openai","slug":"openai","permalink":"http://example.com/tags/openai/"},{"name":"函数 get_headers","slug":"函数-get-headers","permalink":"http://example.com/tags/%E5%87%BD%E6%95%B0-get-headers/"},{"name":"ioc","slug":"ioc","permalink":"http://example.com/tags/ioc/"},{"name":"di","slug":"di","permalink":"http://example.com/tags/di/"},{"name":"外链","slug":"外链","permalink":"http://example.com/tags/%E5%A4%96%E9%93%BE/"},{"name":"生活","slug":"生活","permalink":"http://example.com/tags/%E7%94%9F%E6%B4%BB/"},{"name":"go","slug":"go","permalink":"http://example.com/tags/go/"},{"name":"phpstorm","slug":"phpstorm","permalink":"http://example.com/tags/phpstorm/"},{"name":"hyperf","slug":"hyperf","permalink":"http://example.com/tags/hyperf/"},{"name":"wsl2","slug":"wsl2","permalink":"http://example.com/tags/wsl2/"},{"name":"windows","slug":"windows","permalink":"http://example.com/tags/windows/"},{"name":"mac","slug":"mac","permalink":"http://example.com/tags/mac/"},{"name":"面试","slug":"面试","permalink":"http://example.com/tags/%E9%9D%A2%E8%AF%95/"},{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"},{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"},{"name":"redis","slug":"redis","permalink":"http://example.com/tags/redis/"},{"name":"mysql 用户 权限","slug":"mysql-用户-权限","permalink":"http://example.com/tags/mysql-%E7%94%A8%E6%88%B7-%E6%9D%83%E9%99%90/"},{"name":"mongodb","slug":"mongodb","permalink":"http://example.com/tags/mongodb/"},{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"}]}